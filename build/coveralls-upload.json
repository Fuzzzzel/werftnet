{"service_name":"travis-ci","service_job_id":"12345","git":{"branch":"master","head":{"id":"6e9376702b8cfa82f964c0cfcb3abf70d25d82f0","author_name":"Fuzzzzel","author_email":"the_weirdo@gmx.net","committer_name":"Fuzzzzel","committer_email":"the_weirdo@gmx.net","message":"Add send to coveralls"},"remotes":[{"name":"origin","url":"https:\/\/github.com\/Fuzzzzel\/werftnet.git"}]},"run_at":"2018-05-10 03:16:12 +0000","source_files":[{"name":"src\/AppBundle\/AppBundle.php","source":"<?php\r\n\r\nnamespace AppBundle;\r\n\r\nuse Symfony\\Component\\HttpKernel\\Bundle\\Bundle;\r\n\r\nclass AppBundle extends Bundle\r\n{\r\n}","coverage":[null,null,null,null,null,null,null,null,null]},{"name":"src\/AppBundle\/AppFlow\/AppError.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 10.10.2017\r\n * Time: 22:45\r\n *\/\r\n\r\nnamespace AppBundle\\AppFlow;\r\n\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\nclass AppError\r\n{\r\n\r\n    \/**\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\"})\r\n     *\/\r\n    protected $type;\r\n\r\n    \/**\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\"})\r\n     *\/\r\n    protected $message;\r\n\r\n    function __construct($type, $message)\r\n    {\r\n        $this->setType($type);\r\n        $this->setMessage($message);\r\n    }\r\n\r\n    function setType($type)\r\n    {\r\n        $this->type = $type;\r\n    }\r\n\r\n    function getType()\r\n    {\r\n        return $this->type;\r\n    }\r\n\r\n    function setMessage($message)\r\n    {\r\n        $this->message = $message;\r\n    }\r\n\r\n    function getMessage()\r\n    {\r\n        return $this->message;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,null,0,0,0,null,null,0,0,0,null,null,0,0,0,null,null,0,0,0,null]},{"name":"src\/AppBundle\/AppFlow\/ErrorResponse.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 10.10.2017\r\n * Time: 22:56\r\n *\/\r\n\r\nnamespace AppBundle\\AppFlow;\r\n\r\n\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\nuse JMS\\Serializer\\SerializerBuilder;\r\nuse JMS\\Serializer\\SerializationContext;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\nclass ErrorResponse extends Response\r\n{\r\n    \/**\r\n     * @JMS\\Type(\"stdClass\")\r\n     * @JMS\\Groups({\"display\"})\r\n     *\/\r\n    protected $data;\r\n\r\n    \/**\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\"})\r\n     *\/\r\n    protected $message;\r\n\r\n    \/**\r\n     * @JMS\\Type(\"array<AppBundle\\AppFlow\\AppError>\")\r\n     * @JMS\\Groups({\"display\"})\r\n     *\/\r\n    protected $errors;\r\n\r\n    public function __construct()\r\n    {\r\n        parent::__construct();\r\n        $this->data = new \\stdClass();\r\n        $this->message = \"\";\r\n        $this->errors = array();\r\n    }\r\n\r\n    public function addError(AppError $error) {\r\n        $this->errors[] = $error;\r\n        $this->updateContent();\r\n    }\r\n\r\n    public function getErrors() {\r\n        return $this->errors;\r\n    }\r\n\r\n    public function setData(\\stdClass $data) {\r\n        $this->data = $data;\r\n        $this->updateContent();\r\n    }\r\n\r\n    public function getData() {\r\n        return $this->data;\r\n    }\r\n\r\n    public function getMessage() {\r\n        return $this->message;\r\n    }\r\n\r\n    public function setMessage($message) {\r\n        $this->message = $message;\r\n        $this->updateContent();\r\n    }\r\n\r\n    public function updateContent() {\r\n        $serializer = SerializerBuilder::create()->build();\r\n        $content = $serializer->serialize($this, 'json', SerializationContext::create()->setGroups(['display']));\r\n        $this->setContent($content);\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,null,0,0,0,null,null,0,0,null,null,0,0,0,null,null,0,0,null,null,0,0,null,null,0,0,0,null,null,0,0,0,0,null]},{"name":"src\/AppBundle\/Controller\/Admin\/AdminStuffController.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 06.08.2016\r\n * Time: 22:48\r\n *\/\r\n\r\nnamespace AppBundle\\Controller\\Admin;\r\n\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\r\nuse AppBundle\\Entity\\Freelancer;\r\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\n\r\nclass AdminStuffController extends Controller\r\n{\r\n\r\n    \/**\r\n     * @Route(\"admin\/test\", name=\"admin\/test\")\r\n     *\/\r\n    function adminTest() {\r\n        return new Response(\"Seite konnte aufgerufen werden\");\r\n    }\r\n\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null]},{"name":"src\/AppBundle\/Controller\/Admin\/SimpleEntityController.php","source":"<?php\r\n\/**\r\n * Hinzuf\u00fcgen, \u00c4ndern und L\u00f6schen eines Objekts, welches\r\n * von SimpleEntity erbt\r\n *\/\r\n\r\nnamespace AppBundle\\Controller\\Admin;\r\n\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Method;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\nuse Doctrine\\Common\\Util\\Inflector as Inflector;\r\nuse AppBundle\\Entity\\QueryHelper;\r\n\r\nclass SimpleEntityController extends Controller\r\n{\r\n    \/**\r\n     * @param $entityName\r\n     * @return \\stdClass\r\n     *\r\n     * !! Duplicated in DefualtsController --> Move to service?!\r\n     *\/\r\n    public function getSimpleEntity($entityName)\r\n    {\r\n        $simpleEntities = new \\stdClass;\r\n        $classname = \"\\\\AppBundle\\\\Entity\\\\\" . $entityName;\r\n\r\n        $simpleEntities->values = $this->getDoctrine()\r\n            ->getRepository($classname)\r\n            ->findBy(\r\n                array(),\r\n                array('name' => 'ASC')\r\n            );\r\n\r\n        $simpleObj = new $classname();\r\n        $simpleEntities->display_name = $simpleObj->getDisplayName();\r\n\r\n\r\n        return $simpleEntities;\r\n    }\r\n\r\n    \/**\r\n     * @param $entityName\r\n     * @return object\r\n     * @Method(\"GET\")\r\n     * @Route(\"\/admin\/simple_entity\/{entityName}\", name=\"fetchSimpleEntity\")\r\n     *\/\r\n    public function fetchSimpleEntity($entityName)\r\n    {\r\n        $entityName = QueryHelper::getFullEntityName($entityName);\r\n        $result = $this->getSimpleEntity($entityName);\r\n        return new JsonResponse($result);\r\n    }\r\n\r\n\r\n    \/**\r\n     * @param String $entityName\r\n     * @param Request $request\r\n     * @return object\r\n     * @Method(\"POST\")\r\n     * @Route(\"\/admin\/simple_entity\/{entityName}\", name=\"createSimpleEntityItem\")\r\n     *\/\r\n    public function createSimpleEntityItem($entityName, Request $request)\r\n    {\r\n        $params = array();\r\n        $content = $request->getContent();\r\n        if (!empty($content)) {\r\n            $params = json_decode($content);\r\n        }\r\n\r\n        $newItemName = $params->newItemName;\r\n        $entityName = QueryHelper::getFullEntityName($entityName);\r\n\r\n        $classname = \"\\\\AppBundle\\\\Entity\\\\\" . $entityName;\r\n        $newItem = new $classname();\r\n        $newItem->setName($newItemName);\r\n\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        \/\/ Pr\u00fcfen ob bereits ein Objekt mit diesem Namen existiert\r\n        $exists = $em->getRepository($classname)->findOneBy(\r\n            array('name' => $newItemName)\r\n        );\r\n\r\n        \/\/ Falls ja, nicht hinzuf\u00fcgen\r\n        if (($exists != null) && ($newItemName != \"\")) {\r\n            return null;\r\n        }\r\n\r\n        $em->persist($newItem);\r\n        $em->flush();\r\n\r\n        return new JsonResponse($newItem);\r\n    }\r\n\r\n    \/**\r\n     * @param String $entityName\r\n     * @param Integer $id\r\n     * @param Request $request\r\n     * @return null\r\n     * @Method(\"DELETE\")\r\n     * @Route(\"\/admin\/simple_entity\/{entityName}\/{id}\", name=\"deleteSimpleEntityItem\")\r\n     *\/\r\n    function deleteSimpleEntityItem($entityName, $id, Request $request)\r\n    {\r\n        $params = array();\r\n        $content = $request->getContent();\r\n        if (!empty($content)) {\r\n            $params = json_decode($content);\r\n        }\r\n\r\n        $entityName = QueryHelper::getFullEntityName($entityName);\r\n        $classname = \"\\\\AppBundle\\\\Entity\\\\\" . $entityName;\r\n\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        \/\/ Pr\u00fcfen ob bereits ein Objekt mit diesem Namen existiert\r\n        $entityToRemove = $em->getRepository($classname)->findOneBy(\r\n            array('id' => $id)\r\n        );\r\n\r\n        \/\/ Falls ja, nicht hinzuf\u00fcgen\r\n        if ($entityToRemove == null) {\r\n            return null;\r\n        }\r\n\r\n        \/\/ Falls nein, der Datenbank hinzuf\u00fcgen und mit id zur\u00fcckgeben\r\n        $em->remove($entityToRemove);\r\n        $em->flush();\r\n\r\n        return new JsonResponse();\r\n    }\r\n\r\n    \/**\r\n     * @param String $entityName\r\n     * @param Integer $id\r\n     * @param Request $request\r\n     * @return null\r\n     * @Method(\"POST\")\r\n     * @Route(\"admin\/simple_entity\/{entityName}\/{id}\", name=\"updateSimpleEntityItem\")\r\n     *\/\r\n    function updateSimpleEntityItem($entityName, $id, Request $request)\r\n    {\r\n        \/\/ $entity, $editedItemName\r\n        $params = array();\r\n        $content = $request->getContent();\r\n        if (!empty($content)) {\r\n            $params = json_decode($content);\r\n        }\r\n\r\n        $editedItemName = $params->itemEditedName;\r\n\r\n        $entityName = QueryHelper::getFullEntityName($entityName);\r\n        $classname = \"\\\\AppBundle\\\\Entity\\\\\" . $entityName;\r\n\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        \/\/ Pr\u00fcfen ob Objekt existiert\r\n        $entityToUpdate = $em->getRepository($classname)->findOneBy(\r\n            array('id' => $id)\r\n        );\r\n\r\n        \/\/ Falls nein, nicht aktualisieren\r\n        if ($entityToUpdate == null) {\r\n            return null;\r\n        }\r\n\r\n        \/\/ Pr\u00fcfen ob bereits ein Objekt mit diesem Namen existiert\r\n        $exists = $em->getRepository($classname)->findOneBy(\r\n            array('name' => $editedItemName)\r\n        );\r\n\r\n        \/\/ Falls ja, nicht hinzuf\u00fcgen\r\n        if (($exists != null) && ($editedItemName != \"\")) {\r\n            return null;\r\n        }\r\n\r\n        \/\/ Falls ja, Objekt aktualisieren\r\n        $entityToUpdate->setName($editedItemName);\r\n        $em->flush();\r\n\r\n        return new JsonResponse();\r\n    }\r\n\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,0,0,0,0,0,0,null,0,0,null,null,0,0,null,null,null,null,null,null,null,null,0,0,0,0,0,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,0,null,0,0,0,null,0,null,null,0,0,0,null,null,0,0,0,null,0,0,null,0,0,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,0,null,0,null,null,0,0,0,null,null,0,0,0,null,null,0,0,null,0,0,null,null,null,null,null,null,null,null,null,null,0,null,0,0,0,0,0,null,0,null,0,0,null,0,null,null,0,0,0,null,null,0,0,0,null,null,0,0,0,null,null,0,0,0,null,null,0,0,null,0,0,null,null]},{"name":"src\/AppBundle\/Controller\/Admin\/TwoLevelEntityController.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 06.08.2017\r\n * Time: 23:20\r\n *\/\r\n\r\nnamespace AppBundle\\Controller\\Admin;\r\n\r\nuse AppBundle\\Entity\\QueryHelper;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Method;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\n\r\nclass TwoLevelEntityController extends Controller\r\n{\r\n    \/**\r\n     * @param $entityName\r\n     * @return \\stdClass\r\n     *\r\n     * !! Duplicated in DefaultsController --> Move to service?!\r\n     *\/\r\n    public function getTwoLevelEntity($entityName)\r\n    {\r\n        $items = new \\stdClass;\r\n        $itemsTemp = array();\r\n        $classname = \"AppBundle\\\\Entity\\\\\" . $entityName;\r\n\r\n        $repo = $this->getDoctrine()\r\n            ->getRepository($classname);\r\n        $itemsFromDb = $repo->findAllItems();\r\n\r\n        \/\/ Subsprachen den Hauptsprachen zuordnen\r\n        foreach ($itemsFromDb as $lang) {\r\n            $itemObj = new \\stdClass();\r\n            $itemObj->id = $lang->getId();\r\n            $itemObj->name = $lang->getName();\r\n\r\n            if ($lang->isMainItem()) {\r\n                \/\/ Add main language to result array\r\n                $itemsTemp[$lang->getId()] = $itemObj;\r\n            } else {\r\n                \/\/ Add sub language to main\r\n                $itemsTemp[$lang->getMainItem()->getId()]->sub_items[] = $itemObj;\r\n            }\r\n        }\r\n\r\n        $dummyItem = new $classname();\r\n        $items->display_name = $dummyItem->getDisplayName();\r\n        foreach ($itemsTemp as $completeItem) {\r\n            $items->values[] = $completeItem;\r\n        }\r\n\r\n        return $items;\r\n    }\r\n\r\n    \/**\r\n     * @param $entityName\r\n     * @return object\r\n     * @Method(\"GET\")\r\n     * @Route(\"\/admin\/two_level_entity\/{entityName}\", name=\"fetchTwoLevelEntity\")\r\n     *\/\r\n    public function fetchTwoLevelEntityEntity($entityName)\r\n    {\r\n        $entityName = QueryHelper::getFullEntityName($entityName);\r\n        $result = $this->getTwoLevelEntity($entityName);\r\n        return new JsonResponse($result);\r\n    }\r\n\r\n    \/**\r\n     * @param $entityName\r\n     * @return object\r\n     * @Method(\"POST\")\r\n     * @Route(\"\/admin\/two_level_entity\/{entityName}\", name=\"createTwoLevelEntityMainItem\")\r\n     *\/\r\n    public function createTwoLevelEntityMainItem($entityName, Request $request)\r\n    {\r\n        return $this->createTwoLevelEntityItem($entityName, null, $request);\r\n    }\r\n\r\n    \/**\r\n     * Neues Item hinzuf\u00fcgen. Falls neues Subitem, wird die Id des\r\n     * zugeh\u00f6rigen Hauptitems \u00fcbergeben.\r\n     *\r\n     * @param String $newItemName Name des neuen Items\r\n     * @return JsonResponse\r\n     * @Method(\"POST\")\r\n     * @Route(\"\/admin\/two_level_entity\/{entityName}\/{mainItemId}\/sub_items\", name=\"createTwoLevelEntityItem\")\r\n     *\/\r\n    public function createTwoLevelEntityItem($entityName, $mainItemId = null, Request $request)\r\n    {\r\n        $params = array();\r\n        $content = $request->getContent();\r\n        if (!empty($content)) {\r\n            $params = json_decode($content);\r\n        }\r\n\r\n        $entityName = QueryHelper::getFullEntityName($entityName);\r\n        $newItemName = $params->newItemName;\r\n\r\n        $fullEntityName = \"AppBundle\\\\Entity\\\\\" . $entityName;\r\n\r\n        $newItem = new $fullEntityName();\r\n        $newItem->setName($newItemName);\r\n\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        $repo = $em->getRepository(\"AppBundle\\\\Entity\\\\\" . $entityName);\r\n\r\n        \/\/ Pr\u00fcfen ob bereits ein Objekt mit diesem Namen existiert\r\n        $exists = $repo->findOneBy(\r\n            array('name' => $newItemName)\r\n        );\r\n\r\n        \/\/ Falls ja, nicht hinzuf\u00fcgen\r\n        if (($exists !== null) && ($newItemName != \"\")) {\r\n            \/\/ ToDo: Fehlermeldung zur\u00fcckgeben\r\n            return new JsonResponse(\"Die Bezeichnung existiert schon oder die Bezeichnung ist leer!\");\r\n        }\r\n\r\n        \/\/ Falls neues Subitem\r\n        \/\/ Hauptitem zum neuen Subitem suchen\r\n        if ($mainItemId != null) {\r\n            $itemMain = $repo->findOneBy(\r\n                array('id' => $mainItemId));\r\n        } else {\r\n            $itemMain = null;\r\n        }\r\n\r\n        if ($itemMain !== null) {\r\n            $newItem->setMainItem($itemMain);\r\n        }\r\n\r\n        $em->persist($newItem);\r\n        $em->flush();\r\n\r\n        return new JsonResponse($newItem);\r\n    }\r\n\r\n\r\n    \/**\r\n     * Item wird gel\u00f6scht, wenn es sich um ein Subitem handelt oder\r\n     * wenn es sich um ein Hauptitem ohne Subitems handelt\r\n     *\r\n     * @param Request $request\r\n     * @return JsonResponse\r\n     * @Method(\"DELETE\")\r\n     * @Route(\"\/admin\/two_level_entity\/{entityName}\/{mainItemId}\/sub_items\/{subItemId}\", name=\"deleteTwoLevelEntitySubItem\")\r\n     *\/\r\n    function deleteTwoLevelEntitySubItem($entityName, $mainItemId, $subItemId, Request $request)\r\n    {\r\n        return $this->deleteTwoLevelEntityItem($entityName, $subItemId, $request);\r\n    }\r\n\r\n    \/**\r\n     * Item wird gel\u00f6scht, wenn es sich um ein Subitem handelt oder\r\n     * wenn es sich um ein Hauptitem ohne Subitems handelt\r\n     *\r\n     * @param Request $request\r\n     * @return JsonResponse\r\n     * @Method(\"DELETE\")\r\n     * @Route(\"\/admin\/two_level_entity\/{entityName}\/{removeItemId}\", name=\"deleteTwoLevelEntityItem\")\r\n     *\/\r\n    function deleteTwoLevelEntityItem($entityName, $removeItemId, Request $request)\r\n    {\r\n        $entityName = QueryHelper::getFullEntityName($entityName);\r\n\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        \/\/ Pr\u00fcfen ob bereits ein Objekt mit diesem Namen existiert\r\n        $repo = $em->getRepository(\"AppBundle\\\\Entity\\\\\" . $entityName);\r\n        $entityToRemove = $repo->findOneBy(\r\n            array('id' => $removeItemId)\r\n        );\r\n\r\n        \/\/ Falls nicht gefunden oder Hauptsprache mit Subsprachen abbrechen\r\n        if ($entityToRemove == null) {\r\n            \/\/ ToDo: Fehlermeldung zur\u00fcckgeben\r\n            return new JsonResponse();\r\n        }\r\n\r\n        $subItems = $repo->findAllSubItems($removeItemId);\r\n        if (empty($subItems)) {\r\n            \/\/ Falls keine SubItems vorhanden, entfernen\r\n            $em->remove($entityToRemove);\r\n            $em->flush();\r\n        } else {\r\n            \/\/ ToDo: Fehlermeldung zur\u00fcckgeben\r\n            return new JsonResponse();\r\n        }\r\n\r\n        return new JsonResponse();\r\n    }\r\n\r\n    \/**\r\n     * Name des Items \u00e4ndern\r\n     *\r\n     * @param Request $request\r\n     * @return JsonResponse\r\n     * @Method(\"POST\")\r\n     * @Route(\"\/admin\/two_level_entity\/{entityName}\/{mainItemId}\/sub_items\/{subItemId}\", name=\"updateTwoLevelEntitySubItem\")\r\n     *\/\r\n    function updateTwoLevelEntitySubItem($entityName, $mainItemId, $subItemId, Request $request)\r\n    {\r\n        return $this->updateTwoLevelEntityItem($entityName, $subItemId, $request);\r\n    }\r\n\r\n    \/**\r\n     * Name des Items \u00e4ndern\r\n     *\r\n     * @param Request $request\r\n     * @return JsonResponse\r\n     * @Method(\"POST\")\r\n     * @Route(\"\/admin\/two_level_entity\/{entityName}\/{itemId}\", name=\"updateTwoLevelEntityItem\")\r\n     *\/\r\n    function updateTwoLevelEntityItem($entityName, $itemId, Request $request)\r\n    {\r\n        $params = array();\r\n        $content = $request->getContent();\r\n        if (!empty($content)) {\r\n            $params = json_decode($content);\r\n        }\r\n\r\n        $entityName = QueryHelper::getFullEntityName($entityName);\r\n        $editedEntityName = $params->itemNewName;\r\n\r\n        $classname = \"\\\\AppBundle\\\\Entity\\\\\" . $entityName;\r\n\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        \/\/ Pr\u00fcfen ob Objekt existiert\r\n        $entityToUpdate = $em->getRepository($classname)->findOneBy(\r\n            array('id' => $itemId)\r\n        );\r\n\r\n        \/\/ Falls nein, nicht aktualisieren\r\n        if ($entityToUpdate == null) {\r\n            return null;\r\n        }\r\n\r\n        \/\/ Pr\u00fcfen ob bereits ein Objekt mit diesem Namen existiert\r\n        $exists = $em->getRepository($classname)->findOneBy(\r\n            array('name' => $editedEntityName)\r\n        );\r\n\r\n        \/\/ Falls ja, nicht hinzuf\u00fcgen\r\n        if (($exists != null) && ($editedEntityName != \"\")) {\r\n            return null;\r\n        }\r\n\r\n        \/\/ Falls ja, Objekt aktualisieren\r\n        $entityToUpdate->setName($editedEntityName);\r\n        $em->flush();\r\n\r\n        return new JsonResponse();\r\n    }\r\n\r\n\r\n    \/**\r\n     * Item zu Hauptitem machen\r\n     *\r\n     * @param Request $request\r\n     * @return JsonResponse\r\n     * @Route(\"admin\/makeMainItem\", name=\"makeMainItem\")\r\n     *\/\r\n    function makeMainItem(Request $request)\r\n    {\r\n        \/\/ $entity, $editedItemName\r\n        if ($request->getMethod() != 'POST') {\r\n            return null;\r\n        }\r\n\r\n        $params = array();\r\n        $content = $request->getContent();\r\n        if (!empty($content)) {\r\n            $params = json_decode($content);\r\n        }\r\n\r\n        $entityName = $params->entityName;\r\n        $itemId = $params->itemId;\r\n\r\n        $classname = \"\\\\AppBundle\\\\Entity\\\\\" . $entityName;\r\n\r\n        $em = $this->getDoctrine()->getManager();\r\n        $repo = $em->getRepository($classname);\r\n\r\n        \/\/ Pr\u00fcfen ob Objekt existiert\r\n        $item = $repo->findOneBy(\r\n            array('id' => $itemId)\r\n        );\r\n\r\n        \/\/ Falls nein, Fehlermeldung ausgeben\r\n        if ($item == null) {\r\n            \/\/ ToDo: Fehlermeldung, wenn zu l\u00f6schende Sprache nicht gefunden\r\n            return new JsonResponse();\r\n        }\r\n\r\n        \/\/ Falls ja, Objekt aktualisieren\r\n        $item->setMainItem(null);\r\n        $em->flush();\r\n\r\n        return new JsonResponse();\r\n    }\r\n\r\n    \/**\r\n     * Sprache zur Subsprache machen, falls es sich nicht um eine\r\n     * Hauptsprache handelt, die bereits eigene Subsprachen hat.\r\n     *\r\n     * @param Request $request\r\n     * @return JsonResponse\r\n     * @Route(\"admin\/addAsSubItem\", name=\"addAsSubItem\")\r\n     *\/\r\n    function addAsSubItem(Request $request)\r\n    {\r\n        \/\/ $entity, $editedItemName\r\n        if ($request->getMethod() != 'POST') {\r\n            return null;\r\n        }\r\n\r\n        $params = array();\r\n        $content = $request->getContent();\r\n        if (!empty($content)) {\r\n            $params = json_decode($content);\r\n        }\r\n\r\n        $entityName = $params->entityName;\r\n        $itemId = $params->itemId;\r\n        $itemMainId = $params->itemMainId;\r\n\r\n        $classname = \"\\\\AppBundle\\\\Entity\\\\\" . $entityName;\r\n\r\n        $em = $this->getDoctrine()->getManager();\r\n        $repo = $em->getRepository($classname);\r\n\r\n        \/\/ Pr\u00fcfen ob Objekt existiert\r\n        $item = $repo->findOneBy(\r\n            array('id' => $itemId)\r\n        );\r\n\r\n        $itemMain = $repo->findOneBy(\r\n            array('id' => $itemMainId)\r\n        );\r\n\r\n        \/\/ Falls Sprache nicht existiert, nicht aktualisieren\r\n        if ($item == null || $itemMain == null) {\r\n            \/\/ ToDo: Fehlermeldung, dass Sprache nicht gefunden\r\n            return new JsonResponse();\r\n        }\r\n\r\n        \/\/ Falls Sprache nicht existiert, nicht aktualisieren\r\n        if ($item == $itemMain) {\r\n            \/\/ ToDo: Fehlermeldung, dass Sprache nicht Subsprache von sich selbst sein darf.\r\n            return new JsonResponse();\r\n        }\r\n\r\n        $subItems = $repo->findAllSubItems($itemId);\r\n\r\n        if (empty($subItems)) {\r\n            \/\/ Falls ja, Objekt aktualisieren\r\n            $item->setMainItem($itemMain);\r\n            $em->flush();\r\n        }\r\n\r\n        return new JsonResponse();\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,0,0,null,null,0,0,0,0,null,0,null,0,0,null,0,0,0,null,0,0,0,0,0,null,0,0,null,null,null,null,null,null,null,null,0,0,0,0,0,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,0,null,0,null,0,0,null,0,null,0,null,null,0,0,0,null,null,0,null,0,0,null,null,null,0,0,0,0,0,0,null,0,0,0,null,0,0,null,0,0,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null,0,0,0,0,null,null,0,null,0,0,null,0,0,null,0,0,0,null,0,0,null,0,0,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,0,null,0,null,0,null,null,0,0,0,null,null,0,0,0,null,null,0,0,0,null,null,0,0,0,null,null,0,0,null,0,0,null,null,null,null,null,null,null,null,null,null,0,null,0,0,0,null,0,0,0,0,0,null,0,0,null,0,null,0,0,null,null,0,0,0,null,null,0,null,0,0,null,null,0,0,null,0,0,null,null,null,null,null,null,null,null,null,null,0,null,0,0,0,null,0,0,0,0,0,null,0,0,0,null,0,null,0,0,null,null,0,0,0,null,0,0,0,null,null,0,null,0,0,null,null,0,null,0,0,null,0,null,0,null,0,0,0,null,0,0,null]},{"name":"src\/AppBundle\/Controller\/Admin\/UserAdminController.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 16.07.2016\r\n * Time: 19:32\r\n *\/\r\n\r\nnamespace AppBundle\\Controller\\Admin;\r\n\r\nuse AppBundle\\AppFlow\\ErrorResponse;\r\nuse AppBundle\\AppFlow\\AppError;\r\nuse JMS\\Serializer\\DeserializationContext;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Method;\r\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\nuse AppBundle\\Entity\\User;\r\nuse JMS\\Serializer\\SerializerBuilder;\r\nuse JMS\\Serializer\\SerializationContext;\r\n\r\n\/**\r\n * Class DefaultsController\r\n * @package AppBundle\\Controller\r\n *\r\n *\/\r\nclass UserAdminController extends Controller\r\n{\r\n\r\n    \/**\r\n     * Anlegen eines neuen Users\r\n     * Ben\u00f6tigt: username, password (, email noch nicht)\r\n     *\r\n     * @Method(\"POST\")\r\n     * @Route(\"\/admin\/users\", name=\"addUser\")\r\n     *\/\r\n    public function addUser(Request $request)\r\n    {\r\n        if ($request->getMethod() != 'POST') {\r\n            return null;\r\n        }\r\n\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        \/\/ Daten aus Request in Objekte \u00fcberf\u00fchren\r\n        $content = $request->getContent();\r\n\r\n        $serializer = $this->get('jms_serializer');\r\n\r\n\r\n        $newUser = $serializer->deserialize(\r\n            $content,\r\n            'AppBundle\\Entity\\User',\r\n            'json',\r\n            DeserializationContext::create()->setGroups(array('create'))\r\n        );\r\n\r\n\r\n        $usernameExists = $this->getDoctrine()->getRepository('AppBundle\\Entity\\User')->findOneBy(array('username' => $newUser->getUsername()));\r\n        if ($usernameExists !== null) {\r\n            $response = new \\stdClass();\r\n            $response->error = 'Benutzername existiert schon!';\r\n            return new JsonResponse($response);\r\n        }\r\n\r\n        if (strlen($newUser->getPassword()) < 4) {\r\n            $response = new \\stdClass();\r\n            $response->error = 'Passwort ist zu kurz (min. 4 Zeichen)!';\r\n            return new JsonResponse($response);\r\n        }\r\n\r\n\r\n        if (\r\n            ($newUser->getUsername() != \"\" && $newUser->getUsername() != null) &&\r\n            ($newUser->getPassword() != \"\" && $newUser->getPassword() != null)\r\n        ) {\r\n            $encoder = $this->container->get('security.password_encoder');\r\n            $encoded = $encoder->encodePassword($newUser, $newUser->getPassword());\r\n            $newUser->setPassword($encoded);\r\n\r\n            $em->persist($newUser);\r\n            $em->flush();\r\n\r\n            $response = $serializer->serialize(\r\n                $newUser,\r\n                'json',\r\n                SerializationContext::create()->setGroups(['display'])\r\n            );\r\n\r\n            return new Response($response);\r\n        }\r\n\r\n        $response = new \\stdClass();\r\n        $response->error = \"User konnte nicht angelegt werden\";\r\n        return new JsonResponse($response);\r\n    }\r\n\r\n\r\n    \/**\r\n     * \u00c4ndern der Daten eines users\r\n     *\r\n     * @Method(\"POST\")\r\n     * @Route(\"\/admin\/users\/{id}\", name=\"editUser\")\r\n     *\/\r\n    public\r\n    function editUser($id, Request $request)\r\n    {\r\n\r\n        \/\/ Daten aus Request in Objekte \u00fcberf\u00fchren\r\n        $content = $request->getContent();\r\n\r\n        $serializer = $this->get('jms_serializer');\r\n        $user = $serializer->deserialize(\r\n            $content,\r\n            'AppBundle\\Entity\\User',\r\n            'json',\r\n            DeserializationContext::create()->setGroups(array('update'))\r\n        );\r\n\r\n        if($user->getId() != $id) {\r\n            return new Response('Id von User stimmt nicht mit Route \u00fcberein!', Response::HTTP_BAD_REQUEST);\r\n        }\r\n\r\n        \/\/ EntityManager laden\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        $em->persist($user);\r\n        $em->flush();\r\n\r\n        $serializer = SerializerBuilder::create()->build();\r\n        $response = $serializer->serialize($user, 'json', SerializationContext::create()->setGroups(['display']));\r\n\r\n        return new Response($response);\r\n    }\r\n\r\n\r\n    \/**\r\n     * L\u00f6schen eines Users anhand der ID\r\n     *\r\n     * @Route(\"\/admin\/deleteUser\", name=\"deleteUser\")\r\n     *\/\r\n    public\r\n    function deleteUser(Request $request)\r\n    {\r\n        if ($request->getMethod() != 'POST') {\r\n            return null;\r\n        }\r\n\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        \/\/ Daten aus Request in Objekte \u00fcberf\u00fchren\r\n        $content = $request->getContent();\r\n\r\n        $params = null;\r\n\r\n        if (!empty($content)) {\r\n            $params = json_decode($content, true); \/\/ 2nd param to get as array\r\n        }\r\n\r\n        if (isset($params['user_id'])) {\r\n            $user = $this->getDoctrine()->getRepository('AppBundle\\Entity\\User')->find($params['user_id']);\r\n\r\n            if ($user != null) {\r\n                $em->remove($user);\r\n                $em->flush();\r\n\r\n                return new Response(\"User wurde gel\u00f6scht\");\r\n            }\r\n        }\r\n\r\n        return new Response(\"User wurde nicht gel\u00f6scht\");\r\n    }\r\n\r\n\r\n    \/**\r\n     * Alle user ausgeben\r\n     *\r\n     * @Method(\"GET\")\r\n     * @Route(\"\/admin\/users\/{id}\", name=\"getAllUsers\")\r\n     *\/\r\n    public\r\n    function getAllUsers($id = null, Request $request)\r\n    {\r\n\r\n        if ($id === null) {\r\n            $users = $this->getDoctrine()->getRepository('AppBundle\\Entity\\User')->findAll();\r\n        } else {\r\n            $users = $this->getDoctrine()->getRepository('AppBundle\\Entity\\User')->findBy(\r\n                array(\r\n                    'id' => $id\r\n                ),\r\n                array(\r\n                    'username' => 'ASC'\r\n                )\r\n            );\r\n        }\r\n\r\n        $serializer = SerializerBuilder::create()->build();\r\n        $response = $serializer->serialize(\r\n            $users,\r\n            'json',\r\n            SerializationContext::create()->setGroups(['display'])\r\n        );\r\n\r\n        return new Response($response);\r\n    }\r\n\r\n    \/**\r\n     * \u00c4ndern des Passwort eines Users anhand der ID\r\n     *\r\n     * @Method(\"POST\")\r\n     * @Route(\"\/admin\/users\/{id}\/password\", name=\"changeUserPwdAdmin\")\r\n     *\/\r\n    public\r\n    function changeUserPwd($id, Request $request)\r\n    {\r\n        $response = new JsonResponse();\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        \/\/ Daten aus Request in Objekte \u00fcberf\u00fchren\r\n        $content = $request->getContent();\r\n\r\n        $params = null;\r\n\r\n        if (!empty($content)) {\r\n            $pwdNew = $content; \/\/ 2nd param to get as array\r\n        }\r\n\r\n        if ($id > 0 && strlen($pwdNew) > 0) {\r\n\r\n            if (strlen($pwdNew) < 4) {\r\n                $response->setContent('Passwort ist zu kurz (min. 4 Zeichen)!');\r\n                $response->setStatusCode(Response::HTTP_BAD_REQUEST);\r\n                return $response;\r\n            }\r\n\r\n            $user = $this->getDoctrine()->getRepository('AppBundle\\Entity\\User')->find($id);\r\n\r\n            if ($user != null) {\r\n                $factory = $this->get('security.encoder_factory');\r\n                $encoder = $factory->getEncoder($user);\r\n\r\n                $encoded = $encoder->encodePassword($pwdNew, $user->getSalt());\r\n                $user->setPassword($encoded);\r\n\r\n                $em->persist($user);\r\n                $em->flush();\r\n\r\n                $response->setStatusCode(Response::HTTP_OK);\r\n                return $response;\r\n            }\r\n        }\r\n\r\n        return $response;\r\n    }\r\n\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,null,null,0,null,0,null,null,0,0,0,0,0,0,null,null,0,0,0,0,0,0,null,0,0,0,0,0,null,null,0,0,0,0,0,0,0,null,0,0,null,0,0,0,0,0,null,0,0,null,0,0,0,0,null,null,null,null,null,null,null,null,0,null,0,null,null,0,null,0,0,0,0,0,0,0,null,0,0,0,null,null,0,null,0,0,null,0,0,null,0,0,null,null,null,null,null,null,null,0,null,0,0,0,0,null,0,null,null,0,null,0,null,0,0,0,null,0,0,null,0,0,0,null,0,0,0,null,0,0,null,null,null,null,null,null,null,null,0,null,0,null,0,0,0,0,0,0,0,0,0,0,0,0,null,0,0,0,0,0,0,null,0,0,null,null,null,null,null,null,null,0,null,0,0,0,null,null,0,null,0,null,0,0,0,null,0,null,0,0,0,0,0,null,0,null,0,0,0,null,0,0,null,0,0,null,0,0,0,0,null,0,0,null,null]},{"name":"src\/AppBundle\/Controller\/AuthenticatinController.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 31.08.2017\r\n * Time: 20:21\r\n *\/\r\n\r\nnamespace AppBundle\\Controller;\r\n\r\n\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\r\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\r\n\r\nclass AuthenticatinController extends Controller\r\n{\r\n    \/\/ login user\r\n    \/\/ logout user\r\n    \/\/ Ask for logged in user (in session)\r\n    \/\/ update own profile - later\r\n\r\n    \/**\r\n     * @Route(\"\/login_check\", name=\"security_login_check\")\r\n     *\/\r\n    public function loginCheckAction()\r\n    {\r\n        \/\/ will never be executed\r\n        $i = 1;\r\n    }\r\n\r\n    \/**\r\n     * @Route(\"\/logout\", name=\"security_logout\")\r\n     *\/\r\n    public function logoutAction()\r\n    {\r\n        \/\/ will never be executed\r\n        $i = 1;\r\n    }\r\n\r\n    \/**\r\n     * @Route(\"\/get_logged_in_user\", name=\"security_get_logged_in_user\")\r\n     *\/\r\n    public function getLoggedInUserAction()\r\n    {\r\n\r\n        $user = $this->get('security.token_storage')->getToken()->getUser();\r\n        $auth_checker = $this->get('security.authorization_checker');\r\n\r\n        $response = new \\stdClass();\r\n\r\n        if ($auth_checker->isGranted('IS_AUTHENTICATED_REMEMBERED')) {\r\n            $response->id = $user->getId();\r\n            $response->username = $user->getUsername();\r\n            $roles = $user->getRoles();\r\n            $response->roles = array();\r\n            foreach ($roles as $role) {\r\n                $response->roles[] = $role;\r\n            }\r\n        }\r\n\r\n        return new JsonResponse($response);\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,0,null,null,null,null,null,0,null,0,0,null,null,null,null,null,0,null,0,0,null,0,null,0,0,0,0,0,0,0,0,0,null,0,0,null]},{"name":"src\/AppBundle\/Controller\/CustomerController.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 04.09.2016\r\n * Time: 19:49\r\n *\/\r\n\r\nnamespace AppBundle\\Controller;\r\n\r\n\r\nuse Doctrine\\ORM\\EntityManager;\r\nuse Doctrine\\ORM\\EntityNotFoundException;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Method;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\nuse JMS\\Serializer\\SerializationContext;\r\nuse JMS\\Serializer\\DeserializationContext;\r\nuse JMS\\Serializer\\SerializerBuilder;\r\nuse AppBundle\\Entity\\Customer;\r\nuse AppBundle\\Entity\\QueryHelper;\r\nuse Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\r\n\r\n\/**\r\n * Class CustomerController\r\n * @package AppBundle\\Controller\r\n *\r\n *\/\r\nclass CustomerController extends Controller\r\n{\r\n    \/**\r\n     * @param Request $request\r\n     * @return null\r\n     * @throws EntityNotFoundException\r\n     *\r\n     * @Route(\"\/customer\/editCustomer\", name=\"editCustomer\")\r\n     *\/\r\n    public function editCustomer(Request $request)\r\n    {\r\n        \/\/ $entity, $name\r\n        if ($request->getMethod() != 'POST') {\r\n            return null;\r\n        }\r\n\r\n        \/\/ Daten aus Request in Objekte \u00fcberf\u00fchren\r\n        $content = $request->getContent();\r\n\r\n        $serializer = $this->get('jms_serializer');\r\n        $cust = $serializer->deserialize(\r\n            $content,\r\n            'AppBundle\\Entity\\Customer',\r\n            'json',\r\n            DeserializationContext::create()->setGroups(array('update'))\r\n        );\r\n\r\n        \/\/ EntityManager laden\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        if ($cust->getId() == null) {\r\n            $cust->setCreatedAt(new \\DateTime());\r\n        }\r\n\r\n        \/\/ --------------------------------------------\r\n        \/\/ Test f\u00fcr den Persist-Listener eines Kunden\r\n        \/\/ --------------------------------------------\r\n        $address = $cust->getAddress();\r\n        if ($address->getId() == null) {\r\n            $address->setCustomer($cust);\r\n            $em->persist($address);\r\n        }\r\n\r\n        $em->persist($cust);\r\n        $em->flush();\r\n\r\n        $serializer = SerializerBuilder::create()->build();\r\n        $response = $serializer->serialize($cust, 'json', SerializationContext::create()->setGroups(['display']));\r\n\r\n        return new Response($response);\r\n    }\r\n\r\n\r\n    \/**\r\n     * @return Response\r\n     *\r\n     * @Route(\"\/customer\/getAllCustomers\", name=\"getAllCustomers\")\r\n     *\/\r\n    public function getAllCustomers()\r\n    {\r\n        $repository = $this->getDoctrine()->getRepository('AppBundle:Customer');\r\n\r\n        $customerList = $repository->findAll();\r\n\r\n        $serializer = SerializerBuilder::create()->build();\r\n        $response = $serializer->serialize(\r\n            $customerList,\r\n            'json',\r\n            SerializationContext::create()->setGroups(['display'])\r\n        );\r\n\r\n        return new Response($response);\r\n    }\r\n\r\n    \/**\r\n     * @param Request $request\r\n     * @return null\r\n     * @throws EntityNotFoundException\r\n     *\r\n     * @Method(\"GET\")\r\n     * @Route(\"\/customer\/{customerId}\", name=\"getCustomerById\")\r\n     *\/\r\n    public function getCustomerById(Request $request, $customerId)\r\n    {\r\n        if (!isset($customerId) && !(intval($customerId) > 0)) {\r\n            throw new NotFoundHttpException('Customer mit der id {$id} wurde nicht gefunden!');\r\n        }\r\n\r\n        $repository = $this->getDoctrine()->getRepository('AppBundle:Customer');\r\n        $customer = $repository->find(intval($customerId));\r\n\r\n        $serializer = SerializerBuilder::create()->build();\r\n        $response = $serializer->serialize(\r\n            $customer,\r\n            'json',\r\n            SerializationContext::create()->setGroups(['display'])\r\n        );\r\n        return new Response($response);\r\n    }\r\n\r\n    \/**\r\n     * @return Response\r\n     *\r\n     * @Route(\"\/customer\/searchCustomers\", name=\"searchCustomers\")\r\n     *\/\r\n    public function searchCustomers(Request $request)\r\n    {\r\n        if ($request->getMethod() != 'POST') {\r\n            return null;\r\n        }\r\n\r\n        \/\/ Daten aus Request in Objekte \u00fcberf\u00fchren\r\n        $content = $request->getContent();\r\n\r\n        $params = null;\r\n\r\n        if (!empty($content)) {\r\n            $params = json_decode($content, true); \/\/ 2nd param to get as array\r\n        }\r\n\r\n        if(!isset($params['page']))\r\n            $params['page'] = 1;\r\n\r\n        $repository = $this->getDoctrine()->getRepository('AppBundle:Customer');\r\n        $custPaginatedResult = $repository->findAllBySearchParams($params, 20, $params['page']);\r\n\r\n        $custSerializableResult = QueryHelper::getSerializableResult($custPaginatedResult);\r\n\r\n        $response = json_encode($custSerializableResult);\r\n\r\n        return new Response($response);\r\n    }\r\n\r\n\r\n    \/**\r\n     * @param Request $request\r\n     * @return null\r\n     * @throws EntityNotFoundException\r\n     *\r\n     * @Route(\"\/customer\/deleteCustomer\", name=\"deleteCustomer\")\r\n     *\/\r\n    public function deleteCustomer(Request $request)\r\n    {\r\n        \/\/ $entity, $name\r\n        if ($request->getMethod() != 'POST') {\r\n            return null;\r\n        }\r\n\r\n        \/\/ Daten aus Request in Objekte \u00fcberf\u00fchren\r\n        $content = $request->getContent();\r\n\r\n\r\n        \/\/ EntityManager laden\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        if ($content != null) {\r\n            $cu = $em->find('AppBundle\\Entity\\Customer', $content);\r\n\r\n            if ($cu != null) {\r\n                $em->remove($cu);\r\n                $em->flush();\r\n            }\r\n        }\r\n\r\n        return new JsonResponse();\r\n    }\r\n\r\n    \/\/ ------ CUSTOMER CONTACT ------\r\n\r\n    \/**\r\n     * @param Request $request\r\n     * @return null\r\n     * @throws EntityNotFoundException\r\n     *\r\n     * @Method(\"GET\")\r\n     * @Route(\"\/customer_contact\/{customerContactId}\", name=\"getCustomerContactById\")\r\n     *\/\r\n    public function getCustomerContactById(Request $request, $customerContactId)\r\n    {\r\n        if (!isset($customerContactId) && !(intval($customerContactId) > 0)) {\r\n            throw new NotFoundHttpException('Customer mit der id {$id} wurde nicht gefunden!');\r\n        }\r\n\r\n        $repository = $this->getDoctrine()->getRepository('AppBundle:Customer\\CustomerContact');\r\n        $customerContact = $repository->find(intval($customerContactId));\r\n\r\n        $serializer = SerializerBuilder::create()->build();\r\n        $response = $serializer->serialize(\r\n            $customerContact,\r\n            'json',\r\n            SerializationContext::create()->setGroups(['display'])\r\n        );\r\n        return new Response($response);\r\n    }\r\n\r\n\r\n    \/**\r\n     * F\u00fcgt Kontakt hinzu oder bearbeitet ihn\r\n     *\r\n     * @param Request $request\r\n     * @return null\r\n     * @throws EntityNotFoundException\r\n     *\r\n     * @Method(\"POST\")\r\n     * @Route(\"\/customer\/editCustomerContact\", name=\"editCustomerContact\")\r\n     *\/\r\n    public function editCustomerContact(Request $request)\r\n    {\r\n        \/\/ Daten aus Request in Objekte \u00fcberf\u00fchren\r\n        $content = $request->getContent();\r\n\r\n        \/\/ Request-Parameter decodieren\r\n        $params = null;\r\n\r\n        if (!empty($content)) {\r\n            $params = json_decode($content, true); \/\/ 2nd param to get as array\r\n        }\r\n\r\n\r\n        \/\/ EntityManager laden\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        \/\/ Kunde suchen, zu dem ein Kontakt hinzugef\u00fcgt werden soll\r\n        if (isset($params['customer_id'])) {\r\n\r\n            $serializer = $this->get('jms_serializer');\r\n            $contact = $serializer->deserialize(\r\n                $content,\r\n                'AppBundle\\Entity\\Customer\\CustomerContact',\r\n                'json',\r\n                DeserializationContext::create()->setGroups(array('update'))\r\n            );\r\n\r\n            \/\/ Erstellungsdatum setzen\r\n            if ($contact->getId() == null) {\r\n                $contact->setCreatedAt(new \\DateTime());\r\n            }\r\n\r\n            \/\/ Neuen Kontakt zu Kunde hinzuf\u00fcgen\r\n            if ($contact->getCustomer() == null) {\r\n                $customer = $em->find('AppBundle\\Entity\\Customer', $params['customer_id']);\r\n                $customer->addContact($contact);\r\n            }\r\n\r\n            \/\/ Daten speichern\r\n            if ($contact->getCustomer() != null) {\r\n                $em->persist($contact);\r\n                $em->flush();\r\n            }\r\n\r\n            \/\/ Liefern der Suche als Ergebnis (JSON)\r\n            $serializer = SerializerBuilder::create()->build();\r\n            $response = $serializer->serialize(\r\n                $contact,\r\n                'json',\r\n                SerializationContext::create()->setGroups(['display'])\r\n            );\r\n\r\n            return new Response($response);\r\n        }\r\n\r\n        \/\/ Falls man bis hierher kommt, hat etwas nicht geklappt\r\n        return new Response(\"Fehler beim Speichern des Kontakts!\", 500);\r\n    }\r\n\r\n\r\n    \/**\r\n     * L\u00f6scht den Kontakt mit der \u00fcbergebenen ID\r\n     * \r\n     * @param Request $request\r\n     * @return null\r\n     * @throws EntityNotFoundException\r\n     *\r\n     * @Route(\"\/customer\/deleteContact\", name=\"deleteContact\")\r\n     *\/\r\n    public function deleteContact(Request $request)\r\n    {\r\n        \/\/ $entity, $name\r\n        if ($request->getMethod() != 'POST') {\r\n            return null;\r\n        }\r\n\r\n        \/\/ Daten aus Request in Objekte \u00fcberf\u00fchren\r\n        $content = $request->getContent();\r\n\r\n\r\n        \/\/ EntityManager laden\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        if ($content != null) {\r\n            $contact = $em->find('AppBundle\\Entity\\Customer\\CustomerContact', $content);\r\n\r\n            if ($contact != null) {\r\n                $em->remove($contact);\r\n                $em->flush();\r\n\r\n                return new JsonResponse();\r\n            }\r\n        }\r\n\r\n        \/\/ Wenn die Funktion bis hierher kommt, gab es einen Fehler\r\n        return new Response(\"Fehler beim L\u00f6schen des Ansprechpartners\", 500);\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,0,null,0,0,0,0,0,0,null,null,null,0,null,0,0,null,null,null,null,null,0,0,0,0,null,null,0,0,null,0,0,null,0,null,null,null,null,null,null,null,null,null,null,0,null,0,null,0,0,0,0,0,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,0,0,null,0,0,0,0,0,null,0,null,null,null,null,null,null,null,null,null,1,0,null,null,null,1,null,1,null,1,0,null,null,1,1,null,1,1,null,1,null,1,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,0,null,null,null,0,null,0,0,null,0,0,0,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,0,0,null,0,0,0,0,0,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null,0,null,0,0,null,null,null,null,0,null,null,0,null,0,0,0,0,0,0,null,null,null,0,0,null,null,null,0,0,0,null,null,null,0,0,0,null,null,null,0,0,0,0,0,null,null,0,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,0,null,null,null,0,null,0,0,null,0,0,0,null,0,null,null,null,null,0,null,null]},{"name":"src\/AppBundle\/Controller\/DefaultsController.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 16.07.2016\r\n * Time: 19:32\r\n *\/\r\n\r\nnamespace AppBundle\\Controller;\r\n\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Method;\r\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\r\nuse Symfony\\Component\\Serializer\\Serializer;\r\nuse Symfony\\Component\\Serializer\\Normalizer\\GetSetMethodNormalizer;\r\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\r\n\r\nuse AppBundle\\Entity\\Common\\Language;\r\nuse AppBundle\\Entity\\Common\\LanguageSub;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\nuse AppBundle\\Controller\\Admin\\SimpleEntityController;\r\nuse AppBundle\\Entity\\Common\\Sector;\r\n\r\n\/**\r\n * Class DefaultsController\r\n * @package AppBundle\\Controller\r\n *\r\n *\/\r\nclass DefaultsController extends Controller\r\n{\r\n    \/**\r\n     * @Route(\"\/getDefaults\", name=\"getDefaults\")\r\n     * @Method(\"GET\")\r\n     *\/\r\n    public function returnDefaults()\r\n    {\r\n        $defaultData = new \\stdClass();\r\n        $defaultData->yes_no_in_progress = $this->getSimpleEntity('Common\\\\YesNoInProgress');\r\n        $defaultData->anrede = $this->getSimpleEntity('Common\\\\Anrede');\r\n        $defaultData->country = $this->getSimpleEntity('Common\\\\Country');\r\n        $defaultData->sectors = $this->getTwoLevelEntity('Common\\\\Sector');\r\n        $defaultData->languages = $this->getTwoLevelEntity('Common\\\\Language');\r\n        $defaultData->services = $this->getSimpleEntity('Common\\\\Service');\r\n        $defaultData->price_units = $this->getSimpleEntity('Common\\\\PriceUnit');\r\n        $defaultData->currency = $this->getSimpleEntity('Common\\\\Currency');\r\n        $defaultData->cat_tools = $this->getSimpleEntity('Common\\\\CatTool');\r\n        $defaultData->freelancer_payment_types = $this->getSimpleEntity('Freelancer\\\\FreelancerPaymentType');\r\n        $defaultData->freelancer_invoicing_types = $this->getSimpleEntity('Freelancer\\\\FreelancerInvoicingType');\r\n        $defaultData->freelancer_rating = $this->getSimpleEntity('Freelancer\\\\FreelancerRating');\r\n        $defaultData->freelancer_status = $this->getSimpleEntity('Freelancer\\\\FreelancerStatus');\r\n        $defaultData->customer_origin = $this->getSimpleEntity('Customer\\\\CustomerOrigin');\r\n        $defaultData->customer_potential = $this->getSimpleEntity('Customer\\\\CustomerPotential');\r\n        $defaultData->customer_status = $this->getSimpleEntity('Customer\\\\CustomerStatus');\r\n        $defaultData->user_roles = $this->getSimpleEntity('User\\\\UserRole');\r\n        $defaultData->account_managers = $this->getAccountManagers();\r\n\r\n        return new JsonResponse($defaultData);\r\n    }\r\n\r\n    \/**\r\n     * @Route(\"\/getUserRoles\", name=\"getUserRoles\")\r\n     * @Method(\"GET\")\r\n     *\/\r\n    public function getUserRoles()\r\n    {\r\n        $userRoles = new \\stdClass();\r\n        $userRoles = $this->getSimpleEntity('User\\\\UserRole');\r\n\r\n        return new JsonResponse($userRoles);\r\n    }\r\n\r\n    \/**\r\n     * @param $entityName\r\n     * @return \\stdClass\r\n     *\r\n     * !! Duplicated in SimpleEntityController --> Move to service?!\r\n     *\/\r\n    public function getSimpleEntity($entityName)\r\n    {\r\n        $simpleEntities = new \\stdClass;\r\n        $classname = \"\\\\AppBundle\\\\Entity\\\\\" . $entityName;\r\n\r\n        $simpleEntities->values = $this->getDoctrine()\r\n            ->getRepository($classname)\r\n            ->findBy(\r\n                array(),\r\n                array('name' => 'ASC')\r\n            );\r\n\r\n        $simpleObj = new $classname();\r\n        $simpleEntities->display_name = $simpleObj->getDisplayName();\r\n\r\n        return $simpleEntities;\r\n    }\r\n\r\n    \/**\r\n     * @param $entityName\r\n     * @return \\stdClass\r\n     *\r\n     * !! Duplicated in TwoLevelEntityController --> Move to service?!\r\n     *\/\r\n    public function getTwoLevelEntity($entityName)\r\n    {\r\n        $items = new \\stdClass;\r\n        $itemsTemp = array();\r\n        $classname = \"AppBundle\\\\Entity\\\\\" . $entityName;\r\n\r\n        $repo = $this->getDoctrine()\r\n            ->getRepository($classname);\r\n        $itemsFromDb = $repo->findAllItems();\r\n\r\n        \/\/ Subsprachen den Hauptsprachen zuordnen\r\n        foreach ($itemsFromDb as $lang) {\r\n            $itemObj = new \\stdClass();\r\n            $itemObj->id = $lang->getId();\r\n            $itemObj->name = $lang->getName();\r\n\r\n            if ($lang->isMainItem()) {\r\n                \/\/ Add main language to result array\r\n                $itemsTemp[$lang->getId()] = $itemObj;\r\n            } else {\r\n                \/\/ Add sub language to main\r\n                $itemsTemp[$lang->getMainItem()->getId()]->sub_items[] = $itemObj;\r\n            }\r\n        }\r\n\r\n        $dummyItem = new $classname();\r\n        $items->display_name = $dummyItem->getDisplayName();\r\n        foreach ($itemsTemp as $completeItem) {\r\n            $items->values[] = $completeItem;\r\n        }\r\n\r\n        return $items;\r\n    }\r\n\r\n\r\n    \/**\r\n     * @return \\stdClass\r\n     *\r\n     *\/\r\n    public function getAccountManagers()\r\n    {\r\n        $accountManagers = new \\stdClass;\r\n        $classname = \"\\\\AppBundle\\\\Entity\\\\User\";\r\n\r\n        $ams = $this->getDoctrine()\r\n            ->getRepository($classname)\r\n            ->findAccountManagers();\r\n\r\n        $accountManagers->values = array();\r\n        foreach ($ams as $am) {\r\n            $temp = new \\StdClass;\r\n            $temp->id = $am->getId();\r\n            $temp->username = $am->getUsername();\r\n            $accountManagers->values[] = $temp;\r\n        }\r\n\r\n        $accountManagers->display_name = \"Accountmgr.\";\r\n\r\n        return $accountManagers;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,null,1,null,null,null,null,null,null,null,null,1,1,null,1,null,null,null,null,null,null,null,null,null,null,2,2,null,2,2,2,2,2,null,null,2,2,null,2,null,null,null,null,null,null,null,null,null,null,1,1,1,null,1,1,1,null,null,1,1,1,1,null,1,null,1,null,null,1,null,null,null,1,1,1,1,null,null,1,null,null,null,null,null,null,null,null,null,1,1,null,1,1,1,null,1,1,1,1,1,1,null,null,1,null,1,null,null]},{"name":"src\/AppBundle\/Controller\/FreelancerController.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 04.09.2016\r\n * Time: 19:49\r\n *\/\r\n\r\nnamespace AppBundle\\Controller;\r\n\r\n\r\nuse AppBundle\\Entity\\Freelancer;\r\nuse AppBundle\\Entity\\QueryHelper;\r\nuse Doctrine\\ORM\\EntityManager;\r\nuse Doctrine\\ORM\\EntityNotFoundException;\r\nuse Doctrine\\ORM\\Mapping\\ClassMetadata;\r\nuse JMS\\Serializer\\DeserializationContext;\r\nuse JMS\\Serializer\\SerializationContext;\r\nuse JMS\\Serializer\\SerializerBuilder;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Method;\r\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\r\nuse Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\r\n\r\n\/**\r\n * Class FreelancerController\r\n * @package AppBundle\\Controller\r\n *\r\n *\/\r\nclass FreelancerController extends Controller\r\n{\r\n\r\n    \/**\r\n     * @return Response\r\n     *\r\n     * @Method(\"POST\")\r\n     * @Route(\"\/freelancer\/searchFreelancers\", name=\"searchFreelancers\")\r\n     *\/\r\n    public function searchFreelancers(Request $request)\r\n    {\r\n        \/\/ Daten aus Request in Objekte \u00fcberf\u00fchren\r\n        $content = $request->getContent();\r\n\r\n        $params = null;\r\n\r\n        if (!empty($content)) {\r\n            $params = json_decode($content, true); \/\/ 2nd param to get as array\r\n        }\r\n\r\n        if (!isset($params['page']))\r\n            $params['page'] = 1;\r\n\r\n        $repository = $this->getDoctrine()->getRepository('AppBundle:Freelancer');\r\n        $flPaginatedResult = $repository->findAllBySearchParams($params, 20, $params['page']);\r\n\r\n        $flSerializableResult = QueryHelper::getSerializableResult($flPaginatedResult);\r\n\r\n        $response = json_encode($flSerializableResult);\r\n\r\n        return new Response($response);\r\n    }\r\n\r\n    \/**\r\n     * @param Request $request\r\n     * @return null\r\n     * @throws EntityNotFoundException\r\n     *\r\n     * @Method(\"GET\")\r\n     * @Route(\"\/freelancer\/{freelancerId}\", name=\"getFreelancerById\")\r\n     *\/\r\n    public function getFreelancerById(Request $request, $freelancerId)\r\n    {\r\n        if (!isset($freelancerId) && !(intval($freelancerId) > 0)) {\r\n            throw new NotFoundHttpException('Freelancer mit der id {$id} wurde nicht gefunden!');\r\n        }\r\n\r\n        $repository = $this->getDoctrine()->getRepository('AppBundle:Freelancer');\r\n        $freelancer = $repository->find(intval($freelancerId));\r\n\r\n        $serializer = SerializerBuilder::create()->build();\r\n        $response = $serializer->serialize(\r\n            $freelancer,\r\n            'json',\r\n            SerializationContext::create()->setGroups(['display'])\r\n        );\r\n        return new Response($response);\r\n    }\r\n\r\n    \/**\r\n     * @param Request $request\r\n     * @return null\r\n     * @throws EntityNotFoundException\r\n     *\r\n     * @Method(\"POST\")\r\n     * @Route(\"\/freelancer\/editFreelancer\", name=\"editFreelancer\")\r\n     *\/\r\n    public function editFreelancer(Request $request)\r\n    {\r\n        \/\/ Daten aus Request in Objekte \u00fcberf\u00fchren\r\n        $content = $request->getContent();\r\n\r\n        $serializer = $this->get('jms_serializer');\r\n        $fl = $serializer->deserialize($content, 'AppBundle\\Entity\\Freelancer', 'json', DeserializationContext::create()->setGroups(array('update')));\r\n\r\n        \/\/ EntityManager laden\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        if ($fl->getId() == null) {\r\n            $fl->setCreatedAt(new \\DateTime());\r\n        }\r\n\r\n        \/\/ --------------------------------------\r\n        \/\/ Test f\u00fcr den Persist-Listener eines Freelancers\r\n        \/\/ --------------------------------------\r\n        $address = $fl->getAddress();\r\n        if ($address->getId() == null) {\r\n            $address->setFreelancer($fl);\r\n            $em->persist($address);\r\n        }\r\n\r\n        \/\/ Neue Preise hinzuf\u00fcgen\r\n        foreach ($fl->getPrices() as $price) {\r\n            if ($price->getId() == null) {\r\n                $price->setFreelancer($fl);\r\n                $em->persist($price);\r\n            }\r\n        }\r\n\r\n        \/\/ Entfernte Preise l\u00f6schen\r\n        if ($fl->getId() != null) {\r\n            $items_old = $this->getDoctrine()->getRepository('\\AppBundle\\Entity\\Freelancer\\FreelancerPrice')->findBy(\r\n                array('freelancer' => $fl),\r\n                array()\r\n            );\r\n            foreach ($items_old as $item_old) {\r\n                $item_exists = false;\r\n                foreach ($fl->getPrices() as $item_new) {\r\n                    $item_exists = ($item_old->getId() == $item_new->getId());\r\n                    if ($item_exists) {\r\n                        break;\r\n                    }\r\n                }\r\n                if (!$item_exists) {\r\n                    $em->remove($item_old);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        \/\/ Test Ende!\r\n\r\n        $em->persist($fl);\r\n        $em->flush();\r\n\r\n        $serializer = SerializerBuilder::create()->build();\r\n        $response = $serializer->serialize($fl, 'json', SerializationContext::create()->setGroups(['display'])->enableMaxDepthChecks());\r\n\r\n        return new Response($response);\r\n    }\r\n\r\n\r\n    \/**\r\n     * @param Request $request\r\n     * @return null\r\n     * @throws EntityNotFoundException\r\n     *\r\n     * @Route(\"\/freelancer\/deleteFreelancer\", name=\"deleteFreelancer\")\r\n     *\/\r\n    public function deleteFreelancer(Request $request)\r\n    {\r\n        \/\/ $entity, $name\r\n        if ($request->getMethod() != 'POST') {\r\n            return null;\r\n        }\r\n\r\n        \/\/ Daten aus Request in Objekte \u00fcberf\u00fchren\r\n        $content = $request->getContent();\r\n\r\n\r\n        \/\/ EntityManager laden\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        if ($content != null) {\r\n            $fl = $em->find('AppBundle\\Entity\\Freelancer', $content);\r\n\r\n            if ($fl != null) {\r\n                $em->remove($fl);\r\n                $em->flush();\r\n            }\r\n        }\r\n\r\n        return new JsonResponse();\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,null,1,0,null,null,1,1,null,1,1,null,1,null,1,null,1,null,null,null,null,null,null,null,null,null,null,null,null,1,0,null,null,1,1,null,1,1,1,1,1,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,1,null,null,1,null,1,1,null,null,null,null,null,1,1,1,1,null,null,null,1,0,0,0,null,null,null,null,1,0,0,0,null,0,0,0,0,0,0,null,null,0,0,null,null,null,null,null,null,null,1,1,null,1,1,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,0,null,null,null,0,null,0,0,null,0,0,0,null,null,null,0,null,null]},{"name":"src\/AppBundle\/Controller\/HomeController.php","source":"<?php\r\n\r\nnamespace AppBundle\\Controller;\r\n\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\n\r\nclass HomeController extends Controller\r\n{\r\n    \/**\r\n     * @Route(\"\/\", name=\"homepage\")\r\n     *\/\r\n    public function indexAction(Request $request)\r\n    {\r\n        return new Response(file_get_contents(\"dist\/index.html\"));\r\n    }\r\n\r\n    \/**\r\n     * @Route(\"\/login\", name=\"login_page\")\r\n     *\/\r\n    public function loginAction(Request $request)\r\n    {\r\n        return new Response(file_get_contents(\"dist\/index.html\"));\r\n    }\r\n\r\n    \/**\r\n     * @Route(\"\/dist\/{req}\", name=\"f5redirect\", requirements={\"req\"=\".*\"})\r\n     *\/\r\n    public function f5redirectAction(Request $request)\r\n    {\r\n        return new Response(file_get_contents(\"dist\/index.html\"));\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,0,null,null]},{"name":"src\/AppBundle\/Controller\/ScriptController.php","source":"<?php\r\n\r\nnamespace AppBundle\\Controller;\r\n\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\n\r\nclass ScriptController extends Controller\r\n{\r\n    \/**\r\n     * @Route(\"\/feedback\", name=\"feedback\")\r\n     *\/\r\n    public function feedbackAction(Request $request)\r\n    {\r\n        return new RedirectResponse('https:\/\/trello.com\/b\/owYPOSaW\/werftnet-10');\r\n    }\r\n\r\n    \/**\r\n     * @Route(\"\/admin\/update\", name=\"update\")\r\n     *\/\r\n    public function updateAction(Request $request)\r\n    {\r\n        $old_path = getcwd();\r\n        chdir('\/home\/werftnet\/');\r\n        $output = shell_exec('bash update_symfony');\r\n        chdir($old_path);\r\n        return new Response(\"<p>Skript update_symfony wurde ausgef\u00fchrt!:<\/p>\" . nl2br($output));\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,0,0,0,0,null]},{"name":"src\/AppBundle\/Controller\/User\/UserController.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 16.07.2016\r\n * Time: 19:32\r\n *\/\r\n\r\nnamespace AppBundle\\Controller\\User;\r\n\r\nuse AppBundle\\AppFlow\\AppError;\r\nuse AppBundle\\AppFlow\\ErrorResponse;\r\nuse JMS\\Serializer\\DeserializationContext;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Method;\r\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\nuse AppBundle\\Entity\\User;\r\nuse JMS\\Serializer\\SerializerBuilder;\r\nuse JMS\\Serializer\\SerializationContext;\r\n\r\n\/**\r\n * Class UserController\r\n * @package AppBundle\\Controller\r\n *\r\n *\/\r\nclass UserController extends Controller\r\n{\r\n\r\n    \/**\r\n     * \u00c4ndern des eigenen Passworts\r\n     *\r\n     * @Method(\"POST\")\r\n     * @Route(\"\/user\/change_pwd\", name=\"change_pwd\")\r\n     *\/\r\n    public function changeUserPwdAction(Request $request)\r\n    {\r\n        $response = new JsonResponse();\r\n        $pwdOld = null;\r\n        $pwdNew = null;\r\n\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        \/\/ Daten aus Request in Objekte \u00fcberf\u00fchren\r\n        $content = $request->getContent();\r\n\r\n        $params = null;\r\n\r\n        if (!empty($content)) {\r\n            $params = json_decode($content, true); \/\/ 2nd param to get as array\r\n        }\r\n\r\n        if (!isset($params['pwd_old'])) {\r\n            $response->setStatusCode(422);\r\n            $response->setContent('Altes Passwort fehlr!');\r\n            return $response;\r\n        } else {\r\n            $pwdOld = $params['pwd_old'];\r\n        }\r\n\r\n        if (!isset($params['pwd_new'])) {\r\n            $response->setStatusCode(422);\r\n            $response->setContent('Neues Passwort fehlr!');\r\n            return $response;\r\n        } else {\r\n            $pwdNew = $params['pwd_new'];\r\n            if(strlen($pwdNew) < 4) {\r\n                $response->setStatusCode(422);\r\n                $response->setContent('Neues Passwort muss mindestens 4 Zeichen haben!');\r\n                return $response;\r\n            }\r\n        }\r\n\r\n        $user = $this->getUser();\r\n        $factory = $this->get('security.encoder_factory');\r\n        $encoder = $factory->getEncoder($user);\r\n\r\n        if (!$encoder->isPasswordValid($user->getPassword(), $pwdOld, $user->getSalt())) {\r\n            $response->setStatusCode(422);\r\n            $response->setContent('Altes Passwort nicht korrekt!');\r\n            return $response;\r\n        }\r\n\r\n        $encoded = $encoder->encodePassword($pwdNew, $user->getSalt());\r\n        $user->setPassword($encoded);\r\n\r\n        $em->persist($user);\r\n        $em->flush();\r\n\r\n        return new JsonResponse($user);\r\n    }\r\n\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,null,null,0,null,0,null,0,0,0,null,0,0,0,0,0,0,0,null,0,0,0,0,0,0,0,0,0,0,0,0,null,0,0,0,null,0,0,0,0,0,null,0,0,null,0,0,null,0,0,null,null]},{"name":"src\/AppBundle\/DataFixtures\/ORM\/LoadDefaultData.php","source":"<?php\r\n\r\nnamespace AppBundle\\DataFixtures\\ORM;\r\n\r\nuse AppBundle\\Entity\\Common\\Anrede;\r\nuse AppBundle\\Entity\\Common\\CatTool;\r\nuse AppBundle\\Entity\\Common\\Country;\r\nuse AppBundle\\Entity\\Common\\Currency;\r\nuse AppBundle\\Entity\\Common\\Language;\r\nuse AppBundle\\Entity\\Common\\PriceUnit;\r\nuse AppBundle\\Entity\\Common\\Sector;\r\nuse AppBundle\\Entity\\Common\\SectorSub;\r\nuse AppBundle\\Entity\\Common\\Service;\r\nuse AppBundle\\Entity\\Common\\YesNoInProgress;\r\nuse AppBundle\\Entity\\Customer\\CustomerOrigin;\r\nuse AppBundle\\Entity\\Customer\\CustomerPotential;\r\nuse AppBundle\\Entity\\Customer\\CustomerStatus;\r\nuse AppBundle\\Entity\\User;\r\nuse AppBundle\\Entity\\User\\UserRole;\r\nuse AppBundle\\Entity\\Freelancer\\FreelancerPaymentType;\r\nuse AppBundle\\Entity\\Freelancer\\FreelancerInvoicingType;\r\nuse AppBundle\\Entity\\Freelancer\\FreelancerRating;\r\nuse AppBundle\\Entity\\Freelancer\\FreelancerStatus;\r\nuse Doctrine\\Common\\DataFixtures\\FixtureInterface;\r\nuse Doctrine\\Common\\Persistence\\ObjectManager;\r\nuse Symfony\\Component\\DependencyInjection\\ContainerInterface;\r\nuse Symfony\\Component\\DependencyInjection\\ContainerAwareInterface;\r\n\r\nclass LoadDefaultData implements FixtureInterface, ContainerAwareInterface\r\n{\r\n\r\n    private $container;\r\n\r\n    public function setContainer(ContainerInterface $container = null)\r\n    {\r\n        $this->container = $container;\r\n    }\r\n\r\n    public function load(ObjectManager $manager)\r\n    {\r\n\r\n        \/\/ USER\r\n        \/\/ StandardRollen\r\n        $roleUser = new UserRole();\r\n        $roleUser->setId(1);\r\n        $roleUser->setName(\"ROLE_USER\");\r\n        $manager->persist($roleUser);\r\n\r\n        $roleAdmin = new UserRole();\r\n        $roleAdmin->setId(2);\r\n        $roleAdmin->setName(\"ROLE_ADMIN\");\r\n        $manager->persist($roleAdmin);\r\n\r\n        $roleAM = new UserRole();\r\n        $roleAM->setId(2);\r\n        $roleAM->setName(\"ROLE_ACCOUNT_MANAGER\");\r\n        $manager->persist($roleAM);\r\n\r\n        \/\/ -----------------------------------\r\n        \/\/ COMMON\r\n        \/\/ -----------------------------------\r\n\r\n        \/\/ Anrede\r\n        $anrede = array(\r\n            \"Herr\",\r\n            \"Frau\",\r\n            \"Firma\",\r\n        );\r\n\r\n        for ($i = 1; $i <= count($anrede); $i++) {\r\n            $element = new Anrede();\r\n            $element->setId($i);\r\n            $element->setName($anrede[$i - 1]);\r\n            $manager->persist($element);\r\n        }\r\n\r\n\r\n        \/\/ CAT-Tool\r\n        $cat = array(\r\n            \"Trados\",\r\n            \"MemoQ\",\r\n            \"Across\",\r\n            \"WordFast\",\r\n        );\r\n\r\n        for ($i = 1; $i <= count($cat); $i++) {\r\n            $element = new CatTool();\r\n            $element->setId($i);\r\n            $element->setName($cat[$i - 1]);\r\n            $manager->persist($element);\r\n        }\r\n\r\n        \/\/ Country\r\n\r\n        $country = array(\r\n            \"Deutschland\",\r\n            \"\u00d6sterreich\",\r\n            \"Schweiz\"\r\n        );\r\n\r\n        for ($i = 1; $i <= count($country); $i++) {\r\n            $element = new Country();\r\n            $element->setId($i);\r\n            $element->setName($country[$i - 1]);\r\n            $manager->persist($element);\r\n        }\r\n\r\n\r\n        \/\/ Language + 2 Subsprachen\r\n\r\n        $language = new Language();\r\n        $language->setName(\"Englisch\");\r\n\r\n        $lang1 = new Language();\r\n        $lang1->setName(\"UK\");\r\n        $lang1->setMainItem($language);\r\n\r\n        $lang2 = new Language();\r\n        $lang2->setName(\"US\");\r\n        $lang2->setMainItem($language);\r\n\r\n        $manager->persist($language);\r\n        $manager->persist($lang1);\r\n        $manager->persist($lang2);\r\n\r\n\r\n        \/\/ Preiseinheiten\r\n        $priceUnits = array(\r\n            \"Quellwort\",\r\n            \"Zielwort\",\r\n            \"NZ\",\r\n            \"Stunde\",\r\n            \"Minute\",\r\n            \"Seite\",\r\n        );\r\n\r\n\r\n        for ($i = 1; $i <= count($priceUnits); $i++) {\r\n            $element = new PriceUnit();\r\n            $element->setId($i);\r\n            $element->setName($priceUnits[$i - 1]);\r\n            $manager->persist($element);\r\n        }\r\n\r\n        \/\/ Sector\/Fachgebiet\r\n\r\n        \/\/ Sector 1\r\n\r\n        $sector = new Sector();\r\n        $sector->setName(\"Technik\");\r\n\r\n        $subSector1 = new Sector();\r\n        $subSector1->setName(\"Maschinenbau\");\r\n        $subSector1->setMainItem($sector);\r\n\r\n        $subSector2 = new Sector();\r\n        $subSector2->setName(\"Elektortechnik\");\r\n        $subSector2->setMainItem($sector);\r\n\r\n        $subSector3 = new Sector();\r\n        $subSector3->setName(\"Werkstoffkunde\");\r\n        $subSector3->setMainItem($sector);\r\n\r\n        $manager->persist($sector);\r\n        $manager->persist($subSector1);\r\n        $manager->persist($subSector2);\r\n        $manager->persist($subSector3);\r\n\r\n\r\n        \/\/ Sector 2\r\n\r\n        $sector = new Sector();\r\n        $sector->setName(\"Finanzen\");\r\n\r\n        $subSector1 = new Sector();\r\n        $subSector1->setName(\"Bank\");\r\n        $subSector1->setMainItem($sector);\r\n\r\n        $subSector2 = new Sector();\r\n        $subSector2->setName(\"B\u00f6rse\");\r\n        $subSector2->setMainItem($sector);\r\n\r\n        $subSector3 = new Sector();\r\n        $subSector3->setName(\"Buchhaltung\");\r\n        $subSector3->setMainItem($sector);\r\n\r\n        $manager->persist($sector);\r\n        $manager->persist($subSector1);\r\n        $manager->persist($subSector2);\r\n        $manager->persist($subSector3);\r\n\r\n\r\n        \/\/ Service\/Dienstleistungen\r\n        $service = array(\r\n            \"Lektorat\",\r\n            \"Korrektorat\",\r\n            \"\u00dcbersetzung\",\r\n            \"DTP\",\r\n            \"Dolmetschen\",\r\n        );\r\n\r\n\r\n        for ($i = 1; $i <= count($service); $i++) {\r\n            $element = new Service();\r\n            $element->setId($i);\r\n            $element->setName($service[$i - 1]);\r\n            $manager->persist($element);\r\n        }\r\n\r\n\r\n        \/\/ W\u00e4hrungen\r\n        $currencies = array(\r\n            \"EUR\",\r\n            \"USD\",\r\n        );\r\n\r\n\r\n        for ($i = 1; $i <= count($currencies); $i++) {\r\n            $element = new Currency();\r\n            $element->setId($i);\r\n            $element->setName($currencies[$i - 1]);\r\n            $manager->persist($element);\r\n        }\r\n\r\n        \/\/ YesNoInProgress\r\n        $yesNoInProgress = array(\r\n            \"Ja\",\r\n            \"Nein\",\r\n            \"In Bearbeitung\",\r\n        );\r\n\r\n        for ($i = 1; $i <= count($yesNoInProgress); $i++) {\r\n            $element = new YesNoInProgress();\r\n            $element->setId($i);\r\n            $element->setName($yesNoInProgress[$i - 1]);\r\n            $manager->persist($element);\r\n        }\r\n\r\n        \/\/ FREELANCER\r\n        \/\/ Freelancer Bezahlart\r\n        $paymentType = array(\r\n            \"\u00dcberweisung\",\r\n            \"PayPal\"\r\n        );\r\n\r\n        for ($i = 1; $i <= count($paymentType); $i++) {\r\n            $element = new FreelancerPaymentType();\r\n            $element->setId($i);\r\n            $element->setName($paymentType[$i - 1]);\r\n            $manager->persist($element);\r\n        }\r\n\r\n        \/\/ Freelancer Rechnungsart\r\n        $invoicingType = array(\r\n            \"Rechnung\",\r\n            \"Gutschrift\"\r\n        );\r\n\r\n        for ($i = 1; $i <= count($invoicingType); $i++) {\r\n            $element = new FreelancerInvoicingType();\r\n            $element->setId($i);\r\n            $element->setName($invoicingType[$i - 1]);\r\n            $manager->persist($element);\r\n        }\r\n\r\n\r\n        \/\/ Rating Freelancer\r\n        $freelancerRating = array(\r\n            \"A (sehr gut)\",\r\n            \"B (in Ordnung)\",\r\n            \"C (nur als Ausnahme)\",\r\n        );\r\n\r\n        for ($i = 1; $i <= count($freelancerRating); $i++) {\r\n            $element = new FreelancerRating();\r\n            $element->setId($i);\r\n            $element->setName($freelancerRating[$i - 1]);\r\n            $manager->persist($element);\r\n        }\r\n\r\n\r\n        \/\/ Freelancer Status\r\n        $freelancerStatus = array(\r\n            \"Lieferant\",\r\n            \"Kandidat\",\r\n            \"Bewerber\",\r\n            \"Kein Interesse\",\r\n        );\r\n\r\n        for ($i = 1; $i <= count($freelancerStatus); $i++) {\r\n            $status = new FreelancerStatus();\r\n            $status->setId($i);\r\n            $status->setName($freelancerStatus[$i - 1]);\r\n            $manager->persist($status);\r\n        }\r\n\r\n        \/\/ KUNDEN\r\n\r\n        \/\/ Customer Origin\r\n        $customerOrigin = array(\r\n            \"Akquise\",\r\n            \"Empfehlung\",\r\n            \"Website\",\r\n            \"Quahill\"\r\n        );\r\n\r\n        for ($i = 1; $i <= count($customerOrigin); $i++) {\r\n            $origin = new CustomerOrigin();\r\n            $origin->setId($i);\r\n            $origin->setName($customerOrigin[$i - 1]);\r\n            $manager->persist($origin);\r\n        }\r\n\r\n\r\n        \/\/ Customer Potential\r\n        $customerPotential = array(\r\n            \"A (Betrag A)\",\r\n            \"B (Betrag B)\",\r\n            \"C (Betrag C)\",\r\n            \"D (Betrag D)\",\r\n        );\r\n\r\n        for ($i = 1; $i <= count($customerPotential); $i++) {\r\n            $potential = new CustomerPotential();\r\n            $potential->setId($i);\r\n            $potential->setName($customerPotential[$i - 1]);\r\n            $manager->persist($potential);\r\n        }\r\n\r\n\r\n        \/\/ Customer Status\r\n        $customerStatus = array(\r\n            \"Aktiver Kunde\",\r\n            \"M\u00f6glicher Kunde\",\r\n            \"Kein Interesse\",\r\n            \"Verlorener Kunde\",\r\n        );\r\n\r\n        for ($i = 1; $i <= count($customerStatus); $i++) {\r\n            $status = new CustomerStatus();\r\n            $status->setId($i);\r\n            $status->setName($customerStatus[$i - 1]);\r\n            $manager->persist($status);\r\n        }\r\n        \r\n        $manager->flush();\r\n\r\n        \/\/ Testuser f\u00fcr den anf\u00e4nglichen Admin anlegen\r\n        $user = new User();\r\n        $user->setUsername('admin');\r\n        $user->setEmail('admin@some.domain.com');\r\n\r\n        $plainPassword = 'admin';\r\n        $encoder = $this->container->get('security.password_encoder');\r\n        $encoded = $encoder->encodePassword($user, $plainPassword);\r\n        $user->setPassword($encoded);\r\n        $user->addRole($roleAdmin);\r\n\r\n        $manager->persist($user);\r\n        $manager->flush();\r\n\r\n\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,0,0,0,null,0,0,0,0,null,0,0,0,0,null,null,null,null,null,null,null,0,null,null,null,null,0,0,0,0,0,null,null,null,null,null,0,null,null,null,null,null,0,0,0,0,0,null,null,null,null,null,0,null,null,null,null,0,0,0,0,0,null,null,null,null,null,0,0,null,0,0,0,null,0,0,0,null,0,0,0,null,null,null,null,0,null,null,null,null,null,null,null,null,0,0,0,0,0,null,null,null,null,null,null,0,0,null,0,0,0,null,0,0,0,null,0,0,0,null,0,0,0,0,null,null,null,null,0,0,null,0,0,0,null,0,0,0,null,0,0,0,null,0,0,0,0,null,null,null,null,0,null,null,null,null,null,null,null,0,0,0,0,0,null,null,null,null,null,0,null,null,null,null,0,0,0,0,0,null,null,null,null,0,null,null,null,null,0,0,0,0,0,null,null,null,null,null,0,null,null,null,0,0,0,0,0,null,null,null,null,0,null,null,null,0,0,0,0,0,null,null,null,null,null,0,null,null,null,null,0,0,0,0,0,null,null,null,null,null,0,null,null,null,null,null,0,0,0,0,0,null,null,null,null,null,null,0,null,null,null,null,null,0,0,0,0,0,null,null,null,null,null,0,null,null,null,null,null,0,0,0,0,0,null,null,null,null,null,0,null,null,null,null,null,0,0,0,0,0,null,null,0,null,null,0,0,0,null,0,0,0,0,0,null,0,0,null,null,0,null]},{"name":"src\/AppBundle\/Entity\/Common\/Address.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 10.07.2016\r\n * Time: 22:13\r\n *\/\r\n\r\nnamespace AppBundle\\Entity\\Common;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\n\/**\r\n * Class Address\r\n * @package AppBundle\\Entity\\Common\r\n *\r\n *\/\r\nabstract class Address\r\n{\r\n    \/**\r\n     * @ORM\\Column(type=\"integer\")\r\n     * @ORM\\Id\r\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\r\n     * @JMS\\Type(\"integer\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    protected $id;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    protected $street;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    protected $street2;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    protected $zipcode;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    protected $city;\r\n\r\n    \/**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Common\\Country\")\r\n     * @ORM\\JoinColumn(name=\"country_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Common\\Country\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    protected $country;\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"src\/AppBundle\/Entity\/Common\/Anrede.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 29.07.2016\r\n * Time: 19:33\r\n *\/\r\n\r\nnamespace AppBundle\\Entity\\Common;\r\n\r\n\r\nuse AppBundle\\Entity\\SimpleEntity;\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\n\r\n\/**\r\n * Class Freelancer\r\n * @package AppBundle\\Entity\\Common\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"Anrede\")\r\n *\/\r\nclass Anrede extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"Anrede\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src\/AppBundle\/Entity\/Common\/CatTool.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 16.07.2016\r\n * Time: 11:08\r\n *\/\r\n\r\nnamespace AppBundle\\Entity\\Common;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\n\r\n\/**\r\n * Class Freelancer\r\n * @package AppBundle\\Entity\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"CatTool\")\r\n *\/\r\nclass CatTool extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"CAT-Tool\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src\/AppBundle\/Entity\/Common\/Company.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 13.09.2016\r\n * Time: 21:05\r\n *\/\r\n\r\nnamespace AppBundle\\Entity\\Common;\r\n\r\n\r\nclass Company extends Contact\r\n{\r\n\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"src\/AppBundle\/Entity\/Common\/Contact.php","source":"<?php\r\n\/**\r\nKlasse beschreibt ein Freelancer-Objekt\r\n *\/\r\n\r\nnamespace AppBundle\\Entity\\Common;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\Common\\Anrede;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\n\/**\r\n * Class Contact\r\n * @package AppBundle\\Entity\\Common\r\n *\r\n *\r\n *\/\r\nabstract class Contact\r\n{\r\n    \/**\r\n     * @ORM\\Column(type=\"integer\")\r\n     * @ORM\\Id\r\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\r\n     * @JMS\\Type(\"integer\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    protected $id;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"string\")\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    protected $name1;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    protected $name2;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    protected $phone;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    protected $phone2;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    protected $email;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    protected $email2;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    protected $fax;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    protected $skype;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"text\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    protected $comment;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"datetime\")\r\n     * @JMS\\Type(\"DateTime\")\r\n     * @JMS\\Groups({\"display\"})\r\n     *\/\r\n    protected $createdAt;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"datetime\")\r\n     * @JMS\\Type(\"DateTime\")\r\n     *\/\r\n    \/\/ protected $createdBy; \/\/ User\r\n\r\n    \/**\r\n     * Get id\r\n     *\r\n     * @return integer\r\n     *\/\r\n    public function getId()\r\n    {\r\n        return $this->id;\r\n    }\r\n\r\n\r\n    \/**\r\n     * Set name1\r\n     *\r\n     * @param string $name1\r\n     *\r\n     * @return mixed\r\n     *\/\r\n    public function setName1($name1)\r\n    {\r\n        $this->name1 = $name1;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get name1\r\n     *\r\n     * @return string\r\n     *\/\r\n    public function getName1()\r\n    {\r\n        return $this->name1;\r\n    }\r\n\r\n\r\n    \/**\r\n     * Set name2\r\n     *\r\n     * @param string $name2\r\n     *\r\n     * @return mixed\r\n     *\/\r\n    public function setName2($name2)\r\n    {\r\n        $this->name2 = $name2;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get name2\r\n     *\r\n     * @return string\r\n     *\/\r\n    public function getName2()\r\n    {\r\n        return $this->name2;\r\n    }\r\n\r\n    \/**\r\n     * Set phone\r\n     *\r\n     * @param string $phone\r\n     *\r\n     * @return mixed\r\n     *\/\r\n    public function setPhone($phone)\r\n    {\r\n        $this->phone = $phone;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get phone\r\n     *\r\n     * @return string\r\n     *\/\r\n    public function getPhone()\r\n    {\r\n        return $this->phone;\r\n    }\r\n\r\n    \/**\r\n     * Set phone2\r\n     *\r\n     * @param string $phone2\r\n     *\r\n     * @return mixed\r\n     *\/\r\n    public function setPhone2($phone2)\r\n    {\r\n        $this->phone2 = $phone2;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get phone2\r\n     *\r\n     * @return string\r\n     *\/\r\n    public function getPhone2()\r\n    {\r\n        return $this->phone2;\r\n    }\r\n\r\n    \/**\r\n     * Set email\r\n     *\r\n     * @param string $email\r\n     *\r\n     * @return mixed\r\n     *\/\r\n    public function setEmail($email)\r\n    {\r\n        $this->email = $email;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get email\r\n     *\r\n     * @return string\r\n     *\/\r\n    public function getEmail()\r\n    {\r\n        return $this->email;\r\n    }\r\n\r\n    \/**\r\n     * Set email2\r\n     *\r\n     * @param string $email2\r\n     *\r\n     * @return mixed\r\n     *\/\r\n    public function setEmail2($email2)\r\n    {\r\n        $this->email2 = $email2;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get email2\r\n     *\r\n     * @return string\r\n     *\/\r\n    public function getEmail2()\r\n    {\r\n        return $this->email2;\r\n    }\r\n\r\n    \/**\r\n     * Set fax\r\n     *\r\n     * @param string $fax\r\n     *\r\n     * @return mixed\r\n     *\/\r\n    public function setFax($fax)\r\n    {\r\n        $this->fax = $fax;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get fax\r\n     *\r\n     * @return string\r\n     *\/\r\n    public function getFax()\r\n    {\r\n        return $this->fax;\r\n    }\r\n\r\n    \/**\r\n     * Set skype\r\n     *\r\n     * @param string $skype\r\n     *\r\n     * @return mixed\r\n     *\/\r\n    public function setSkype($skype)\r\n    {\r\n        $this->skype = $skype;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get skype\r\n     *\r\n     * @return string\r\n     *\/\r\n    public function getSkype()\r\n    {\r\n        return $this->skype;\r\n    }\r\n\r\n    \/**\r\n     * Set comment\r\n     *\r\n     * @param string $comment\r\n     *\r\n     * @return mixed\r\n     *\/\r\n    public function setComment($comment)\r\n    {\r\n        $this->comment = $comment;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get comment\r\n     *\r\n     * @return string\r\n     *\/\r\n    public function getComment()\r\n    {\r\n        return $this->comment;\r\n    }\r\n\r\n    \/**\r\n     * Set createdAt\r\n     *\r\n     * @param \\DateTime $createdAt\r\n     *\r\n     * @return mixed\r\n     *\/\r\n    public function setCreatedAt($createdAt)\r\n    {\r\n        $this->createdAt = $createdAt;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get createdAt\r\n     *\r\n     * @return \\DateTime\r\n     *\/\r\n    public function getCreatedAt()\r\n    {\r\n        return $this->createdAt;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,1,null,1,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"src\/AppBundle\/Entity\/Common\/Country.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 17.07.2016\r\n * Time: 18:45\r\n *\/\r\n\r\nnamespace AppBundle\\Entity\\Common;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\n\r\n\/**\r\n * Class Freelancer\r\n * @package AppBundle\\Entity\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"Country\")\r\n *\r\n *\/\r\nclass Country extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"Land\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src\/AppBundle\/Entity\/Common\/Currency.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 17.07.2016\r\n * Time: 18:45\r\n *\/\r\n\r\nnamespace AppBundle\\Entity\\Common;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\n\r\n\/**\r\n * Class Freelancer\r\n * @package AppBundle\\Entity\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"Currency\")\r\n *\r\n *\/\r\nclass Currency extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"W\u00e4hrung\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src\/AppBundle\/Entity\/Common\/Language.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 16.07.2016\r\n * Time: 11:04\r\n *\/\r\n\r\nnamespace AppBundle\\Entity\\Common;\r\n\r\nuse Doctrine\\Common\\Collections\\ArrayCollection;\r\nuse AppBundle\\Entity\\TwoLevelEntity;\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\n\/**\r\n * Class Language\r\n * @package AppBundle\\Entity\\Common\r\n *\r\n * @ORM\\Entity(repositoryClass=\"AppBundle\\Entity\\TwoLevelEntityRepository\")\r\n * @ORM\\Table(name=\"Language\")\r\n *\/\r\nclass Language extends TwoLevelEntity\r\n{\r\n    \/**\r\n     * Redeclaration of property to set relation\r\n     *\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Common\\Language\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Common\\Language\")\r\n     * @JMS\\Groups({\"display\"})\r\n     *\/\r\n    protected $mainItem;\r\n\r\n    public function __construct()\r\n    {\r\n        \/\/ Call parent constructor to initialize class\r\n        parent::__construct();\r\n    }\r\n\r\n    public function getDisplayName()\r\n    {\r\n        return \"Sprache\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,null,null,null,1,null,null]},{"name":"src\/AppBundle\/Entity\/Common\/Person.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 13.09.2016\r\n * Time: 21:04\r\n *\/\r\n\r\nnamespace AppBundle\\Entity\\Common;\r\n\r\nuse AppBundle\\Entity\\Common\\Anrede;\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\nuse Symfony\\Component\\Validator\\Constraints\\DateTime;\r\n\r\nabstract class Person extends Contact\r\n{\r\n    \/**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Common\\Anrede\")\r\n     * @ORM\\JoinColumn(name=\"anrede_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Common\\Anrede\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    protected $anrede;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"datetime\", nullable=true)\r\n     * @JMS\\Type(\"DateTime<'Y-m-d'>\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    protected $dateOfBirth;\r\n\r\n\r\n    \/**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Common\\Language\")\r\n     * @ORM\\JoinColumn(name=\"correspond_language_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Common\\Language\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    protected $correspondLanguage;\r\n\r\n    \/**\r\n     * Set anrede\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\Anrede $anrede\r\n     *\r\n     * @return mixed\r\n     *\/\r\n    public function setAnrede(Anrede $anrede = null)\r\n    {\r\n        $this->anrede = $anrede;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get anrede\r\n     *\r\n     * @return \\AppBundle\\Entity\\Common\\Anrede\r\n     *\/\r\n    public function getAnrede()\r\n    {\r\n        return $this->anrede;\r\n    }\r\n    \r\n    \/**\r\n     * Set dateOfBirth\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\Anrede $dateOfBirth\r\n     *\r\n     * @return mixed\r\n     *\/\r\n    public function setDateOfBirth(DateTime $dateOfBirth = null)\r\n    {\r\n        $this->dateOfBirth = $dateOfBirth;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get dateOfBirth\r\n     *\r\n     * @return \\AppBundle\\Entity\\Common\\Anrede\r\n     *\/\r\n    public function getDateOfBirth()\r\n    {\r\n        return $this->dateOfBirth;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"src\/AppBundle\/Entity\/Common\/PriceUnit.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 17.07.2016\r\n * Time: 18:33\r\n *\/\r\n\r\nnamespace AppBundle\\Entity\\Common;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\n\r\n\/**\r\n * Class Freelancer\r\n * @package AppBundle\\Entity\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"PriceUnit\")\r\n *\/\r\nclass PriceUnit extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"Preiseinheit\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src\/AppBundle\/Entity\/Common\/Sector.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 16.07.2016\r\n * Time: 11:04\r\n *\/\r\n\r\nnamespace AppBundle\\Entity\\Common;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse Doctrine\\Common\\Collections\\ArrayCollection;\r\nuse AppBundle\\Entity\\TwoLevelEntity;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\n\/**\r\n * Class Sector\r\n * @package AppBundle\\Entity\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Entity(repositoryClass=\"AppBundle\\Entity\\TwoLevelEntityRepository\")\r\n * @ORM\\Table(name=\"Sector\")\r\n *\/\r\nclass Sector extends TwoLevelEntity implements \\JsonSerializable\r\n{\r\n    \/**\r\n     * Redeclaration of property to set relation\r\n     *\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Common\\Sector\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Common\\Sector\")\r\n     * @JMS\\Groups({\"display\"})\r\n     *\/\r\n    protected $mainItem;\r\n\r\n    public function __construct()\r\n    {\r\n        \/\/ Call parent constructor to initialize class\r\n        parent::__construct();\r\n    }\r\n\r\n    public function getDisplayName()\r\n    {\r\n        return \"Fachgebiet\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,null,null,null,1,null,null]},{"name":"src\/AppBundle\/Entity\/Common\/Service.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 17.07.2016\r\n * Time: 20:24\r\n *\/\r\n\r\nnamespace AppBundle\\Entity\\Common;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\n\r\n\/**\r\n * Class Service\r\n * @package AppBundle\\Entity\\Common\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"Service\")\r\n *\/\r\nclass Service extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"Dienstleistung\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src\/AppBundle\/Entity\/Common\/YesNoInProgress.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 17.07.2016\r\n * Time: 22:50\r\n *\/\r\n\r\nnamespace AppBundle\\Entity\\Common;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\n\r\n\/**\r\n * Class YesNoInProgress\r\n * @package AppBundle\\Entity\\Common\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"YesNoInProgress\")\r\n *\/\r\nclass YesNoInProgress extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"Ja\/Nein\/In Bearbeitung\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src\/AppBundle\/Entity\/Customer.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 10.09.2016\r\n * Time: 18:44\r\n *\/\r\n\r\nnamespace AppBundle\\Entity;\r\n\r\nuse AppBundle\\Entity\\Common\\Contact;\r\nuse Doctrine\\Common\\Collections\\ArrayCollection;\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\n\/**\r\n * Class Customer\r\n * @package AppBundle\\Entity\r\n *\r\n * @ORM\\Entity(repositoryClass=\"AppBundle\\Entity\\CustomerRepository\")\r\n * @ORM\\Table(name=\"Customer\")\r\n *\/\r\nclass Customer extends Contact\r\n{\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $customerNo;\r\n\r\n    \/**\r\n     * @ORM\\OneToOne(targetEntity=\"AppBundle\\Entity\\Customer\\CustomerAddress\", inversedBy=\"customer\", cascade={\"all\"})\r\n     * @ORM\\JoinColumn(name=\"customeraddress_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Customer\\CustomerAddress\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $address;\r\n\r\n    \/**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Customer\\CustomerOrigin\")\r\n     * @ORM\\JoinColumn(name=\"customer_origin_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Customer\\CustomerOrigin\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $origin;\r\n\r\n    \/**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Customer\\CustomerPotential\")\r\n     * @ORM\\JoinColumn(name=\"customer_potential_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Customer\\CustomerPotential\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $potential;\r\n\r\n    \/**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\User\")\r\n     * @ORM\\JoinColumn(name=\"account_manager_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\User\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $accountManager;\r\n\r\n    \/**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Customer\\CustomerStatus\")\r\n     * @ORM\\JoinColumn(name=\"customer_status_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Customer\\CustomerStatus\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $status;\r\n\r\n    \/**\r\n     * Bedingungen zur Rechnungsstellung\r\n     *\r\n     * @ORM\\Column(type=\"text\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    protected $invoicingDetails;\r\n\r\n    \/\/ ToDo: $accountManager Kundenberater --> Eigenes Feld aus Datanbank oder Benutzer\r\n\r\n    \/**\r\n     * @ORM\\OneToMany(targetEntity=\"AppBundle\\Entity\\Customer\\CustomerContact\", mappedBy=\"customer\", cascade={\"all\"})\r\n     * @JMS\\Type(\"ArrayCollection<AppBundle\\Entity\\Customer\\CustomerContact>\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $contacts;\r\n\r\n    public function __construct() {\r\n        $this->contacts = new ArrayCollection();\r\n    }\r\n\r\n    \/**\r\n     * Get id\r\n     *\r\n     * @return integer\r\n     *\/\r\n    public function getId()\r\n    {\r\n        return $this->id;\r\n    }\r\n\r\n    \/**\r\n     * Set customerNo\r\n     *\r\n     * @param string $customerNo\r\n     *\r\n     * @return Customer\r\n     *\/\r\n    public function setCustomerNo($customerNo)\r\n    {\r\n        $this->customerNo = $customerNo;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get customerNo\r\n     *\r\n     * @return string\r\n     *\/\r\n    public function getCustomerNo()\r\n    {\r\n        return $this->customerNo;\r\n    }\r\n    \r\n\r\n    \/**\r\n     * Set invoicingDetails\r\n     *\r\n     * @param string $invoicingDetails\r\n     *\r\n     * @return Customer\r\n     *\/\r\n    public function setInvoicingDetails($invoicingDetails)\r\n    {\r\n        $this->invoicingDetails = $invoicingDetails;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get invoicingDetails\r\n     *\r\n     * @return string\r\n     *\/\r\n    public function getInvoicingDetails()\r\n    {\r\n        return $this->invoicingDetails;\r\n    }\r\n\r\n\r\n    \/**\r\n     * Set address\r\n     *\r\n     * @param \\AppBundle\\Entity\\Customer\\CustomerAddress $address\r\n     *\r\n     * @return Customer\r\n     *\/\r\n    public function setAddress(\\AppBundle\\Entity\\Customer\\CustomerAddress $address = null)\r\n    {\r\n        $this->address = $address;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get address\r\n     *\r\n     * @return \\AppBundle\\Entity\\Customer\\CustomerAddress\r\n     *\/\r\n    public function getAddress()\r\n    {\r\n        return $this->address;\r\n    }\r\n\r\n    \/**\r\n     * Set origin\r\n     *\r\n     * @param \\AppBundle\\Entity\\Customer\\CustomerOrigin $origin\r\n     *\r\n     * @return Customer\r\n     *\/\r\n    public function setOrigin(\\AppBundle\\Entity\\Customer\\CustomerOrigin $origin = null)\r\n    {\r\n        $this->origin = $origin;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get origin\r\n     *\r\n     * @return \\AppBundle\\Entity\\Customer\\CustomerOrigin\r\n     *\/\r\n    public function getOrigin()\r\n    {\r\n        return $this->origin;\r\n    }\r\n\r\n    \/**\r\n     * Set potential\r\n     *\r\n     * @param \\AppBundle\\Entity\\Customer\\CustomerPotential $potential\r\n     *\r\n     * @return Customer\r\n     *\/\r\n    public function setPotential(\\AppBundle\\Entity\\Customer\\CustomerPotential $potential = null)\r\n    {\r\n        $this->potential = $potential;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get accountManager\r\n     *\r\n     * @return \\AppBundle\\Entity\\User\r\n     *\/\r\n    public function getAccountManager()\r\n    {\r\n        return $this->accountManager;\r\n    }\r\n\r\n    \/**\r\n     * Set accountManager\r\n     *\r\n     * @param \\AppBundle\\Entity\\User $accountManager\r\n     *\r\n     * @return Customer\r\n     *\/\r\n    public function setAccountManager(\\AppBundle\\Entity\\User $accountManager = null)\r\n    {\r\n        $this->accountManager = $accountManager;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get potential\r\n     *\r\n     * @return \\AppBundle\\Entity\\Customer\\CustomerPotential\r\n     *\/\r\n    public function getPotential()\r\n    {\r\n        return $this->potential;\r\n    }\r\n\r\n    \/**\r\n     * Set status\r\n     *\r\n     * @param \\AppBundle\\Entity\\Customer\\CustomerStatus $status\r\n     *\r\n     * @return Customer\r\n     *\/\r\n    public function setStatus(\\AppBundle\\Entity\\Customer\\CustomerStatus $status = null)\r\n    {\r\n        $this->status = $status;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get status\r\n     *\r\n     * @return \\AppBundle\\Entity\\Customer\\CustomerStatus\r\n     *\/\r\n    public function getStatus()\r\n    {\r\n        return $this->status;\r\n    }\r\n\r\n    \/**\r\n     * Add contact\r\n     *\r\n     * @param \\AppBundle\\Entity\\Customer\\CustomerContact $contact\r\n     *\r\n     * @return Customer\r\n     *\/\r\n    public function addContact(\\AppBundle\\Entity\\Customer\\CustomerContact $contact)\r\n    {\r\n        $contact->setCustomer($this);\r\n        $this->contacts[] = $contact;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Remove contact\r\n     *\r\n     * @param \\AppBundle\\Entity\\Customer\\CustomerContact $contact\r\n     *\/\r\n    public function removeContact(\\AppBundle\\Entity\\Customer\\CustomerContact $contact)\r\n    {\r\n        $this->contacts->removeElement($contact);\r\n    }\r\n\r\n    \/**\r\n     * Get contacts\r\n     *\r\n     * @return \\Doctrine\\Common\\Collections\\Collection\r\n     *\/\r\n    public function getContacts()\r\n    {\r\n        return $this->contacts;\r\n    }\r\n\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,null,null,0,null,null,null]},{"name":"src\/AppBundle\/Entity\/Customer\/CustomerAddress.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 17.07.2016\r\n * Time: 19:17\r\n *\/\r\n\r\nnamespace AppBundle\\Entity\\Customer;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\Common\\Address;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\n\/**\r\n * Class Address\r\n * @package AppBundle\\Entity\\Customer\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"CustomerAddress\")\r\n *\/\r\nclass CustomerAddress extends Address\r\n{\r\n    \/**\r\n     * @ORM\\OneToOne(targetEntity=\"AppBundle\\Entity\\Customer\", mappedBy=\"address\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Customer\")\r\n     *\/\r\n    private $customer;\r\n    \/**\r\n     * Constructor\r\n     *\/\r\n    public function __construct()\r\n    {\r\n        $this->customer = new \\Doctrine\\Common\\Collections\\ArrayCollection();\r\n    }\r\n\r\n    \/**\r\n     * Get id\r\n     *\r\n     * @return integer\r\n     *\/\r\n    public function getId()\r\n    {\r\n        return $this->id;\r\n    }\r\n\r\n    \/**\r\n     * Set street\r\n     *\r\n     * @param string $street\r\n     *\r\n     * @return CustomerAddress\r\n     *\/\r\n    public function setStreet($street)\r\n    {\r\n        $this->street = $street;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get street\r\n     *\r\n     * @return string\r\n     *\/\r\n    public function getStreet()\r\n    {\r\n        return $this->street;\r\n    }\r\n\r\n    \/**\r\n     * Set street2\r\n     *\r\n     * @param string $street2\r\n     *\r\n     * @return CustomerAddress\r\n     *\/\r\n    public function setStreet2($street2)\r\n    {\r\n        $this->street2 = $street2;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get street2\r\n     *\r\n     * @return string\r\n     *\/\r\n    public function getStreet2()\r\n    {\r\n        return $this->street2;\r\n    }\r\n\r\n    \/**\r\n     * Set zipcode\r\n     *\r\n     * @param string $zipcode\r\n     *\r\n     * @return CustomerAddress\r\n     *\/\r\n    public function setZipcode($zipcode)\r\n    {\r\n        $this->zipcode = $zipcode;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get zipcode\r\n     *\r\n     * @return string\r\n     *\/\r\n    public function getZipcode()\r\n    {\r\n        return $this->zipcode;\r\n    }\r\n\r\n    \/**\r\n     * Set city\r\n     *\r\n     * @param string $city\r\n     *\r\n     * @return CustomerAddress\r\n     *\/\r\n    public function setCity($city)\r\n    {\r\n        $this->city = $city;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get city\r\n     *\r\n     * @return string\r\n     *\/\r\n    public function getCity()\r\n    {\r\n        return $this->city;\r\n    }\r\n\r\n    \/**\r\n     * Set customer\r\n     *\r\n     * @param \\AppBundle\\Entity\\Customer $customer\r\n     *\r\n     * @return CustomerAddress\r\n     *\/\r\n    public function setCustomer(\\AppBundle\\Entity\\Customer $customer)\r\n    {\r\n        $this->customer = $customer;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get customer\r\n     *\r\n     * @return \\Doctrine\\Common\\Collections\\Collection\r\n     *\/\r\n    public function getCustomer()\r\n    {\r\n        return $this->customer;\r\n    }\r\n\r\n    \/**\r\n     * Set country\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\Country $country\r\n     *\r\n     * @return CustomerAddress\r\n     *\/\r\n    public function setCountry(\\AppBundle\\Entity\\Common\\Country $country = null)\r\n    {\r\n        $this->country = $country;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get country\r\n     *\r\n     * @return \\AppBundle\\Entity\\Common\\Country\r\n     *\/\r\n    public function getCountry()\r\n    {\r\n        return $this->country;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"src\/AppBundle\/Entity\/Customer\/CustomerContact.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 10.09.2016\r\n * Time: 18:52\r\n *\/\r\n\r\nnamespace AppBundle\\Entity\\Customer;\r\n\r\nuse AppBundle\\Entity\\Common\\Person;\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\n\/**\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"CustomerContact\")\r\n *\/\r\nclass CustomerContact extends Person\r\n{\r\n    \/**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Customer\", inversedBy=\"contacts\")\r\n     * @ORM\\JoinColumn(name=\"customer_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Customer\")\r\n     *\/\r\n    private $customer;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"text\")\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $position;\r\n\r\n    \/**\r\n     * Set position\r\n     *\r\n     * @param string $position\r\n     *\r\n     * @return CustomerContact\r\n     *\/\r\n    public function setPosition($position)\r\n    {\r\n        $this->position = $position;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get position\r\n     *\r\n     * @return string\r\n     *\/\r\n    public function getPosition()\r\n    {\r\n        return $this->position;\r\n    }\r\n\r\n\r\n    \/**\r\n     * Set customer\r\n     *\r\n     * @param \\AppBundle\\Entity\\Customer $customer\r\n     *\r\n     * @return CustomerContact\r\n     *\/\r\n    public function setCustomer(\\AppBundle\\Entity\\Customer $customer = null)\r\n    {\r\n        $this->customer = $customer;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get customer\r\n     *\r\n     * @return \\AppBundle\\Entity\\Customer\r\n     *\/\r\n    public function getCustomer()\r\n    {\r\n        return $this->customer;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"src\/AppBundle\/Entity\/Customer\/CustomerOrigin.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 16.07.2016\r\n * Time: 11:02\r\n *\/\r\n\r\nnamespace AppBundle\\Entity\\Customer;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\n\r\n\/**\r\n * Class Service\r\n * @package AppBundle\\Entity\\Customer\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"CustomerOrigin\")\r\n *\/\r\nclass CustomerOrigin extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"Herkunft\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src\/AppBundle\/Entity\/Customer\/CustomerPotential.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 16.07.2016\r\n * Time: 11:02\r\n *\/\r\n\r\nnamespace AppBundle\\Entity\\Customer;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\n\r\n\/**\r\n * Class Service\r\n * @package AppBundle\\Entity\\Customer\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"CustomerPotential\")\r\n *\/\r\nclass CustomerPotential extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"Potenzial\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src\/AppBundle\/Entity\/Customer\/CustomerStatus.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 16.07.2016\r\n * Time: 11:02\r\n *\/\r\n\r\nnamespace AppBundle\\Entity\\Customer;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\n\r\n\/**\r\n * Class Service\r\n * @package AppBundle\\Entity\\Customer\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"CustomerStatus\")\r\n *\/\r\nclass CustomerStatus extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"Status\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src\/AppBundle\/Entity\/CustomerRepository.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 11.09.2016\r\n * Time: 22:15\r\n *\/\r\n\r\nnamespace AppBundle\\Entity;\r\n\r\nuse Doctrine\\ORM\\EntityRepository;\r\n\r\nclass CustomerRepository extends EntityRepository\r\n{\r\n    public function findAllBySearchParams($search, $limit = null, $page = null)\r\n    {\r\n        $qb = $this->createQueryBuilder('c');\r\n\r\n        if (isset($search['origin'])) {\r\n            $qb->join('c.origin', 'o', 'WITH', 'o.id = :cOriginId');\r\n            $qb->setParameter('cOriginId', $search['origin']['id']);\r\n        }\r\n\r\n        if (isset($search['potential'])) {\r\n            $qb->join('c.potential', 'p', 'WITH', 'p.id = :potentialId');\r\n            $qb->setParameter('potentialId', $search['potential']['id']);\r\n        }\r\n\r\n        if (isset($search['account_manager'])) {\r\n            $qb->join('c.accountManager', 'am', 'WITH', 'am.id = :amId');\r\n            $qb->setParameter('amId', $search['account_manager']['id']);\r\n        }\r\n\r\n        if (isset($search['status'])) {\r\n            $qb->join('c.status', 's', 'WITH', 's.id = :statusId');\r\n            $qb->setParameter('statusId', $search['status']['id']);\r\n        }\r\n\r\n        if (isset($search['name']) && $search['name'] != \"\") {\r\n            $searchStrings = mbsplit('\\s|,',$search['name']);\r\n            for($i = 0; $i < sizeof($searchStrings); $i++) {\r\n                $qb->andWhere('c.name1 LIKE :name'.$i.' OR c.name2 LIKE :name'.$i);\r\n                $qb->setParameter('name'.$i, '%'. $searchStrings[$i] . '%');\r\n            }\r\n        }\r\n\r\n        if (isset($search['asp_name']) && $search['asp_name'] != \"\") {\r\n            $qb->leftjoin('c.contacts', 'cc', 'WITH', 'cc.customer = c');\r\n            $searchStrings = mbsplit('\\s|,',$search['asp_name']);\r\n            for($i = 0; $i < sizeof($searchStrings); $i++) {\r\n                $qb->andWhere('cc.name1 LIKE :asp_name'.$i.' OR cc.name2 LIKE :asp_name'.$i);\r\n                $qb->setParameter('asp_name'.$i, '%'. $searchStrings[$i] . '%');\r\n            }\r\n        }\r\n\r\n        $qb->orderBy('c.name2');\r\n        $qb->addOrderBy('c.name1');\r\n        $qb->distinct();\r\n\r\n        $query = $qb->getQuery();\r\n\r\n        if ($page == null && $limit = null)\r\n        {\r\n            \/\/ Get unpaginated result\r\n            return $query->getResult();\r\n        }\r\n        else\r\n        {\r\n            $qHelper = new QueryHelper();\r\n            $paginator = $qHelper->paginate($query, $page, $limit);\r\n            return $qHelper->getPaginatedResult($paginator);\r\n        }\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,0,0,null,null,1,0,0,null,null,1,0,0,null,null,1,0,0,null,null,1,0,0,0,0,null,null,null,1,0,0,0,0,0,null,null,null,1,1,1,null,1,null,1,null,null,0,null,null,null,1,1,1,null,null,null]},{"name":"src\/AppBundle\/Entity\/Freelancer.php","source":"<?php\r\n\/**\r\n * Klasse beschreibt ein Freelancer-Objekt\r\n *\/\r\n\r\nnamespace AppBundle\\Entity;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse Doctrine\\Common\\Collections\\ArrayCollection;\r\nuse AppBundle\\Entity\\Common\\Person;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\n\/**\r\n * Class Freelancer\r\n * @package AppBundle\\Entity\r\n *\r\n * @ORM\\Entity(repositoryClass=\"AppBundle\\Entity\\FreelancerRepository\")\r\n * @ORM\\Table(name=\"Freelancer\")\r\n *\/\r\nclass Freelancer extends Person implements \\JsonSerializable\r\n{\r\n    \/**\r\n     * @ORM\\Column(type=\"integer\", unique=true, nullable=true)\r\n     * @JMS\\Type(\"integer\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $supplierNo;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $companyName;\r\n\r\n    \/**\r\n     * @ORM\\OneToOne(targetEntity=\"AppBundle\\Entity\\Freelancer\\FreelancerAddress\", inversedBy=\"freelancer\")\r\n     * @ORM\\JoinColumn(name=\"freelanceraddress_id\", referencedColumnName=\"id\", onDelete=\"CASCADE\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Freelancer\\FreelancerAddress\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     * @JMS\\AccessType(\"public_method\")\r\n     *\/\r\n    private $address;\r\n\r\n    \/**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Freelancer\\FreelancerStatus\")\r\n     * @ORM\\JoinColumn(name=\"status_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Freelancer\\FreelancerStatus\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $flStatus; \/\/ Entity\r\n\r\n    \/**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Common\\Language\")\r\n     * @ORM\\JoinColumn(name=\"mothertounge_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Common\\Language\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $mothertounge;\r\n\r\n    \/**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Common\\Language\")\r\n     * @ORM\\JoinColumn(name=\"mothertounge2_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Common\\Language\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $mothertounge2;\r\n\r\n    \/**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Freelancer\\FreelancerRating\")\r\n     * @ORM\\JoinColumn(name=\"fl_rating_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Freelancer\\FreelancerRating\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $flRating; \/\/ Entity\r\n\r\n    \/**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Common\\YesNoInProgress\")\r\n     * @ORM\\JoinColumn(name=\"nda_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Common\\YesNoInProgress\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $nda;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"boolean\", nullable=true)\r\n     * @JMS\\Type(\"boolean\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $sworn;\r\n\r\n    \/\/ Dateien?\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $vatNo;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"boolean\", nullable=true)\r\n     * @JMS\\Type(\"boolean\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $vatPayer;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $taxId;\r\n\r\n    \/**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Freelancer\\FreelancerPaymentType\")\r\n     * @ORM\\JoinColumn(name=\"fl_payment_type_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Freelancer\\FreelancerPaymentType\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $flPaymentType;\r\n\r\n    \/**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Freelancer\\FreelancerInvoicingType\")\r\n     * @ORM\\JoinColumn(name=\"fl_invoicing_type_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Freelancer\\FreelancerInvoicingType\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $flInvoicingType;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $bankdetails;\r\n\r\n    \/**\r\n     * @ORM\\OneToMany(targetEntity=\"AppBundle\\Entity\\Freelancer\\FreelancerPrice\", mappedBy=\"freelancer\")\r\n     * @ORM\\JoinColumn(name=\"price_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"ArrayCollection<AppBundle\\Entity\\Freelancer\\FreelancerPrice>\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $prices;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"boolean\", nullable=true)\r\n     * @JMS\\Type(\"boolean\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $catPrices;\r\n\r\n    \/**\r\n     * @ORM\\ManyToMany(targetEntity=\"AppBundle\\Entity\\Common\\Sector\")\r\n     * @ORM\\JoinTable(name=\"freelancers_sectors\",\r\n     *     joinColumns={@ORM\\JoinColumn(name=\"freelancer_id\", referencedColumnName=\"id\", onDelete=\"CASCADE\")},\r\n     *     inverseJoinColumns={@ORM\\JoinColumn(name=\"sector_id\", referencedColumnName=\"id\")}\r\n     *     )\r\n     * @JMS\\Type(\"ArrayCollection<AppBundle\\Entity\\Common\\Sector>\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $sectors; \/\/ Entity Collection\r\n\r\n    \/**\r\n     * @ORM\\ManyToMany(targetEntity=\"AppBundle\\Entity\\Common\\CatTool\")\r\n     * @ORM\\JoinTable(name=\"freelancers_cattools\",\r\n     *     joinColumns={@ORM\\JoinColumn(name=\"freelancer_id\", referencedColumnName=\"id\", onDelete=\"CASCADE\")},\r\n     *     inverseJoinColumns={@ORM\\JoinColumn(name=\"cattool_id\", referencedColumnName=\"id\")}\r\n     *     )\r\n     * @JMS\\Type(\"ArrayCollection<AppBundle\\Entity\\Common\\CatTool>\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $catTools; \/\/ Entity Collection\r\n\r\n    \/\/ Abwesenheiten --> Genauer eruieren, was gew\u00fcnscht ist\r\n\r\n    \/**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\User\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\User\")\r\n     * @JMS\\Groups({\"display\"})\r\n     *\/\r\n    protected $createdBy; \/\/ User\r\n\r\n    public function __construct()\r\n    {\r\n        $this->prices = new ArrayCollection();\r\n        $this->sectors = new ArrayCollection();\r\n        $this->catTools = new ArrayCollection();\r\n    }\r\n\r\n    \/**\r\n     * Set supplierNo\r\n     *\r\n     * @param string $supplierNo\r\n     *\r\n     * @return mixed\r\n     *\/\r\n    public function setSupplierNo($supplierNo)\r\n    {\r\n        $this->supplierNo = $supplierNo;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get supplierNo\r\n     *\r\n     * @return string\r\n     *\/\r\n    public function getSupplierNo()\r\n    {\r\n        return $this->supplierNo;\r\n    }\r\n\r\n\r\n    \/**\r\n     * Set companyName\r\n     *\r\n     * @param string $companyName\r\n     *\r\n     * @return mixed\r\n     *\/\r\n    public function setCompanyName($companyName)\r\n    {\r\n        $this->companyName = $companyName;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get companyName\r\n     *\r\n     * @return string\r\n     *\/\r\n    public function getCompanyName()\r\n    {\r\n        return $this->companyName;\r\n    }\r\n\r\n    \/**\r\n     * Set vatNo\r\n     *\r\n     * @param string $vatNo\r\n     *\r\n     * @return Freelancer\r\n     *\/\r\n    public function setVatNo($vatNo)\r\n    {\r\n        $this->vatNo = $vatNo;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get vatNo\r\n     *\r\n     * @return string\r\n     *\/\r\n    public function getVatNo()\r\n    {\r\n        return $this->vatNo;\r\n    }\r\n\r\n    \/**\r\n     * Set vatPayer\r\n     *\r\n     * @param boolean $vatPayer\r\n     *\r\n     * @return Freelancer\r\n     *\/\r\n    public function setVatPayer($vatPayer)\r\n    {\r\n        $this->vatPayer = $vatPayer;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get vatPayer\r\n     *\r\n     * @return boolean\r\n     *\/\r\n    public function getVatPayer()\r\n    {\r\n        return $this->vatPayer;\r\n    }\r\n    \r\n    \/**\r\n     * Set taxId\r\n     *\r\n     * @param string $taxId\r\n     *\r\n     * @return Freelancer\r\n     *\/\r\n    public function setTaxId($taxId)\r\n    {\r\n        $this->taxId = $taxId;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get taxId\r\n     *\r\n     * @return string\r\n     *\/\r\n    public function getTaxId()\r\n    {\r\n        return $this->taxId;\r\n    }\r\n    \r\n    \r\n    \/**\r\n     * Set bankdetails\r\n     *\r\n     * @param string $bankdetails\r\n     *\r\n     * @return Freelancer\r\n     *\/\r\n    public function setBankdetails($bankdetails)\r\n    {\r\n        $this->bankdetails = $bankdetails;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get bankdetails\r\n     *\r\n     * @return string\r\n     *\/\r\n    public function getBankdetails()\r\n    {\r\n        return $this->bankdetails;\r\n    }\r\n\r\n    \/**\r\n     * Set sworn\r\n     *\r\n     * @param boolean $sworn\r\n     *\r\n     * @return Freelancer\r\n     *\/\r\n    public function setSworn($sworn)\r\n    {\r\n        $this->sworn = $sworn;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get sworn\r\n     *\r\n     * @return boolean\r\n     *\/\r\n    public function getSworn()\r\n    {\r\n        return $this->sworn;\r\n    }\r\n\r\n    \/**\r\n     * Set address\r\n     *\r\n     * @param \\AppBundle\\Entity\\Freelancer\\FreelancerAddress $address\r\n     *\r\n     * @return Freelancer\r\n     *\/\r\n    public function setAddress(\\AppBundle\\Entity\\Freelancer\\FreelancerAddress $address = null)\r\n    {\r\n        $this->address = $address;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get address\r\n     *\r\n     * @return \\AppBundle\\Entity\\Freelancer\\FreelancerAddress\r\n     *\/\r\n    public function getAddress()\r\n    {\r\n        return $this->address;\r\n    }\r\n\r\n    \/**\r\n     * Set status\r\n     *\r\n     * @param \\AppBundle\\Entity\\Freelancer\\FreelancerStatus $flStatus\r\n     *\r\n     * @return Freelancer\r\n     *\/\r\n    public function setFlStatus(\\AppBundle\\Entity\\Freelancer\\FreelancerStatus $flStatus = null)\r\n    {\r\n        $this->flStatus = $flStatus;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get status\r\n     *\r\n     * @return \\AppBundle\\Entity\\Freelancer\\FreelancerStatus\r\n     *\/\r\n    public function getFlStatus()\r\n    {\r\n        return $this->flStatus;\r\n    }\r\n\r\n    \/**\r\n     * Set rating\r\n     *\r\n     * @param \\AppBundle\\Entity\\Freelancer\\FreelancerRating $flRating\r\n     *\r\n     * @return Freelancer\r\n     *\/\r\n    public function setFlRating(\\AppBundle\\Entity\\Freelancer\\FreelancerRating $flRating = null)\r\n    {\r\n        $this->flRating = $flRating;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get rating\r\n     *\r\n     * @return \\AppBundle\\Entity\\Freelancer\\FreelancerRating\r\n     *\/\r\n    public function getFlRating()\r\n    {\r\n        return $this->flRating;\r\n    }\r\n\r\n    \r\n    \/**\r\n     * Set mothertounge\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\Language $mothertounge\r\n     *\r\n     * @return Freelancer\r\n     *\/\r\n    public function setMothertounge(\\AppBundle\\Entity\\Common\\Language $mothertounge = null)\r\n    {\r\n        $this->mothertounge = $mothertounge;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get mothertounge\r\n     *\r\n     * @return \\AppBundle\\Entity\\Common\\Language\r\n     *\/\r\n    public function getMothertounge()\r\n    {\r\n        return $this->mothertounge;\r\n    }\r\n\r\n    \/**\r\n     * Set mothertounge2\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\Language $mothertounge2\r\n     *\r\n     * @return Freelancer\r\n     *\/\r\n    public function setMothertounge2(\\AppBundle\\Entity\\Common\\Language $mothertounge2 = null)\r\n    {\r\n        $this->mothertounge2 = $mothertounge2;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get mothertounge2\r\n     *\r\n     * @return \\AppBundle\\Entity\\Common\\Language\r\n     *\/\r\n    public function getMothertounge2()\r\n    {\r\n        return $this->mothertounge2;\r\n    }\r\n\r\n    \/**\r\n     * Set nda\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\YesNoInProgress $nda\r\n     *\r\n     * @return Freelancer\r\n     *\/\r\n    public function setNda(\\AppBundle\\Entity\\Common\\YesNoInProgress $nda = null)\r\n    {\r\n        $this->nda = $nda;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get nda\r\n     *\r\n     * @return \\AppBundle\\Entity\\Common\\YesNoInProgress\r\n     *\/\r\n    public function getNda()\r\n    {\r\n        return $this->nda;\r\n    }\r\n    \r\n\r\n    \/**\r\n     * Set catPrices\r\n     *\r\n     * @param boolean $catPrices\r\n     *\r\n     * @return Freelancer\r\n     *\/\r\n    public function setCatPrices($catPrices)\r\n    {\r\n        $this->catPrices = $catPrices;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get catPrices\r\n     *\r\n     * @return boolean\r\n     *\/\r\n    public function getCatPrices()\r\n    {\r\n        return $this->catPrices;\r\n    }\r\n    \r\n    \r\n\r\n    \/**\r\n     * Add price\r\n     *\r\n     * @param \\AppBundle\\Entity\\Freelancer\\FreelancerPrice $price\r\n     *\r\n     * @return Freelancer\r\n     *\/\r\n    public function addPrice(\\AppBundle\\Entity\\Freelancer\\FreelancerPrice $price)\r\n    {\r\n        $price->setFreelancer($this);\r\n        $this->prices[] = $price;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Remove price\r\n     *\r\n     * @param \\AppBundle\\Entity\\Freelancer\\FreelancerPrice $price\r\n     *\/\r\n    public function removePrice(\\AppBundle\\Entity\\Freelancer\\FreelancerPrice $price)\r\n    {\r\n        $this->prices->removeElement($price);\r\n        $price->setFreelancer(null);\r\n    }\r\n\r\n    \/**\r\n     * Get prices\r\n     *\r\n     * @return \\Doctrine\\Common\\Collections\\Collection\r\n     *\/\r\n    public function getPrices()\r\n    {\r\n        return $this->prices;\r\n    }\r\n\r\n    \/**\r\n     * Add sector\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\Sector $sector\r\n     *\r\n     * @return Freelancer\r\n     *\/\r\n    public function addSector(\\AppBundle\\Entity\\Common\\Sector $sector)\r\n    {\r\n        $this->sectors[] = $sector;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Remove sector\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\Sector $sector\r\n     *\/\r\n    public function removeSector(\\AppBundle\\Entity\\Common\\Sector $sector)\r\n    {\r\n        $this->sectors->removeElement($sector);\r\n    }\r\n\r\n    \/**\r\n     * Get sectors\r\n     *\r\n     * @return \\Doctrine\\Common\\Collections\\Collection\r\n     *\/\r\n    public function getSectors()\r\n    {\r\n        return $this->sectors;\r\n    }\r\n\r\n    \/**\r\n     * Add catTool\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\CatTool $catTool\r\n     *\r\n     * @return Freelancer\r\n     *\/\r\n    public function addCatTool(\\AppBundle\\Entity\\Common\\CatTool $catTool)\r\n    {\r\n        $this->catTools[] = $catTool;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Remove catTool\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\CatTool $catTool\r\n     *\/\r\n    public function removeCatTool(\\AppBundle\\Entity\\Common\\CatTool $catTool)\r\n    {\r\n        $this->catTools->removeElement($catTool);\r\n    }\r\n\r\n    \/**\r\n     * Get catTools\r\n     *\r\n     * @return \\Doctrine\\Common\\Collections\\Collection\r\n     *\/\r\n    public function getCatTools()\r\n    {\r\n        return $this->catTools;\r\n    }\r\n\r\n\r\n    public function jsonSerialize()\r\n    {\r\n        $vars = get_object_vars($this);\r\n\r\n        return $vars;\r\n    }\r\n\r\n\r\n    \/**\r\n     * Set flPaymentType\r\n     *\r\n     * @param \\AppBundle\\Entity\\Freelancer\\FreelancerPaymentType $flPaymentType\r\n     *\r\n     * @return Freelancer\r\n     *\/\r\n    public function setFlPaymentType(\\AppBundle\\Entity\\Freelancer\\FreelancerPaymentType $flPaymentType = null)\r\n    {\r\n        $this->flPaymentType = $flPaymentType;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get flPaymentType\r\n     *\r\n     * @return \\AppBundle\\Entity\\Freelancer\\FreelancerPaymentType\r\n     *\/\r\n    public function getFlPaymentType()\r\n    {\r\n        return $this->flPaymentType;\r\n    }\r\n\r\n\r\n    \/**\r\n     * Set flInvoicingType\r\n     *\r\n     * @param \\AppBundle\\Entity\\Freelancer\\FreelancerInvoicingType $flInvoicingType\r\n     *\r\n     * @return Freelancer\r\n     *\/\r\n    public function setFlInvoicingType(\\AppBundle\\Entity\\Freelancer\\FreelancerInvoicingType $flInvoicingType = null)\r\n    {\r\n        $this->flInvoicingType = $flInvoicingType;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get flInvoicingType\r\n     *\r\n     * @return \\AppBundle\\Entity\\Freelancer\\FreelancerInvoicingType\r\n     *\/\r\n    public function getFlInvoicingType()\r\n    {\r\n        return $this->flInvoicingType;\r\n    }\r\n\r\n    \/**\r\n     * Set createdBy\r\n     *\r\n     * @param \\AppBundle\\Entity\\User $createdBy\r\n     *\r\n     * @return Freelancer\r\n     *\/\r\n    public function setCreatedBy(\\AppBundle\\Entity\\User $createdBy = null)\r\n    {\r\n        $this->createdBy = $createdBy;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get createdBy\r\n     *\r\n     * @return \\AppBundle\\Entity\\User\r\n     *\/\r\n    public function getCreatedBy()\r\n    {\r\n        return $this->createdBy;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,1,1,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,1,null,1,null,null,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,null,null,0,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"src\/AppBundle\/Entity\/Freelancer\/FreelancerAddress.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 17.07.2016\r\n * Time: 19:17\r\n *\/\r\n\r\nnamespace AppBundle\\Entity\\Freelancer;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\Common\\Address;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\n\/**\r\n * Class Address\r\n * @package AppBundle\\Entity\\Freelancer\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"FreelancerAddress\")\r\n *\/\r\nclass FreelancerAddress extends Address\r\n{\r\n    \/**\r\n     * @ORM\\OneToOne(targetEntity=\"AppBundle\\Entity\\Freelancer\", mappedBy=\"address\")\r\n     * @ORM\\JoinColumn(name=\"freelancer_id\", referencedColumnName=\"id\", onDelete=\"SET NULL\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Freelancer\")\r\n     *\/\r\n    private $freelancer;\r\n\r\n    \/**\r\n     * Constructor\r\n     *\/\r\n    public function __construct()\r\n    {\r\n\r\n    }\r\n\r\n    \/**\r\n     * Get id\r\n     *\r\n     * @return integer\r\n     *\/\r\n    public function getId()\r\n    {\r\n        return $this->id;\r\n    }\r\n\r\n    \/**\r\n     * Set street\r\n     *\r\n     * @param string $street\r\n     *\r\n     * @return FreelancerAddress\r\n     *\/\r\n    public function setStreet($street)\r\n    {\r\n        $this->street = $street;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get street\r\n     *\r\n     * @return string\r\n     *\/\r\n    public function getStreet()\r\n    {\r\n        return $this->street;\r\n    }\r\n\r\n    \/**\r\n     * Set street2\r\n     *\r\n     * @param string $street2\r\n     *\r\n     * @return FreelancerAddress\r\n     *\/\r\n    public function setStreet2($street2)\r\n    {\r\n        $this->street2 = $street2;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get street2\r\n     *\r\n     * @return string\r\n     *\/\r\n    public function getStreet2()\r\n    {\r\n        return $this->street2;\r\n    }\r\n\r\n    \/**\r\n     * Set zipcode\r\n     *\r\n     * @param string $zipcode\r\n     *\r\n     * @return FreelancerAddress\r\n     *\/\r\n    public function setZipcode($zipcode)\r\n    {\r\n        $this->zipcode = $zipcode;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get zipcode\r\n     *\r\n     * @return string\r\n     *\/\r\n    public function getZipcode()\r\n    {\r\n        return $this->zipcode;\r\n    }\r\n\r\n    \/**\r\n     * Set city\r\n     *\r\n     * @param string $city\r\n     *\r\n     * @return FreelancerAddress\r\n     *\/\r\n    public function setCity($city)\r\n    {\r\n        $this->city = $city;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get city\r\n     *\r\n     * @return string\r\n     *\/\r\n    public function getCity()\r\n    {\r\n        return $this->city;\r\n    }\r\n\r\n    \/**\r\n     * Set freelancer\r\n     *\r\n     * @param \\AppBundle\\Entity\\Freelancer $freelancer\r\n     *\r\n     * @return FreelancerAddress\r\n     *\/\r\n    public function setFreelancer(\\AppBundle\\Entity\\Freelancer $freelancer)\r\n    {\r\n        $this->freelancer = $freelancer;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get freelancer\r\n     *\r\n     * @return \\Doctrine\\Common\\Collections\\Collection\r\n     *\/\r\n    public function getFreelancer()\r\n    {\r\n        return $this->freelancer;\r\n    }\r\n\r\n    \/**\r\n     * Set country\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\Country $country\r\n     *\r\n     * @return FreelancerAddress\r\n     *\/\r\n    public function setCountry(\\AppBundle\\Entity\\Common\\Country $country = null)\r\n    {\r\n        $this->country = $country;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get country\r\n     *\r\n     * @return \\AppBundle\\Entity\\Common\\Country\r\n     *\/\r\n    public function getCountry()\r\n    {\r\n        return $this->country;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,1,null,1,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"src\/AppBundle\/Entity\/Freelancer\/FreelancerInvoicingType.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 16.07.2016\r\n * Time: 11:03\r\n *\/\r\n\r\nnamespace AppBundle\\Entity\\Freelancer;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\n\r\n\/**\r\n * Class FreelancerPaymentType\r\n * @package AppBundle\\Entity\\Freelancer\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"FreelancerInvoicingType\")\r\n *\/\r\nclass FreelancerInvoicingType extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"Rechnungsart\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src\/AppBundle\/Entity\/Freelancer\/FreelancerPaymentType.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 16.07.2016\r\n * Time: 11:03\r\n *\/\r\n\r\nnamespace AppBundle\\Entity\\Freelancer;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\n\r\n\/**\r\n * Class FreelancerPaymentType\r\n * @package AppBundle\\Entity\\Freelancer\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"FreelancerPaymentType\")\r\n *\/\r\nclass FreelancerPaymentType extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"Bezahlart\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src\/AppBundle\/Entity\/Freelancer\/FreelancerPrice.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 17.07.2016\r\n * Time: 20:19\r\n *\/\r\n\r\nnamespace AppBundle\\Entity\\Freelancer;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\Common\\Service;\r\nuse AppBundle\\Entity\\Common\\PriceUnit;\r\nuse AppBundle\\Entity\\Freelancer;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\n\/**\r\n * Class FreelancerPrice\r\n * @package AppBundle\\Entity\\Freelancer\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"FreelancerPrice\")\r\n *\/\r\nclass FreelancerPrice\r\n{\r\n    \/**\r\n     * @ORM\\Id\r\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\r\n     * @ORM\\Column(type=\"integer\")\r\n     * @JMS\\Type(\"integer\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $id;\r\n\r\n    \/**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Common\\Language\")\r\n     * @ORM\\JoinColumn(name=\"lngSource_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Common\\Language\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $lngSource;\r\n\r\n    \/**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Common\\Language\")\r\n     * @ORM\\JoinColumn(name=\"lngTarget_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Common\\Language\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $lngTarget;\r\n\r\n\r\n    \/**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Common\\Service\")\r\n     * @ORM\\JoinColumn(name=\"service_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Common\\Service\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $service;\r\n\r\n    \/**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Common\\PriceUnit\")\r\n     * @ORM\\JoinColumn(name=\"priceunit_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Common\\PriceUnit\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $priceUnit;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"float\")\r\n     * @JMS\\Type(\"double\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $pricePerUnit;\r\n\r\n    \/**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Common\\Currency\")\r\n     * @ORM\\JoinColumn(name=\"currency_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Common\\Currency\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $currency;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"float\")\r\n     * @JMS\\Type(\"double\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $minimumPrice;\r\n\r\n    \/**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Freelancer\", inversedBy=\"prices\")\r\n     * @ORM\\JoinColumn(name=\"freelancer_id\", referencedColumnName=\"id\", onDelete=\"CASCADE\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Freelancer\")\r\n     *\/\r\n    private $freelancer;\r\n\r\n    \/**\r\n     * Get id\r\n     *\r\n     * @return integer\r\n     *\/\r\n    public function getId()\r\n    {\r\n        return $this->id;\r\n    }\r\n\r\n    \/**\r\n     * Set lngSource\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\Language $lngSource\r\n     *\r\n     * @return FreelancerPrice\r\n     *\/\r\n    public function setLngSource(\\AppBundle\\Entity\\Common\\Language $lngSource = null)\r\n    {\r\n        $this->lngSource = $lngSource;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get lngSource\r\n     *\r\n     * @return \\AppBundle\\Entity\\Common\\Language\r\n     *\/\r\n    public function getLngSource()\r\n    {\r\n        return $this->lngSource;\r\n    }\r\n\r\n    \/**\r\n     * Set lngTarget\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\Language $lngTarget\r\n     *\r\n     * @return FreelancerPrice\r\n     *\/\r\n    public function setLngTarget(\\AppBundle\\Entity\\Common\\Language $lngTarget = null)\r\n    {\r\n        $this->lngTarget = $lngTarget;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get lngTarget\r\n     *\r\n     * @return \\AppBundle\\Entity\\Common\\Language\r\n     *\/\r\n    public function getLngTarget()\r\n    {\r\n        return $this->lngTarget;\r\n    }\r\n\r\n    \/**\r\n     * Set minimumPrice\r\n     *\r\n     * @param float $minimumPrice\r\n     *\r\n     * @return FreelancerPrice\r\n     *\/\r\n    public function setMinimumPrice($minimumPrice)\r\n    {\r\n        $this->minimumPrice = $minimumPrice;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get minimumPrice\r\n     *\r\n     * @return float\r\n     *\/\r\n    public function getMinimumPrice()\r\n    {\r\n        return $this->minimumPrice;\r\n    }\r\n    \r\n    \/**\r\n     * Set pricePerUnit\r\n     *\r\n     * @param float $pricePerUnit\r\n     *\r\n     * @return FreelancerPrice\r\n     *\/\r\n    public function setPricePerUnit($pricePerUnit)\r\n    {\r\n        $this->pricePerUnit = $pricePerUnit;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get pricePerUnit\r\n     *\r\n     * @return float\r\n     *\/\r\n    public function getPricePerUnit()\r\n    {\r\n        return $this->pricePerUnit;\r\n    }\r\n\r\n    \/**\r\n     * Set service\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\Service $service\r\n     *\r\n     * @return FreelancerPrice\r\n     *\/\r\n    public function setService(\\AppBundle\\Entity\\Common\\Service $service = null)\r\n    {\r\n        $this->service = $service;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get service\r\n     *\r\n     * @return \\AppBundle\\Entity\\Common\\Service\r\n     *\/\r\n    public function getService()\r\n    {\r\n        return $this->service;\r\n    }\r\n\r\n    \/**\r\n     * Set priceUnit\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\PriceUnit $priceUnit\r\n     *\r\n     * @return FreelancerPrice\r\n     *\/\r\n    public function setPriceUnit(\\AppBundle\\Entity\\Common\\PriceUnit $priceUnit = null)\r\n    {\r\n        $this->priceUnit = $priceUnit;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get priceUnit\r\n     *\r\n     * @return \\AppBundle\\Entity\\Common\\PriceUnit\r\n     *\/\r\n    public function getPriceUnit()\r\n    {\r\n        return $this->priceUnit;\r\n    }\r\n\r\n    \/**\r\n     * Set currency\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\Currency $currency\r\n     *\r\n     * @return FreelancerPrice\r\n     *\/\r\n    public function setCurrency(\\AppBundle\\Entity\\Common\\Currency $currency = null)\r\n    {\r\n        $this->currency = $currency;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get currency\r\n     *\r\n     * @return \\AppBundle\\Entity\\Common\\Currency\r\n     *\/\r\n    public function getCurrency()\r\n    {\r\n        return $this->currency;\r\n    }\r\n\r\n    \/**\r\n     * Set freelancer\r\n     *\r\n     * @param \\AppBundle\\Entity\\Freelancer $freelancer\r\n     *\r\n     * @return FreelancerPrice\r\n     *\/\r\n    public function setFreelancer(\\AppBundle\\Entity\\Freelancer $freelancer = null)\r\n    {\r\n        $this->freelancer = $freelancer;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get freelancer\r\n     *\r\n     * @return \\AppBundle\\Entity\\Freelancer\r\n     *\/\r\n    public function getFreelancer()\r\n    {\r\n        return $this->freelancer;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"src\/AppBundle\/Entity\/Freelancer\/FreelancerRating.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 16.07.2016\r\n * Time: 11:02\r\n *\/\r\n\r\nnamespace AppBundle\\Entity\\Freelancer;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\n\r\n\/**\r\n * Class Service\r\n * @package AppBundle\\Entity\\Common\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"FreelancerRating\")\r\n *\/\r\nclass FreelancerRating extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"Rating\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src\/AppBundle\/Entity\/Freelancer\/FreelancerStatus.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 16.07.2016\r\n * Time: 11:01\r\n *\/\r\n\r\nnamespace AppBundle\\Entity\\Freelancer;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\n\r\n\/**\r\n * Class Service\r\n * @package AppBundle\\Entity\\Common\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"FreelancerStatus\")\r\n *\/\r\nclass FreelancerStatus extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"Status\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src\/AppBundle\/Entity\/FreelancerRepository.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 11.09.2016\r\n * Time: 22:15\r\n *\/\r\n\r\nnamespace AppBundle\\Entity;\r\n\r\n\r\nuse Doctrine\\ORM\\EntityRepository;\r\nuse Doctrine\\ORM\\Tools\\Pagination\\Paginator;\r\n\r\nclass FreelancerRepository extends EntityRepository\r\n{\r\n    public function findAllBySearchParams($search, $limit = null, $page = null)\r\n    {\r\n        $qbSl = $this->_em->createQueryBuilder();\r\n        $qbSl->select('ls_search.id');\r\n        $qbSl->from('AppBundle:Common\\\\Language', 'ls_search');\r\n        $qbSl->leftJoin('AppBundle:Common\\\\Language', 'mls', 'WITH', 'mls = ls_search.mainItem');\r\n        $qbSl->where('mls.id = :lngSourceId or ls_search.id = :lngSourceId');\r\n\r\n        $qbTl = $this->_em->createQueryBuilder();\r\n        $qbTl->select('lt_search.id');\r\n        $qbTl->from('AppBundle:Common\\\\Language', 'lt_search');\r\n        $qbTl->leftJoin('AppBundle:Common\\\\Language', 'mlt', 'WITH', 'mlt = lt_search.mainItem');\r\n        $qbTl->where('mlt.id = :lngTargetId or lt_search.id = :lngTargetId');\r\n\r\n        $qbSector = $this->_em->createQueryBuilder();\r\n        $qbSector->select('sec_search.id');\r\n        $qbSector->from('AppBundle:Common\\\\Sector', 'sec_search');\r\n        $qbSector->leftJoin('AppBundle:Common\\\\Sector', 'mainsec', 'WITH', 'mainsec = sec_search.mainItem');\r\n        $qbSector->where('mainsec.id = :sectorId or sec_search.id = :sectorId');\r\n\r\n\r\n        $qb = $this->createQueryBuilder('fl');\r\n\r\n        if (isset($search['lng_source']) || isset($search['lng_target'])) {\r\n            $qb->join('fl.prices', 'p', 'WITH', 'fl = p.freelancer');\r\n\r\n            if(isset($search['lng_source']['id'])) {\r\n                $qb->join('p.lngSource', 'ls');\r\n                $qb->andWhere($qbSl->expr()->in('ls.id', $qbSl->getDQL()));\r\n                $qb->setParameter('lngSourceId', $search['lng_source']['id']);\r\n            }\r\n            \r\n\r\n            if (isset($search['lng_target']['id'])) {\r\n                $qb->join('p.lngTarget', 'lt');\r\n                $qb->andWhere($qbTl->expr()->in('lt.id', $qbTl->getDQL()));\r\n                $qb->setParameter('lngTargetId', $search['lng_target']['id']);\r\n            }\r\n\r\n        }\r\n\r\n        if (isset($search['fl_status']['id'])) {\r\n            $qb->join('fl.flStatus', 's', 'WITH', 's.id = :flStatusId');\r\n            $qb->setParameter('flStatusId', $search['fl_status']['id']);\r\n        }\r\n\r\n        if (isset($search['sector']['id'])) {\r\n            $qb->join('fl.sectors', 's');\r\n            $qb->andWhere($qbSl->expr()->in('s.id', $qbSector->getDQL()));\r\n            $qb->setParameter('sectorId', $search['sector']['id']);\r\n        }\r\n\r\n        if (isset($search['name'])) {\r\n            $searchStrings = mbsplit('\\s|,',$search['name']);\r\n            for($i = 0; $i < sizeof($searchStrings); $i++) {\r\n                $qb->andWhere('fl.name1 LIKE :name'.$i.' OR fl.name2 LIKE :name'.$i.' OR fl.companyName LIKE :name'.$i);\r\n                $qb->setParameter('name'.$i, '%'. $searchStrings[$i] . '%');\r\n            }\r\n        }\r\n\r\n        $qb->orderBy('fl.name2');\r\n        $qb->addOrderBy('fl.name1');\r\n        $qb->distinct();\r\n\r\n        $query = $qb->getQuery();\r\n\r\n\r\n        if ($page == null && $limit = null)\r\n        {\r\n            \/\/ Get unpaginated result\r\n            return $query->getResult();\r\n        }\r\n        else\r\n        {\r\n            $qHelper = new QueryHelper();\r\n            $paginator = $qHelper->paginate($query, $page, $limit);\r\n            return $qHelper->getPaginatedResult($paginator);\r\n        }\r\n\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,1,1,1,null,1,1,1,1,1,null,1,1,1,1,1,null,null,1,null,1,0,null,0,0,0,0,null,null,null,0,0,0,0,null,null,null,null,1,0,0,null,null,1,0,0,0,null,null,1,0,0,0,0,null,null,null,1,1,1,null,1,null,null,1,null,null,0,null,null,null,1,1,1,null,null,null,null]},{"name":"src\/AppBundle\/Entity\/QueryHelper.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 20.08.2017\r\n * Time: 12:40\r\n *\/\r\n\r\nnamespace AppBundle\\Entity;\r\n\r\nuse Doctrine\\ORM\\Tools\\Pagination\\Paginator;\r\nuse JMS\\Serializer\\SerializationContext;\r\nuse JMS\\Serializer\\SerializerBuilder;\r\n\r\nclass QueryHelper\r\n{\r\n    \/**\r\n     * Paginator Helper\r\n     *\r\n     * Pass through a query object, current page & limit\r\n     * the offset is calculated from the page and limit\r\n     * returns an `Paginator` instance, which you can call the following on:\r\n     *\r\n     *     $paginator->getIterator()->count() # Total fetched (ie: `5` posts)\r\n     *     $paginator->count() # Count of ALL posts (ie: `20` posts)\r\n     *     $paginator->getIterator() # ArrayIterator\r\n     *\r\n     * @param \\Doctrine\\ORM\\Query $dql   DQL Query Object or QueryBuilder\r\n     * @param integer            $page  Current page (defaults to 1)\r\n     * @param integer            $limit The total number per page (defaults to 10)\r\n     *\r\n     * @return \\Doctrine\\ORM\\Tools\\Pagination\\Paginator\r\n     *\/\r\n    public static function paginate($dql, $page = 1, $limit = 10)\r\n    {\r\n        $paginator = new Paginator($dql, false);\r\n\r\n        if ($page < 1)\r\n            $page = 1;\r\n        \/*\r\n        if($limit < 20)\r\n            $limit = 20;\r\n        *\/\r\n\r\n        $paginator->getQuery()\r\n            ->setFirstResult($limit * ($page - 1)) \/\/ Offset\r\n            ->setMaxResults($limit); \/\/ Limit\r\n\r\n        return $paginator;\r\n    }\r\n\r\n    public static function getPaginatedResult(\\Doctrine\\ORM\\Tools\\Pagination\\Paginator $paginator) {\r\n        $result = new \\stdClass();\r\n        $result->items = $paginator->getQuery()->getResult();\r\n        $result->itemsTotal = $paginator->count();\r\n        $result->itemsPerPage = $paginator->getQuery()->getMaxResults();\r\n        $result->page = ceil(($paginator->getQuery()->getFirstResult() + 1) \/ $result->itemsPerPage);\r\n        $result->pageMax = ceil($result->itemsTotal \/ $result->itemsPerPage);\r\n\r\n        return $result;\r\n    }\r\n\r\n    public static function getSerializableResult(\\stdClass $paginatedResult) {\r\n        \/\/ Liefern der Suche als Ergebnis (JSON)\r\n        $serializer = SerializerBuilder::create()->build();\r\n\r\n        $itemListTemp = $serializer->serialize(\r\n            $paginatedResult->items,\r\n            'json',\r\n            SerializationContext::create()->setGroups(['display'])\r\n        );\r\n\r\n        $paginatedResult->items = json_decode($itemListTemp, true);\r\n\r\n        return $paginatedResult;\r\n    }\r\n\r\n    public static function getFullEntityName($entityName) {\r\n        $collections = array(\"Freelancer\", \"Customer\", \"User\");\r\n        $found = false;\r\n        for($i = 0; $i < count($collections); $i++) {\r\n            if(strrpos($entityName, $collections[$i]) === 0) {\r\n                $entityName = $collections[$i] . \"\\\\\" . $entityName;\r\n                $found = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if(!$found) {\r\n            $entityName = \"Common\\\\\".$entityName;\r\n        }\r\n\r\n        return $entityName;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,null,2,0,null,null,null,null,null,2,2,2,null,2,null,null,null,2,2,2,2,2,2,null,2,null,null,null,null,2,null,2,2,2,2,null,null,2,null,2,null,null,null,0,0,0,0,0,0,0,null,null,null,0,0,null,null,0,null,null]},{"name":"src\/AppBundle\/Entity\/SimpleEntity.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 17.07.2016\r\n * Time: 18:34\r\n *\/\r\n\r\nnamespace AppBundle\\Entity;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\nabstract class SimpleEntity implements \\JsonSerializable\r\n{\r\n    \/**\r\n     * @ORM\\Column(type=\"integer\")\r\n     * @ORM\\Id\r\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\r\n     * @JMS\\Type(\"integer\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    protected $id;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"string\")\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\"})\r\n     *\/\r\n    protected $name;\r\n\r\n    \/\/ Getter und Setter\r\n\r\n    public function getId() {\r\n        return $this->id;\r\n    }\r\n\r\n    public function setId($id) {\r\n        $this->id = $id;\r\n    }\r\n\r\n    public function getName() {\r\n        return $this->name;\r\n    }\r\n\r\n    public function setName($name) {\r\n        $this->name = $name;\r\n    }\r\n\r\n    abstract public function getDisplayName();\r\n\r\n    \/**\r\n     * @return object\r\n     * Serialize only the properties needed\r\n     *\/\r\n    public function jsonSerialize()\r\n    {\r\n        $vars = get_object_vars($this);\r\n        return $vars;\r\n    }\r\n\r\n    public function createSubItemObject($subItems, $subItemClass) {\r\n\r\n        $vars = $vars = new \\stdClass();\r\n\r\n        \/\/ Array aus den Subvalues erstellen\r\n        $subArray = array();\r\n        foreach($subItems as $sub) {\r\n            $subObj = new \\stdClass();\r\n            $subObj->id = $sub->getId();\r\n            $subObj->name = $sub->getName();\r\n            $subArray[] = $subObj;\r\n        }\r\n\r\n        $vars->values = $subArray;\r\n\r\n        \/\/ Anzeigename SubEntity hinzuf\u00fcgen\r\n        $subLang = new $subItemClass();\r\n        $vars->display_name = $subLang->getDisplayName();\r\n\r\n        return $vars;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,0,0,null,null,5,null,null,null,0,0,null,null,null,null,null,null,null,null,null,2,2,null,null,null,null,0,null,null,0,0,0,0,0,0,null,null,0,null,null,0,0,null,0,null,null]},{"name":"src\/AppBundle\/Entity\/TwoLevelEntity.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 16.07.2016\r\n * Time: 11:04\r\n *\/\r\n\r\nnamespace AppBundle\\Entity;\r\n\r\nuse Doctrine\\Common\\Collections\\ArrayCollection;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\n\/**\r\n * Class TwoLevelEntity\r\n * @package AppBundle\\Entity\r\n *\r\n **\/\r\nabstract class TwoLevelEntity extends SimpleEntity implements \\JsonSerializable\r\n{\r\n    \/\/ Redeclare with Repository in implementing class\r\n    protected $mainItem;\r\n    protected $implementingClassName;\r\n\r\n    public function __construct()\r\n    {\r\n        $this->implementingClassName = get_class($this);\r\n        $this->mainItem = null;\r\n    }\r\n\r\n    \/**\r\n     * Set mainItem\r\n     *\r\n     * @param \\AppBundle\\Entity\\TwoLevelEntity $mainItem\r\n     *\r\n     * @return \\AppBundle\\Entity\\TwoLevelEntity\r\n     *\/\r\n    public function setMainItem(\\AppBundle\\Entity\\TwoLevelEntity $mainItem = null)\r\n    {\r\n        \/\/ ToDo: Falls das Item bereits Subitems hat, darf sie kein Hauptitem kriegen!\r\n        \/\/ ToDo: Evtl. muss das im Controller oder in OnBeforePersist abgefangen werden\r\n        if ($mainItem === null || $mainItem->isMainItem()) {\r\n            \/\/ Sprache darf nur einer Hauptsprache als Subsprache hinzugef\u00fcgt werden\r\n            $this->mainItem = $mainItem;\r\n        }\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get mainItem\r\n     *\r\n     * @return \\AppBundle\\Entity\\TwoLevelEntity\r\n     *\/\r\n    public function getMainItem()\r\n    {\r\n        return $this->mainItem;\r\n    }\r\n\r\n    public function isMainItem()\r\n    {\r\n        return empty($this->getmainItem());\r\n    }\r\n\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,1,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,0,null,null,null,null,null,null,null,null,null,1,null,null,null,null,1,null,null,null]},{"name":"src\/AppBundle\/Entity\/TwoLevelEntityRepository.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 03.08.2017\r\n * Time: 21:15\r\n *\/\r\n\r\nnamespace AppBundle\\Entity;\r\n\r\nuse Doctrine\\ORM\\EntityRepository;\r\n\r\nclass TwoLevelEntityRepository extends EntityRepository\r\n{\r\n    public function findAllItems()\r\n    {\r\n        $q = $this->createQueryBuilder('item');\r\n\r\n        $q->leftJoin('item.mainItem', 'mainItem');\r\n\r\n        $q->orderBy('mainItem.name'); \/\/ Main items first, since their main language is null\r\n        $q->addOrderBy('item.name');\r\n\r\n        $result = $q->getQuery()\r\n            ->getResult();\r\n\r\n        return $result;\r\n    }\r\n\r\n    public function findAllSubItems($mainId) {\r\n\r\n        \/\/ Falls Parameter nicht angegeben, null zur\u00fcckgeben\r\n        if (empty($mainId)) {\r\n            return null;\r\n        }\r\n\r\n        $q = $this->createQueryBuilder('item');\r\n\r\n        $q->where('item.mainItem = :mainId');\r\n\r\n        $q->orderBy('item.name');\r\n\r\n        $q->setParameter('mainId', $mainId);\r\n\r\n        $result = $q->getQuery()\r\n            ->getResult();\r\n\r\n        return $result;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,null,1,1,null,1,1,null,1,null,null,null,null,null,0,0,null,null,0,null,0,null,0,null,0,null,0,0,null,0,null,null]},{"name":"src\/AppBundle\/Entity\/User.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 17.07.2016\r\n * Time: 21:56\r\n *\/\r\n\r\nnamespace AppBundle\\Entity;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse Doctrine\\Common\\Collections\\ArrayCollection;\r\nuse Symfony\\Component\\Security\\Core\\User\\AdvancedUserInterface;\r\nuse AppBundle\\Entity\\User\\UserRole;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\n\/**\r\n * Class User\r\n * @package AppBundle\\Entity\r\n *\r\n * !!! Eventlistener OnBeforePersist adds the USER_ROLE to each new User !!!\r\n *\r\n * @ORM\\Entity(repositoryClass=\"AppBundle\\Entity\\UserRepository\")\r\n * @ORM\\Table(name=\"User\")\r\n *\/\r\nclass User implements AdvancedUserInterface\r\n{\r\n    \/**\r\n     * @ORM\\Id\r\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\r\n     * @ORM\\Column(type=\"integer\")\r\n     * @JMS\\Type(\"integer\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     *\/\r\n    private $id;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"string\", length=25, unique=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"create\"})\r\n     *\/\r\n    private $username;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"string\", length=64)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"create\"})\r\n     *\/\r\n    private $password;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"string\", length=100, unique=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\", \"create\"})\r\n     *\/\r\n    private $email;\r\n\r\n\r\n    \/**\r\n     * @ORM\\ManyToMany(targetEntity=\"AppBundle\\Entity\\User\\UserRole\", inversedBy=\"users\")\r\n     * @ORM\\JoinTable(name=\"users_roles\")\r\n     * @JMS\\Type(\"ArrayCollection<AppBundle\\Entity\\User\\UserRole>\")\r\n     * @JMS\\Groups({\"display\", \"update\", \"create\"})\r\n     *\/\r\n    private $roles;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"datetime\", nullable=true)\r\n     *\/\r\n    private $lastLoginAttempt;\r\n\r\n    \/**\r\n     * @ORM\\Column(type=\"integer\", nullable=true)\r\n     *\/\r\n    private $failedLoginAttempts;\r\n\r\n    \/**\r\n     * @ORM\\Column(name=\"is_active\", type=\"boolean\")\r\n     *\/\r\n    private $isActive;\r\n\r\n    public function __construct()\r\n    {\r\n        $this->isActive = true;\r\n        $this->failedLoginAttempts = 0;\r\n\r\n        $this->roles = new ArrayCollection();\r\n    }\r\n\r\n    \/**\r\n     * @return integer\r\n     *\/\r\n    public function getId()\r\n    {\r\n        return $this->id;\r\n    }\r\n\r\n    \/**\r\n     * @return mixed\r\n     *\/\r\n    public function getUsername()\r\n    {\r\n        return $this->username;\r\n    }\r\n\r\n    \/**\r\n     * @param string $username\r\n     *\r\n     * @return User\r\n     *\/\r\n    public function setUsername($username)\r\n    {\r\n        $this->username = $username;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * @return mixed\r\n     *\/\r\n    public function getPassword()\r\n    {\r\n        return $this->password;\r\n    }\r\n\r\n    \/**\r\n     * @param string $password\r\n     *\r\n     * @return User\r\n     *\/\r\n    public function setPassword($password)\r\n    {\r\n        $this->password = $password;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * @return null\r\n     *\/\r\n    public function getSalt()\r\n    {\r\n        return null;\r\n    }\r\n\r\n    \/**\r\n     * @return array\r\n     *\/\r\n    public function getRoles()\r\n    {\r\n        $roles = array();\r\n        foreach ($this->roles as $role) {\r\n            array_push($roles, $role->getName());\r\n        }\r\n\r\n        return $roles;\r\n    }\r\n\r\n    \/**\r\n     * @return ArrayCollection\r\n     *\/\r\n    public function getRealRoles() {\r\n        return $this->roles;\r\n    }\r\n\r\n    public function hasRole($role)\r\n    {\r\n        if (in_array($role, $this->roles->toArray())) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    \/**\r\n     * @param \\AppBundle\\Entity\\User\\UserRole $role\r\n     *\r\n     * @return User\r\n     *\/\r\n    public function addRole(\\AppBundle\\Entity\\User\\UserRole $role)\r\n    {\r\n        $this->roles[] = $role;\r\n        $role->addUser($this);\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * @param \\AppBundle\\Entity\\User\\UserRole $role\r\n     *\/\r\n    public function removeRole(\\AppBundle\\Entity\\User\\UserRole $role)\r\n    {\r\n        $this->roles->removeElement($role);\r\n    }\r\n\r\n\r\n    \/**\r\n     * Set email\r\n     *\r\n     * @param string $email\r\n     *\r\n     * @return User\r\n     *\/\r\n    public function setEmail($email)\r\n    {\r\n        $this->email = $email;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * @return string\r\n     *\/\r\n    public function getEmail()\r\n    {\r\n        return $this->email;\r\n    }\r\n\r\n    \/**\r\n     * @param boolean $isActive\r\n     *\r\n     * @return User\r\n     *\/\r\n    public function setIsActive($isActive)\r\n    {\r\n        $this->isActive = $isActive;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * @return boolean\r\n     *\/\r\n    public function getIsActive()\r\n    {\r\n        return $this->isActive;\r\n    }\r\n\r\n    \/**\r\n     * @param boolean $lastLoginAttempt\r\n     *\r\n     * @return User\r\n     *\/\r\n    public function setLastLoginAttempt($lastLoginAttempt)\r\n    {\r\n        $this->lastLoginAttempt = $lastLoginAttempt;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * @return \\DateTime\r\n     *\/\r\n    public function getLastLoginAttempt()\r\n    {\r\n        return $this->lastLoginAttempt;\r\n    }\r\n\r\n    \/**\r\n     * @param boolean $failedLoginAttempts\r\n     *\r\n     * @return User\r\n     *\/\r\n    public function setFailedLoginAttempts($failedLoginAttempts)\r\n    {\r\n        $this->failedLoginAttempts = $failedLoginAttempts;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * @return Integer\r\n     *\/\r\n    public function getFailedLoginAttempts()\r\n    {\r\n        return $this->failedLoginAttempts;\r\n    }\r\n\r\n    public function isAccountNonExpired()\r\n    {\r\n        \/\/ Accounts do not expire\r\n        return true;\r\n    }\r\n\r\n    public function isAccountNonLocked()\r\n    {\r\n        \/\/ TODO: Implement isAccountNonLocked() method.\r\n        return $this->getFailedLoginAttempts() < 3 || !$this->requestWithinLoginDelay();\r\n    }\r\n\r\n    public function isCredentialsNonExpired()\r\n    {\r\n        \/\/ Credentials do not expire\r\n        return true;\r\n    }\r\n\r\n    public function isEnabled()\r\n    {\r\n        \/\/ TODO: Implement isEnabled() method.\r\n        return true;\r\n    }\r\n\r\n    public function eraseCredentials()\r\n    {\r\n        \/\/ TODO: Implement eraseCredentials() method.\r\n    }\r\n\r\n    public function requestWithinLoginDelay() {\r\n        $loginAttemptTime = new \\DateTime();\r\n        return $loginAttemptTime->getTimeStamp() - $this->getLastLoginAttempt()->getTimeStamp() < 60;\r\n    }\r\n\r\n    public function serialize()\r\n    {\r\n        return serialize(\r\n            array(\r\n                $this->id,\r\n                $this->username,\r\n                $this->password,\r\n                $this->isActive,\r\n            )\r\n        );\r\n    }\r\n\r\n    public function unserialize($serialized)\r\n    {\r\n        list(\r\n            $this->id,\r\n            $this->username,\r\n            $this->password,\r\n            $this->isActive,\r\n            ) = unserialize($serialized);\r\n    }\r\n\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,0,null,null,null,null,null,null,1,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,5,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,5,null,null,null,null,null,null,null,5,5,5,null,null,5,null,null,null,null,null,null,0,null,null,null,null,0,0,null,null,0,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,5,null,null,null,null,null,5,null,null,null,null,null,5,null,null,null,null,null,5,null,null,null,null,null,5,null,null,null,null,null,5,null,null,0,0,null,null,null,null,0,null,0,0,0,0,null,null,null,null,null,null,null,0,0,0,0,0,0,null,null]},{"name":"src\/AppBundle\/Entity\/User\/UserRole.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 17.07.2016\r\n * Time: 22:04\r\n *\/\r\n\r\nnamespace AppBundle\\Entity\\User;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\User;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\n\r\n\/**\r\n * Class UserRole\r\n * @package AppBundle\\Entity\\User\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"UserRole\")\r\n *\/\r\nclass UserRole extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"Rolle Benutzer\";\r\n    }\r\n\r\n    \/**\r\n     * @ORM\\ManyToMany(targetEntity=\"AppBundle\\Entity\\User\", mappedBy=\"roles\")\r\n     *\/\r\n    private $users;\r\n    \/**\r\n     * Constructor\r\n     *\/\r\n    public function __construct()\r\n    {\r\n        $this->users = new \\Doctrine\\Common\\Collections\\ArrayCollection();\r\n    }\r\n\r\n    \/**\r\n     * Add user\r\n     *\r\n     * @param User $user\r\n     *\r\n     * @return UserRole\r\n     *\/\r\n    public function addUser(User $user)\r\n    {\r\n        $this->users[] = $user;\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Remove user\r\n     *\r\n     * @param User $user\r\n     *\/\r\n    public function removeUser(User $user)\r\n    {\r\n        $this->users->removeElement($user);\r\n    }\r\n\r\n    \/**\r\n     * Get users\r\n     *\r\n     * @return \\Doctrine\\Common\\Collections\\Collection\r\n     *\/\r\n    public function getUsers()\r\n    {\r\n        return $this->users;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,null,null,2,2,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,null,null,0,null,null]},{"name":"src\/AppBundle\/Entity\/UserRepository.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 06.08.2016\r\n * Time: 23:13\r\n *\/\r\n\r\nnamespace AppBundle\\Entity;\r\n\r\n\r\nuse Doctrine\\ORM\\EntityRepository;\r\nuse Symfony\\Bridge\\Doctrine\\Security\\User\\UserLoaderInterface;\r\n\r\nclass UserRepository extends EntityRepository implements UserLoaderInterface\r\n{\r\n    \/**\r\n     * @param string $username\r\n     * @return mixed\r\n     *\r\n     * Funktion f\u00fcr UserLoaderInterface\r\n     * Ein Benutzer kann sich dadurch per Benutzername oder per E-Mail anmelden\r\n     *\/\r\n    public function loadUserByUsername($username)\r\n    {\r\n        return $this->createQueryBuilder('u')\r\n            ->where('u.username = :username OR u.email = :email')\r\n            ->setParameter('username', $username)\r\n            ->setParameter('email', $username)\r\n            ->getQuery()\r\n            ->getOneOrNullResult();\r\n    }\r\n\r\n    public function findAccountManagers()\r\n    {\r\n        return $this->createQueryBuilder('u')\r\n            ->join('u.roles', 'r', 'WITH', 'r.name = :role')\r\n            ->setParameter('role', 'ROLE_ACCOUNT_MANAGER')\r\n            ->getQuery()\r\n            ->getResult();\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,5,5,5,5,5,5,null,null,null,null,1,1,1,1,1,null,null]},{"name":"src\/AppBundle\/EventListener\/AuthenticationHandler.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 31.08.2017\r\n * Time: 22:28\r\n *\/\r\n\r\nnamespace AppBundle\\EventListener;\r\n\r\n\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\r\nuse Symfony\\Component\\Routing\\RouterInterface;\r\nuse Symfony\\Component\\HttpFoundation\\Session\\Session;\r\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\TokenInterface;\r\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\Security\\Core\\SecurityContextInterface;\r\nuse Symfony\\Component\\Security\\Http\\Authentication\\AuthenticationSuccessHandlerInterface;\r\nuse Symfony\\Component\\Security\\Http\\Authentication\\AuthenticationFailureHandlerInterface;\r\nuse Doctrine\\ORM\\EntityManager;\r\nuse AppBundle\\AppFlow\\ErrorResponse;\r\nuse AppBundle\\AppFlow\\AppError;\r\nuse Twig\\Error\\Error;\r\n\r\nclass AuthenticationHandler implements AuthenticationSuccessHandlerInterface, AuthenticationFailureHandlerInterface\r\n{\r\n    private $router = null;\r\n    private $session = null;\r\n    private $em = null;\r\n\r\n    \/**\r\n     * Constructor\r\n     *\r\n     * @author    Joe Sexton <joe@webtipblog.com>\r\n     * @param    RouterInterface $router\r\n     * @param    Session $session\r\n     *\/\r\n    public function __construct(RouterInterface $router, Session $session)\r\n    {\r\n        $this->router = $router;\r\n        $this->session = $session;\r\n    }\r\n\r\n    public function setEntityManager(EntityManager $entityManager)\r\n    {\r\n        $this->em = $entityManager;\r\n    }\r\n\r\n    \/**\r\n     * onAuthenticationSuccess\r\n     *\r\n     * @author    Joe Sexton <joe@webtipblog.com>\r\n     * @param    Request $request\r\n     * @param    TokenInterface $token\r\n     * @return    JsonResponse\r\n     *\/\r\n    public function onAuthenticationSuccess(Request $request, TokenInterface $token)\r\n    {\r\n        $user = new \\stdClass();\r\n\r\n        $userLoggedIn = $token->getUser();\r\n        $userLoggedIn->setFailedLoginAttempts(0);\r\n\r\n        $this->em->persist($userLoggedIn);\r\n        $this->em->flush();\r\n\r\n\r\n        $user->id = $userLoggedIn->getId();\r\n        $user->username = $userLoggedIn->getUsername();\r\n        $user->roles = $userLoggedIn->getRoles();\r\n\r\n        return new JsonResponse($user);\r\n    }\r\n\r\n    \/**\r\n     * onAuthenticationFailure\r\n     *\r\n     * @author    Joe Sexton <joe@webtipblog.com>\r\n     * @param    Request $request\r\n     * @param    AuthenticationException $exception\r\n     * @return    Response\r\n     *\/\r\n    public function onAuthenticationFailure(Request $request, AuthenticationException $exception)\r\n    {\r\n        $response = new ErrorResponse();\r\n        $response->setStatusCode(Response::HTTP_UNAUTHORIZED);\r\n        $response->setMessage(\"Es ist ein Fehler beim Login aufgetreten\");\r\n\r\n        $user = null;\r\n\r\n        $repo = $this->em->getRepository('AppBundle:User');\r\n        $user = $repo->findOneByUsername($exception->getToken()->getUsername());\r\n\r\n        if ($user !== null) {\r\n            $loginAttemptTime = new \\DateTime();\r\n            $user->setFailedLoginAttempts($user->getFailedLoginAttempts() + 1);\r\n\r\n            if ($user->getFailedLoginAttempts() >= 3 && ($user->requestWithinLoginDelay())) {\r\n                $error = new AppError('login_error', \"Sie haben 3 Mal oder \u00f6fter das falsche Passwort eingegeben.Der n\u00e4chste Loginversuch ist erst in 1 Minute m\u00f6glich.\");\r\n                $response->addError($error);\r\n            }\r\n\r\n            $user->setLastLoginAttempt($loginAttemptTime);\r\n            $this->em->persist($user);\r\n            $this->em->flush();\r\n        }\r\n\r\n        return $response;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,7,7,7,null,null,null,7,7,null,null,null,null,null,null,null,null,null,null,null,0,null,0,0,null,0,0,null,null,0,0,0,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,0,null,0,0,null,0,0,0,null,0,0,0,null,null,0,0,0,null,null,0,null,null]},{"name":"src\/AppBundle\/EventListener\/LogoutSuccessHandler.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 07.09.2017\r\n * Time: 21:53\r\n *\/\r\n\r\nnamespace AppBundle\\EventListener;\r\n\r\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\TokenInterface;\r\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Doctrine\\ORM\\EntityManager;\r\nuse Symfony\\Component\\Security\\Http\\Logout\\LogoutSuccessHandlerInterface;\r\n\r\nclass LogoutSuccessHandler implements LogoutSuccessHandlerInterface\r\n{\r\n    \/**\r\n     * @var EntityManager\r\n     *\/\r\n    protected $em;\r\n\r\n    \/**\r\n     * Constructor\r\n     * @param EntityManager $em\r\n     *\/\r\n    public function __construct()\r\n    {\r\n\r\n    }\r\n\r\n    \/**\r\n     * Do post logout stuff\r\n     *\/\r\n    public function onLogoutSuccess(Request $request)\r\n    {\r\n        \/*\r\n        $user = $authToken->getUser();\r\n\r\n        \/\/ do stuff with the user object...\r\n        $this->em->flush();\r\n        *\/\r\n        $response = new \\stdClass();\r\n        $response->message = \"Ausgeloggt\";\r\n\r\n        return new JsonResponse($response);\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,7,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null]},{"name":"src\/AppBundle\/EventListener\/UserRoleSetter.php","source":"<?php\r\n\/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 06.08.2016\r\n * Time: 23:28\r\n *\/\r\n\r\nnamespace AppBundle\\EventListener;\r\n\r\n\r\nuse AppBundle\\Entity\\User;\r\nuse Doctrine\\Common\\Persistence\\Event\\LifecycleEventArgs;\r\n\r\nclass UserRoleSetter\r\n{\r\n    public function prePersist(LifecycleEventArgs $args) {\r\n        $obj = $args->getObject();\r\n        $om = $args->getObjectManager();\r\n\r\n        if($obj instanceof User) {\r\n            \/\/ Get role \"ROLE_USER\"\r\n            $userRole = $om->getRepository('AppBundle:User\\UserRole')->findOneBy(array('name' => 'ROLE_USER'));\r\n            if(!$obj->hasRole($userRole)) {\r\n                $obj->addRole($userRole);\r\n            }\r\n        }\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,null,1,null,0,0,0,null,null,1,null]},{"name":"src\/AppBundle\/Serializer\/ObjectConstructor.php","source":"<?php\r\n\r\nnamespace AppBundle\\Serializer;\r\n\r\nuse JMS\\Serializer\\Construction\\ObjectConstructorInterface;\r\nuse JMS\\Serializer\\DeserializationContext;\r\nuse JMS\\Serializer\\Metadata\\ClassMetadata;\r\nuse JMS\\Serializer\\VisitorInterface;\r\n\r\nclass ObjectConstructor implements ObjectConstructorInterface\r\n{\r\n    \/**\r\n     * {@inheritdoc}\r\n     *\/\r\n    public function construct(\r\n        VisitorInterface $visitor,\r\n        ClassMetadata $metadata,\r\n        $data,\r\n        array $type,\r\n        DeserializationContext $context\r\n    ) {\r\n        $className = $metadata->name;\r\n\r\n        return new $className();\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,null,null]}],"environment":{"packagist_version":"2.0.0"}}