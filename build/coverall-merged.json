{"service_name":"travis-ci","service_job_id":"12345","git":{"branch":"master","head":{"id":"6235934dd9c22e43bbdeae6bb035f737e3bbf60f","author_name":"Fuzzzzel","author_email":"the_weirdo@gmx.net","committer_name":"Fuzzzzel","committer_email":"the_weirdo@gmx.net","message":"Fix change of password, fix unit test when database is not purged"},"remotes":[{"name":"origin","url":"https://github.com/Fuzzzzel/werftnet.git"}]},"run_at":"2018-05-09 23:19:54 +0000","source_files":[{"name":"src/AppBundle/AppBundle.php","source":"<?php\r\n\r\nnamespace AppBundle;\r\n\r\nuse Symfony\\Component\\HttpKernel\\Bundle\\Bundle;\r\n\r\nclass AppBundle extends Bundle\r\n{\r\n}","coverage":[null,null,null,null,null,null,null,null,null]},{"name":"src/AppBundle/AppFlow/AppError.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 10.10.2017\r\n * Time: 22:45\r\n */\r\n\r\nnamespace AppBundle\\AppFlow;\r\n\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\nclass AppError\r\n{\r\n\r\n    /**\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\"})\r\n     */\r\n    protected $type;\r\n\r\n    /**\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\"})\r\n     */\r\n    protected $message;\r\n\r\n    function __construct($type, $message)\r\n    {\r\n        $this->setType($type);\r\n        $this->setMessage($message);\r\n    }\r\n\r\n    function setType($type)\r\n    {\r\n        $this->type = $type;\r\n    }\r\n\r\n    function getType()\r\n    {\r\n        return $this->type;\r\n    }\r\n\r\n    function setMessage($message)\r\n    {\r\n        $this->message = $message;\r\n    }\r\n\r\n    function getMessage()\r\n    {\r\n        return $this->message;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,null,0,0,0,null,null,0,0,0,null,null,0,0,0,null,null,0,0,0,null]},{"name":"src/AppBundle/AppFlow/ErrorResponse.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 10.10.2017\r\n * Time: 22:56\r\n */\r\n\r\nnamespace AppBundle\\AppFlow;\r\n\r\n\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\nuse JMS\\Serializer\\SerializerBuilder;\r\nuse JMS\\Serializer\\SerializationContext;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\nclass ErrorResponse extends Response\r\n{\r\n    /**\r\n     * @JMS\\Type(\"stdClass\")\r\n     * @JMS\\Groups({\"display\"})\r\n     */\r\n    protected $data;\r\n\r\n    /**\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\"})\r\n     */\r\n    protected $message;\r\n\r\n    /**\r\n     * @JMS\\Type(\"array<AppBundle\\AppFlow\\AppError>\")\r\n     * @JMS\\Groups({\"display\"})\r\n     */\r\n    protected $errors;\r\n\r\n    public function __construct()\r\n    {\r\n        parent::__construct();\r\n        $this->data = new \\stdClass();\r\n        $this->message = \"\";\r\n        $this->errors = array();\r\n    }\r\n\r\n    public function addError(AppError $error) {\r\n        $this->errors[] = $error;\r\n        $this->updateContent();\r\n    }\r\n\r\n    public function getErrors() {\r\n        return $this->errors;\r\n    }\r\n\r\n    public function setData(\\stdClass $data) {\r\n        $this->data = $data;\r\n        $this->updateContent();\r\n    }\r\n\r\n    public function getData() {\r\n        return $this->data;\r\n    }\r\n\r\n    public function getMessage() {\r\n        return $this->message;\r\n    }\r\n\r\n    public function setMessage($message) {\r\n        $this->message = $message;\r\n        $this->updateContent();\r\n    }\r\n\r\n    public function updateContent() {\r\n        $serializer = SerializerBuilder::create()->build();\r\n        $content = $serializer->serialize($this, 'json', SerializationContext::create()->setGroups(['display']));\r\n        $this->setContent($content);\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,null,0,0,0,null,null,0,0,null,null,0,0,0,null,null,0,0,null,null,0,0,null,null,0,0,0,null,null,0,0,0,0,null]},{"name":"src/AppBundle/Controller/Admin/AdminStuffController.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 06.08.2016\r\n * Time: 22:48\r\n */\r\n\r\nnamespace AppBundle\\Controller\\Admin;\r\n\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\r\nuse AppBundle\\Entity\\Freelancer;\r\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\n\r\nclass AdminStuffController extends Controller\r\n{\r\n\r\n    /**\r\n     * @Route(\"admin/test\", name=\"admin/test\")\r\n     */\r\n    function adminTest() {\r\n        return new Response(\"Seite konnte aufgerufen werden\");\r\n    }\r\n\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null]},{"name":"src/AppBundle/Controller/Admin/SimpleEntityController.php","source":"<?php\r\n/**\r\n * Hinzufügen, Ändern und Löschen eines Objekts, welches\r\n * von SimpleEntity erbt\r\n */\r\n\r\nnamespace AppBundle\\Controller\\Admin;\r\n\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Method;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\nuse Doctrine\\Common\\Util\\Inflector as Inflector;\r\nuse AppBundle\\Entity\\QueryHelper;\r\n\r\nclass SimpleEntityController extends Controller\r\n{\r\n    /**\r\n     * @param $entityName\r\n     * @return \\stdClass\r\n     *\r\n     * !! Duplicated in DefualtsController --> Move to service?!\r\n     */\r\n    public function getSimpleEntity($entityName)\r\n    {\r\n        $simpleEntities = new \\stdClass;\r\n        $classname = \"\\\\AppBundle\\\\Entity\\\\\" . $entityName;\r\n\r\n        $simpleEntities->values = $this->getDoctrine()\r\n            ->getRepository($classname)\r\n            ->findBy(\r\n                array(),\r\n                array('name' => 'ASC')\r\n            );\r\n\r\n        $simpleObj = new $classname();\r\n        $simpleEntities->display_name = $simpleObj->getDisplayName();\r\n\r\n\r\n        return $simpleEntities;\r\n    }\r\n\r\n    /**\r\n     * @param $entityName\r\n     * @return object\r\n     * @Method(\"GET\")\r\n     * @Route(\"/admin/simple_entity/{entityName}\", name=\"fetchSimpleEntity\")\r\n     */\r\n    public function fetchSimpleEntity($entityName)\r\n    {\r\n        $entityName = QueryHelper::getFullEntityName($entityName);\r\n        $result = $this->getSimpleEntity($entityName);\r\n        return new JsonResponse($result);\r\n    }\r\n\r\n\r\n    /**\r\n     * @param String $entityName\r\n     * @param Request $request\r\n     * @return object\r\n     * @Method(\"POST\")\r\n     * @Route(\"/admin/simple_entity/{entityName}\", name=\"createSimpleEntityItem\")\r\n     */\r\n    public function createSimpleEntityItem($entityName, Request $request)\r\n    {\r\n        $params = array();\r\n        $content = $request->getContent();\r\n        if (!empty($content)) {\r\n            $params = json_decode($content);\r\n        }\r\n\r\n        $newItemName = $params->newItemName;\r\n        $entityName = QueryHelper::getFullEntityName($entityName);\r\n\r\n        $classname = \"\\\\AppBundle\\\\Entity\\\\\" . $entityName;\r\n        $newItem = new $classname();\r\n        $newItem->setName($newItemName);\r\n\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        // Prüfen ob bereits ein Objekt mit diesem Namen existiert\r\n        $exists = $em->getRepository($classname)->findOneBy(\r\n            array('name' => $newItemName)\r\n        );\r\n\r\n        // Falls ja, nicht hinzufügen\r\n        if (($exists != null) && ($newItemName != \"\")) {\r\n            return null;\r\n        }\r\n\r\n        $em->persist($newItem);\r\n        $em->flush();\r\n\r\n        return new JsonResponse($newItem);\r\n    }\r\n\r\n    /**\r\n     * @param String $entityName\r\n     * @param Integer $id\r\n     * @param Request $request\r\n     * @return null\r\n     * @Method(\"DELETE\")\r\n     * @Route(\"/admin/simple_entity/{entityName}/{id}\", name=\"deleteSimpleEntityItem\")\r\n     */\r\n    function deleteSimpleEntityItem($entityName, $id, Request $request)\r\n    {\r\n        $params = array();\r\n        $content = $request->getContent();\r\n        if (!empty($content)) {\r\n            $params = json_decode($content);\r\n        }\r\n\r\n        $entityName = QueryHelper::getFullEntityName($entityName);\r\n        $classname = \"\\\\AppBundle\\\\Entity\\\\\" . $entityName;\r\n\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        // Prüfen ob bereits ein Objekt mit diesem Namen existiert\r\n        $entityToRemove = $em->getRepository($classname)->findOneBy(\r\n            array('id' => $id)\r\n        );\r\n\r\n        // Falls ja, nicht hinzufügen\r\n        if ($entityToRemove == null) {\r\n            return null;\r\n        }\r\n\r\n        // Falls nein, der Datenbank hinzufügen und mit id zurückgeben\r\n        $em->remove($entityToRemove);\r\n        $em->flush();\r\n\r\n        return new JsonResponse();\r\n    }\r\n\r\n    /**\r\n     * @param String $entityName\r\n     * @param Integer $id\r\n     * @param Request $request\r\n     * @return null\r\n     * @Method(\"POST\")\r\n     * @Route(\"admin/simple_entity/{entityName}/{id}\", name=\"updateSimpleEntityItem\")\r\n     */\r\n    function updateSimpleEntityItem($entityName, $id, Request $request)\r\n    {\r\n        // $entity, $editedItemName\r\n        $params = array();\r\n        $content = $request->getContent();\r\n        if (!empty($content)) {\r\n            $params = json_decode($content);\r\n        }\r\n\r\n        $editedItemName = $params->itemEditedName;\r\n\r\n        $entityName = QueryHelper::getFullEntityName($entityName);\r\n        $classname = \"\\\\AppBundle\\\\Entity\\\\\" . $entityName;\r\n\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        // Prüfen ob Objekt existiert\r\n        $entityToUpdate = $em->getRepository($classname)->findOneBy(\r\n            array('id' => $id)\r\n        );\r\n\r\n        // Falls nein, nicht aktualisieren\r\n        if ($entityToUpdate == null) {\r\n            return null;\r\n        }\r\n\r\n        // Prüfen ob bereits ein Objekt mit diesem Namen existiert\r\n        $exists = $em->getRepository($classname)->findOneBy(\r\n            array('name' => $editedItemName)\r\n        );\r\n\r\n        // Falls ja, nicht hinzufügen\r\n        if (($exists != null) && ($editedItemName != \"\")) {\r\n            return null;\r\n        }\r\n\r\n        // Falls ja, Objekt aktualisieren\r\n        $entityToUpdate->setName($editedItemName);\r\n        $em->flush();\r\n\r\n        return new JsonResponse();\r\n    }\r\n\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,0,0,0,0,0,0,null,0,0,null,null,0,0,null,null,null,null,null,null,null,null,0,0,0,0,0,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,0,null,0,0,0,null,0,null,null,0,0,0,null,null,0,0,0,null,0,0,null,0,0,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,0,null,0,null,null,0,0,0,null,null,0,0,0,null,null,0,0,null,0,0,null,null,null,null,null,null,null,null,null,null,0,null,0,0,0,0,0,null,0,null,0,0,null,0,null,null,0,0,0,null,null,0,0,0,null,null,0,0,0,null,null,0,0,0,null,null,0,0,null,0,0,null,null]},{"name":"src/AppBundle/Controller/Admin/TwoLevelEntityController.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 06.08.2017\r\n * Time: 23:20\r\n */\r\n\r\nnamespace AppBundle\\Controller\\Admin;\r\n\r\nuse AppBundle\\Entity\\QueryHelper;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Method;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\n\r\nclass TwoLevelEntityController extends Controller\r\n{\r\n    /**\r\n     * @param $entityName\r\n     * @return \\stdClass\r\n     *\r\n     * !! Duplicated in DefaultsController --> Move to service?!\r\n     */\r\n    public function getTwoLevelEntity($entityName)\r\n    {\r\n        $items = new \\stdClass;\r\n        $itemsTemp = array();\r\n        $classname = \"AppBundle\\\\Entity\\\\\" . $entityName;\r\n\r\n        $repo = $this->getDoctrine()\r\n            ->getRepository($classname);\r\n        $itemsFromDb = $repo->findAllItems();\r\n\r\n        // Subsprachen den Hauptsprachen zuordnen\r\n        foreach ($itemsFromDb as $lang) {\r\n            $itemObj = new \\stdClass();\r\n            $itemObj->id = $lang->getId();\r\n            $itemObj->name = $lang->getName();\r\n\r\n            if ($lang->isMainItem()) {\r\n                // Add main language to result array\r\n                $itemsTemp[$lang->getId()] = $itemObj;\r\n            } else {\r\n                // Add sub language to main\r\n                $itemsTemp[$lang->getMainItem()->getId()]->sub_items[] = $itemObj;\r\n            }\r\n        }\r\n\r\n        $dummyItem = new $classname();\r\n        $items->display_name = $dummyItem->getDisplayName();\r\n        foreach ($itemsTemp as $completeItem) {\r\n            $items->values[] = $completeItem;\r\n        }\r\n\r\n        return $items;\r\n    }\r\n\r\n    /**\r\n     * @param $entityName\r\n     * @return object\r\n     * @Method(\"GET\")\r\n     * @Route(\"/admin/two_level_entity/{entityName}\", name=\"fetchTwoLevelEntity\")\r\n     */\r\n    public function fetchTwoLevelEntityEntity($entityName)\r\n    {\r\n        $entityName = QueryHelper::getFullEntityName($entityName);\r\n        $result = $this->getTwoLevelEntity($entityName);\r\n        return new JsonResponse($result);\r\n    }\r\n\r\n    /**\r\n     * @param $entityName\r\n     * @return object\r\n     * @Method(\"POST\")\r\n     * @Route(\"/admin/two_level_entity/{entityName}\", name=\"createTwoLevelEntityMainItem\")\r\n     */\r\n    public function createTwoLevelEntityMainItem($entityName, Request $request)\r\n    {\r\n        return $this->createTwoLevelEntityItem($entityName, null, $request);\r\n    }\r\n\r\n    /**\r\n     * Neues Item hinzufügen. Falls neues Subitem, wird die Id des\r\n     * zugehörigen Hauptitems übergeben.\r\n     *\r\n     * @param String $newItemName Name des neuen Items\r\n     * @return JsonResponse\r\n     * @Method(\"POST\")\r\n     * @Route(\"/admin/two_level_entity/{entityName}/{mainItemId}/sub_items\", name=\"createTwoLevelEntityItem\")\r\n     */\r\n    public function createTwoLevelEntityItem($entityName, $mainItemId = null, Request $request)\r\n    {\r\n        $params = array();\r\n        $content = $request->getContent();\r\n        if (!empty($content)) {\r\n            $params = json_decode($content);\r\n        }\r\n\r\n        $entityName = QueryHelper::getFullEntityName($entityName);\r\n        $newItemName = $params->newItemName;\r\n\r\n        $fullEntityName = \"AppBundle\\\\Entity\\\\\" . $entityName;\r\n\r\n        $newItem = new $fullEntityName();\r\n        $newItem->setName($newItemName);\r\n\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        $repo = $em->getRepository(\"AppBundle\\\\Entity\\\\\" . $entityName);\r\n\r\n        // Prüfen ob bereits ein Objekt mit diesem Namen existiert\r\n        $exists = $repo->findOneBy(\r\n            array('name' => $newItemName)\r\n        );\r\n\r\n        // Falls ja, nicht hinzufügen\r\n        if (($exists !== null) && ($newItemName != \"\")) {\r\n            // ToDo: Fehlermeldung zurückgeben\r\n            return new JsonResponse(\"Die Bezeichnung existiert schon oder die Bezeichnung ist leer!\");\r\n        }\r\n\r\n        // Falls neues Subitem\r\n        // Hauptitem zum neuen Subitem suchen\r\n        if ($mainItemId != null) {\r\n            $itemMain = $repo->findOneBy(\r\n                array('id' => $mainItemId));\r\n        } else {\r\n            $itemMain = null;\r\n        }\r\n\r\n        if ($itemMain !== null) {\r\n            $newItem->setMainItem($itemMain);\r\n        }\r\n\r\n        $em->persist($newItem);\r\n        $em->flush();\r\n\r\n        return new JsonResponse($newItem);\r\n    }\r\n\r\n\r\n    /**\r\n     * Item wird gelöscht, wenn es sich um ein Subitem handelt oder\r\n     * wenn es sich um ein Hauptitem ohne Subitems handelt\r\n     *\r\n     * @param Request $request\r\n     * @return JsonResponse\r\n     * @Method(\"DELETE\")\r\n     * @Route(\"/admin/two_level_entity/{entityName}/{mainItemId}/sub_items/{subItemId}\", name=\"deleteTwoLevelEntitySubItem\")\r\n     */\r\n    function deleteTwoLevelEntitySubItem($entityName, $mainItemId, $subItemId, Request $request)\r\n    {\r\n        return $this->deleteTwoLevelEntityItem($entityName, $subItemId, $request);\r\n    }\r\n\r\n    /**\r\n     * Item wird gelöscht, wenn es sich um ein Subitem handelt oder\r\n     * wenn es sich um ein Hauptitem ohne Subitems handelt\r\n     *\r\n     * @param Request $request\r\n     * @return JsonResponse\r\n     * @Method(\"DELETE\")\r\n     * @Route(\"/admin/two_level_entity/{entityName}/{removeItemId}\", name=\"deleteTwoLevelEntityItem\")\r\n     */\r\n    function deleteTwoLevelEntityItem($entityName, $removeItemId, Request $request)\r\n    {\r\n        $entityName = QueryHelper::getFullEntityName($entityName);\r\n\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        // Prüfen ob bereits ein Objekt mit diesem Namen existiert\r\n        $repo = $em->getRepository(\"AppBundle\\\\Entity\\\\\" . $entityName);\r\n        $entityToRemove = $repo->findOneBy(\r\n            array('id' => $removeItemId)\r\n        );\r\n\r\n        // Falls nicht gefunden oder Hauptsprache mit Subsprachen abbrechen\r\n        if ($entityToRemove == null) {\r\n            // ToDo: Fehlermeldung zurückgeben\r\n            return new JsonResponse();\r\n        }\r\n\r\n        $subItems = $repo->findAllSubItems($removeItemId);\r\n        if (empty($subItems)) {\r\n            // Falls keine SubItems vorhanden, entfernen\r\n            $em->remove($entityToRemove);\r\n            $em->flush();\r\n        } else {\r\n            // ToDo: Fehlermeldung zurückgeben\r\n            return new JsonResponse();\r\n        }\r\n\r\n        return new JsonResponse();\r\n    }\r\n\r\n    /**\r\n     * Name des Items ändern\r\n     *\r\n     * @param Request $request\r\n     * @return JsonResponse\r\n     * @Method(\"POST\")\r\n     * @Route(\"/admin/two_level_entity/{entityName}/{mainItemId}/sub_items/{subItemId}\", name=\"updateTwoLevelEntitySubItem\")\r\n     */\r\n    function updateTwoLevelEntitySubItem($entityName, $mainItemId, $subItemId, Request $request)\r\n    {\r\n        return $this->updateTwoLevelEntityItem($entityName, $subItemId, $request);\r\n    }\r\n\r\n    /**\r\n     * Name des Items ändern\r\n     *\r\n     * @param Request $request\r\n     * @return JsonResponse\r\n     * @Method(\"POST\")\r\n     * @Route(\"/admin/two_level_entity/{entityName}/{itemId}\", name=\"updateTwoLevelEntityItem\")\r\n     */\r\n    function updateTwoLevelEntityItem($entityName, $itemId, Request $request)\r\n    {\r\n        $params = array();\r\n        $content = $request->getContent();\r\n        if (!empty($content)) {\r\n            $params = json_decode($content);\r\n        }\r\n\r\n        $entityName = QueryHelper::getFullEntityName($entityName);\r\n        $editedEntityName = $params->itemNewName;\r\n\r\n        $classname = \"\\\\AppBundle\\\\Entity\\\\\" . $entityName;\r\n\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        // Prüfen ob Objekt existiert\r\n        $entityToUpdate = $em->getRepository($classname)->findOneBy(\r\n            array('id' => $itemId)\r\n        );\r\n\r\n        // Falls nein, nicht aktualisieren\r\n        if ($entityToUpdate == null) {\r\n            return null;\r\n        }\r\n\r\n        // Prüfen ob bereits ein Objekt mit diesem Namen existiert\r\n        $exists = $em->getRepository($classname)->findOneBy(\r\n            array('name' => $editedEntityName)\r\n        );\r\n\r\n        // Falls ja, nicht hinzufügen\r\n        if (($exists != null) && ($editedEntityName != \"\")) {\r\n            return null;\r\n        }\r\n\r\n        // Falls ja, Objekt aktualisieren\r\n        $entityToUpdate->setName($editedEntityName);\r\n        $em->flush();\r\n\r\n        return new JsonResponse();\r\n    }\r\n\r\n\r\n    /**\r\n     * Item zu Hauptitem machen\r\n     *\r\n     * @param Request $request\r\n     * @return JsonResponse\r\n     * @Route(\"admin/makeMainItem\", name=\"makeMainItem\")\r\n     */\r\n    function makeMainItem(Request $request)\r\n    {\r\n        // $entity, $editedItemName\r\n        if ($request->getMethod() != 'POST') {\r\n            return null;\r\n        }\r\n\r\n        $params = array();\r\n        $content = $request->getContent();\r\n        if (!empty($content)) {\r\n            $params = json_decode($content);\r\n        }\r\n\r\n        $entityName = $params->entityName;\r\n        $itemId = $params->itemId;\r\n\r\n        $classname = \"\\\\AppBundle\\\\Entity\\\\\" . $entityName;\r\n\r\n        $em = $this->getDoctrine()->getManager();\r\n        $repo = $em->getRepository($classname);\r\n\r\n        // Prüfen ob Objekt existiert\r\n        $item = $repo->findOneBy(\r\n            array('id' => $itemId)\r\n        );\r\n\r\n        // Falls nein, Fehlermeldung ausgeben\r\n        if ($item == null) {\r\n            // ToDo: Fehlermeldung, wenn zu löschende Sprache nicht gefunden\r\n            return new JsonResponse();\r\n        }\r\n\r\n        // Falls ja, Objekt aktualisieren\r\n        $item->setMainItem(null);\r\n        $em->flush();\r\n\r\n        return new JsonResponse();\r\n    }\r\n\r\n    /**\r\n     * Sprache zur Subsprache machen, falls es sich nicht um eine\r\n     * Hauptsprache handelt, die bereits eigene Subsprachen hat.\r\n     *\r\n     * @param Request $request\r\n     * @return JsonResponse\r\n     * @Route(\"admin/addAsSubItem\", name=\"addAsSubItem\")\r\n     */\r\n    function addAsSubItem(Request $request)\r\n    {\r\n        // $entity, $editedItemName\r\n        if ($request->getMethod() != 'POST') {\r\n            return null;\r\n        }\r\n\r\n        $params = array();\r\n        $content = $request->getContent();\r\n        if (!empty($content)) {\r\n            $params = json_decode($content);\r\n        }\r\n\r\n        $entityName = $params->entityName;\r\n        $itemId = $params->itemId;\r\n        $itemMainId = $params->itemMainId;\r\n\r\n        $classname = \"\\\\AppBundle\\\\Entity\\\\\" . $entityName;\r\n\r\n        $em = $this->getDoctrine()->getManager();\r\n        $repo = $em->getRepository($classname);\r\n\r\n        // Prüfen ob Objekt existiert\r\n        $item = $repo->findOneBy(\r\n            array('id' => $itemId)\r\n        );\r\n\r\n        $itemMain = $repo->findOneBy(\r\n            array('id' => $itemMainId)\r\n        );\r\n\r\n        // Falls Sprache nicht existiert, nicht aktualisieren\r\n        if ($item == null || $itemMain == null) {\r\n            // ToDo: Fehlermeldung, dass Sprache nicht gefunden\r\n            return new JsonResponse();\r\n        }\r\n\r\n        // Falls Sprache nicht existiert, nicht aktualisieren\r\n        if ($item == $itemMain) {\r\n            // ToDo: Fehlermeldung, dass Sprache nicht Subsprache von sich selbst sein darf.\r\n            return new JsonResponse();\r\n        }\r\n\r\n        $subItems = $repo->findAllSubItems($itemId);\r\n\r\n        if (empty($subItems)) {\r\n            // Falls ja, Objekt aktualisieren\r\n            $item->setMainItem($itemMain);\r\n            $em->flush();\r\n        }\r\n\r\n        return new JsonResponse();\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,0,0,null,null,0,0,0,0,null,0,null,0,0,null,0,0,0,null,0,0,0,0,0,null,0,0,null,null,null,null,null,null,null,null,0,0,0,0,0,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,0,null,0,null,0,0,null,0,null,0,null,null,0,0,0,null,null,0,null,0,0,null,null,null,0,0,0,0,0,0,null,0,0,0,null,0,0,null,0,0,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null,0,0,0,0,null,null,0,null,0,0,null,0,0,null,0,0,0,null,0,0,null,0,0,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,0,null,0,null,0,null,null,0,0,0,null,null,0,0,0,null,null,0,0,0,null,null,0,0,0,null,null,0,0,null,0,0,null,null,null,null,null,null,null,null,null,null,0,null,0,0,0,null,0,0,0,0,0,null,0,0,null,0,null,0,0,null,null,0,0,0,null,null,0,null,0,0,null,null,0,0,null,0,0,null,null,null,null,null,null,null,null,null,null,0,null,0,0,0,null,0,0,0,0,0,null,0,0,0,null,0,null,0,0,null,null,0,0,0,null,0,0,0,null,null,0,null,0,0,null,null,0,null,0,0,null,0,null,0,null,0,0,0,null,0,0,null]},{"name":"src/AppBundle/Controller/Admin/UserAdminController.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 16.07.2016\r\n * Time: 19:32\r\n */\r\n\r\nnamespace AppBundle\\Controller\\Admin;\r\n\r\nuse AppBundle\\AppFlow\\ErrorResponse;\r\nuse AppBundle\\AppFlow\\AppError;\r\nuse JMS\\Serializer\\DeserializationContext;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Method;\r\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\nuse AppBundle\\Entity\\User;\r\nuse JMS\\Serializer\\SerializerBuilder;\r\nuse JMS\\Serializer\\SerializationContext;\r\n\r\n/**\r\n * Class DefaultsController\r\n * @package AppBundle\\Controller\r\n *\r\n */\r\nclass UserAdminController extends Controller\r\n{\r\n\r\n    /**\r\n     * Anlegen eines neuen Users\r\n     * Benötigt: username, password (, email noch nicht)\r\n     *\r\n     * @Method(\"POST\")\r\n     * @Route(\"/admin/users\", name=\"addUser\")\r\n     */\r\n    public function addUser(Request $request)\r\n    {\r\n        if ($request->getMethod() != 'POST') {\r\n            return null;\r\n        }\r\n\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        // Daten aus Request in Objekte überführen\r\n        $content = $request->getContent();\r\n\r\n        $serializer = $this->get('jms_serializer');\r\n\r\n\r\n        $newUser = $serializer->deserialize(\r\n            $content,\r\n            'AppBundle\\Entity\\User',\r\n            'json',\r\n            DeserializationContext::create()->setGroups(array('create'))\r\n        );\r\n\r\n\r\n        $usernameExists = $this->getDoctrine()->getRepository('AppBundle\\Entity\\User')->findOneBy(array('username' => $newUser->getUsername()));\r\n        if ($usernameExists !== null) {\r\n            $response = new \\stdClass();\r\n            $response->error = 'Benutzername existiert schon!';\r\n            return new JsonResponse($response);\r\n        }\r\n\r\n        if (strlen($newUser->getPassword()) < 4) {\r\n            $response = new \\stdClass();\r\n            $response->error = 'Passwort ist zu kurz (min. 4 Zeichen)!';\r\n            return new JsonResponse($response);\r\n        }\r\n\r\n\r\n        if (\r\n            ($newUser->getUsername() != \"\" && $newUser->getUsername() != null) &&\r\n            ($newUser->getPassword() != \"\" && $newUser->getPassword() != null)\r\n        ) {\r\n            $encoder = $this->container->get('security.password_encoder');\r\n            $encoded = $encoder->encodePassword($newUser, $newUser->getPassword());\r\n            $newUser->setPassword($encoded);\r\n\r\n            $em->persist($newUser);\r\n            $em->flush();\r\n\r\n            $response = $serializer->serialize(\r\n                $newUser,\r\n                'json',\r\n                SerializationContext::create()->setGroups(['display'])\r\n            );\r\n\r\n            return new Response($response);\r\n        }\r\n\r\n        $response = new \\stdClass();\r\n        $response->error = \"User konnte nicht angelegt werden\";\r\n        return new JsonResponse($response);\r\n    }\r\n\r\n\r\n    /**\r\n     * Ändern der Daten eines users\r\n     *\r\n     * @Method(\"POST\")\r\n     * @Route(\"/admin/users/{id}\", name=\"editUser\")\r\n     */\r\n    public\r\n    function editUser($id, Request $request)\r\n    {\r\n\r\n        // Daten aus Request in Objekte überführen\r\n        $content = $request->getContent();\r\n\r\n        $serializer = $this->get('jms_serializer');\r\n        $user = $serializer->deserialize(\r\n            $content,\r\n            'AppBundle\\Entity\\User',\r\n            'json',\r\n            DeserializationContext::create()->setGroups(array('update'))\r\n        );\r\n\r\n        if($user->getId() != $id) {\r\n            return new Response('Id von User stimmt nicht mit Route überein!', Response::HTTP_BAD_REQUEST);\r\n        }\r\n\r\n        // EntityManager laden\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        $em->persist($user);\r\n        $em->flush();\r\n\r\n        $serializer = SerializerBuilder::create()->build();\r\n        $response = $serializer->serialize($user, 'json', SerializationContext::create()->setGroups(['display']));\r\n\r\n        return new Response($response);\r\n    }\r\n\r\n\r\n    /**\r\n     * Löschen eines Users anhand der ID\r\n     *\r\n     * @Route(\"/admin/deleteUser\", name=\"deleteUser\")\r\n     */\r\n    public\r\n    function deleteUser(Request $request)\r\n    {\r\n        if ($request->getMethod() != 'POST') {\r\n            return null;\r\n        }\r\n\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        // Daten aus Request in Objekte überführen\r\n        $content = $request->getContent();\r\n\r\n        $params = null;\r\n\r\n        if (!empty($content)) {\r\n            $params = json_decode($content, true); // 2nd param to get as array\r\n        }\r\n\r\n        if (isset($params['user_id'])) {\r\n            $user = $this->getDoctrine()->getRepository('AppBundle\\Entity\\User')->find($params['user_id']);\r\n\r\n            if ($user != null) {\r\n                $em->remove($user);\r\n                $em->flush();\r\n\r\n                return new Response(\"User wurde gelöscht\");\r\n            }\r\n        }\r\n\r\n        return new Response(\"User wurde nicht gelöscht\");\r\n    }\r\n\r\n\r\n    /**\r\n     * Alle user ausgeben\r\n     *\r\n     * @Method(\"GET\")\r\n     * @Route(\"/admin/users/{id}\", name=\"getAllUsers\")\r\n     */\r\n    public\r\n    function getAllUsers($id = null, Request $request)\r\n    {\r\n\r\n        if ($id === null) {\r\n            $users = $this->getDoctrine()->getRepository('AppBundle\\Entity\\User')->findAll();\r\n        } else {\r\n            $users = $this->getDoctrine()->getRepository('AppBundle\\Entity\\User')->findBy(\r\n                array(\r\n                    'id' => $id\r\n                ),\r\n                array(\r\n                    'username' => 'ASC'\r\n                )\r\n            );\r\n        }\r\n\r\n        $serializer = SerializerBuilder::create()->build();\r\n        $response = $serializer->serialize(\r\n            $users,\r\n            'json',\r\n            SerializationContext::create()->setGroups(['display'])\r\n        );\r\n\r\n        return new Response($response);\r\n    }\r\n\r\n    /**\r\n     * Ändern des Passwort eines Users anhand der ID\r\n     *\r\n     * @Method(\"POST\")\r\n     * @Route(\"/admin/users/{id}/password\", name=\"changeUserPwdAdmin\")\r\n     */\r\n    public\r\n    function changeUserPwd($id, Request $request)\r\n    {\r\n        $response = new JsonResponse();\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        // Daten aus Request in Objekte überführen\r\n        $content = $request->getContent();\r\n\r\n        $params = null;\r\n\r\n        if (!empty($content)) {\r\n            $pwdNew = $content; // 2nd param to get as array\r\n        }\r\n\r\n        if ($id > 0 && strlen($pwdNew) > 0) {\r\n\r\n            if (strlen($pwdNew) < 4) {\r\n                $response->setContent('Passwort ist zu kurz (min. 4 Zeichen)!');\r\n                $response->setStatusCode(Response::HTTP_BAD_REQUEST);\r\n                return $response;\r\n            }\r\n\r\n            $user = $this->getDoctrine()->getRepository('AppBundle\\Entity\\User')->find($id);\r\n\r\n            if ($user != null) {\r\n                $factory = $this->get('security.encoder_factory');\r\n                $encoder = $factory->getEncoder($user);\r\n\r\n                $encoded = $encoder->encodePassword($pwdNew, $user->getSalt());\r\n                $user->setPassword($encoded);\r\n\r\n                $em->persist($user);\r\n                $em->flush();\r\n\r\n                $response->setStatusCode(Response::HTTP_OK);\r\n                return $response;\r\n            }\r\n        }\r\n\r\n        return $response;\r\n    }\r\n\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,null,null,0,null,0,null,null,0,0,0,0,0,0,null,null,0,0,0,0,0,0,null,0,0,0,0,0,null,null,0,0,0,0,0,0,0,null,0,0,null,0,0,0,0,0,null,0,0,null,0,0,0,0,null,null,null,null,null,null,null,null,0,null,0,null,null,0,null,0,0,0,0,0,0,0,null,0,0,0,null,null,0,null,0,0,null,0,0,null,0,0,null,null,null,null,null,null,null,0,null,0,0,0,0,null,0,null,null,0,null,0,null,0,0,0,null,0,0,null,0,0,0,null,0,0,0,null,0,0,null,null,null,null,null,null,null,null,0,null,0,null,0,0,0,0,0,0,0,0,0,0,0,0,null,0,0,0,0,0,0,null,0,0,null,null,null,null,null,null,null,0,null,0,0,0,null,null,0,null,0,null,0,0,0,null,0,null,0,0,0,0,0,null,0,null,0,0,0,null,0,0,null,0,0,null,0,0,0,0,null,0,0,null,null]},{"name":"src/AppBundle/Controller/AuthenticatinController.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 31.08.2017\r\n * Time: 20:21\r\n */\r\n\r\nnamespace AppBundle\\Controller;\r\n\r\n\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\r\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\r\n\r\nclass AuthenticatinController extends Controller\r\n{\r\n    // login user\r\n    // logout user\r\n    // Ask for logged in user (in session)\r\n    // update own profile - later\r\n\r\n    /**\r\n     * @Route(\"/login_check\", name=\"security_login_check\")\r\n     */\r\n    public function loginCheckAction()\r\n    {\r\n        // will never be executed\r\n        $i = 1;\r\n    }\r\n\r\n    /**\r\n     * @Route(\"/logout\", name=\"security_logout\")\r\n     */\r\n    public function logoutAction()\r\n    {\r\n        // will never be executed\r\n        $i = 1;\r\n    }\r\n\r\n    /**\r\n     * @Route(\"/get_logged_in_user\", name=\"security_get_logged_in_user\")\r\n     */\r\n    public function getLoggedInUserAction()\r\n    {\r\n\r\n        $user = $this->get('security.token_storage')->getToken()->getUser();\r\n        $auth_checker = $this->get('security.authorization_checker');\r\n\r\n        $response = new \\stdClass();\r\n\r\n        if ($auth_checker->isGranted('IS_AUTHENTICATED_REMEMBERED')) {\r\n            $response->id = $user->getId();\r\n            $response->username = $user->getUsername();\r\n            $roles = $user->getRoles();\r\n            $response->roles = array();\r\n            foreach ($roles as $role) {\r\n                $response->roles[] = $role;\r\n            }\r\n        }\r\n\r\n        return new JsonResponse($response);\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,0,null,null,null,null,null,0,null,0,0,null,null,null,null,null,0,null,0,0,null,0,null,0,0,0,0,0,0,0,0,0,null,0,0,null]},{"name":"src/AppBundle/Controller/CustomerController.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 04.09.2016\r\n * Time: 19:49\r\n */\r\n\r\nnamespace AppBundle\\Controller;\r\n\r\n\r\nuse Doctrine\\ORM\\EntityManager;\r\nuse Doctrine\\ORM\\EntityNotFoundException;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Method;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\nuse JMS\\Serializer\\SerializationContext;\r\nuse JMS\\Serializer\\DeserializationContext;\r\nuse JMS\\Serializer\\SerializerBuilder;\r\nuse AppBundle\\Entity\\Customer;\r\nuse AppBundle\\Entity\\QueryHelper;\r\nuse Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\r\n\r\n/**\r\n * Class CustomerController\r\n * @package AppBundle\\Controller\r\n *\r\n */\r\nclass CustomerController extends Controller\r\n{\r\n    /**\r\n     * @param Request $request\r\n     * @return null\r\n     * @throws EntityNotFoundException\r\n     *\r\n     * @Route(\"/customer/editCustomer\", name=\"editCustomer\")\r\n     */\r\n    public function editCustomer(Request $request)\r\n    {\r\n        // $entity, $name\r\n        if ($request->getMethod() != 'POST') {\r\n            return null;\r\n        }\r\n\r\n        // Daten aus Request in Objekte überführen\r\n        $content = $request->getContent();\r\n\r\n        $serializer = $this->get('jms_serializer');\r\n        $cust = $serializer->deserialize(\r\n            $content,\r\n            'AppBundle\\Entity\\Customer',\r\n            'json',\r\n            DeserializationContext::create()->setGroups(array('update'))\r\n        );\r\n\r\n        // EntityManager laden\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        if ($cust->getId() == null) {\r\n            $cust->setCreatedAt(new \\DateTime());\r\n        }\r\n\r\n        // --------------------------------------------\r\n        // Test für den Persist-Listener eines Kunden\r\n        // --------------------------------------------\r\n        $address = $cust->getAddress();\r\n        if ($address->getId() == null) {\r\n            $address->setCustomer($cust);\r\n            $em->persist($address);\r\n        }\r\n\r\n        $em->persist($cust);\r\n        $em->flush();\r\n\r\n        $serializer = SerializerBuilder::create()->build();\r\n        $response = $serializer->serialize($cust, 'json', SerializationContext::create()->setGroups(['display']));\r\n\r\n        return new Response($response);\r\n    }\r\n\r\n\r\n    /**\r\n     * @return Response\r\n     *\r\n     * @Route(\"/customer/getAllCustomers\", name=\"getAllCustomers\")\r\n     */\r\n    public function getAllCustomers()\r\n    {\r\n        $repository = $this->getDoctrine()->getRepository('AppBundle:Customer');\r\n\r\n        $customerList = $repository->findAll();\r\n\r\n        $serializer = SerializerBuilder::create()->build();\r\n        $response = $serializer->serialize(\r\n            $customerList,\r\n            'json',\r\n            SerializationContext::create()->setGroups(['display'])\r\n        );\r\n\r\n        return new Response($response);\r\n    }\r\n\r\n    /**\r\n     * @param Request $request\r\n     * @return null\r\n     * @throws EntityNotFoundException\r\n     *\r\n     * @Method(\"GET\")\r\n     * @Route(\"/customer/{customerId}\", name=\"getCustomerById\")\r\n     */\r\n    public function getCustomerById(Request $request, $customerId)\r\n    {\r\n        if (!isset($customerId) && !(intval($customerId) > 0)) {\r\n            throw new NotFoundHttpException('Customer mit der id {$id} wurde nicht gefunden!');\r\n        }\r\n\r\n        $repository = $this->getDoctrine()->getRepository('AppBundle:Customer');\r\n        $customer = $repository->find(intval($customerId));\r\n\r\n        $serializer = SerializerBuilder::create()->build();\r\n        $response = $serializer->serialize(\r\n            $customer,\r\n            'json',\r\n            SerializationContext::create()->setGroups(['display'])\r\n        );\r\n        return new Response($response);\r\n    }\r\n\r\n    /**\r\n     * @return Response\r\n     *\r\n     * @Route(\"/customer/searchCustomers\", name=\"searchCustomers\")\r\n     */\r\n    public function searchCustomers(Request $request)\r\n    {\r\n        if ($request->getMethod() != 'POST') {\r\n            return null;\r\n        }\r\n\r\n        // Daten aus Request in Objekte überführen\r\n        $content = $request->getContent();\r\n\r\n        $params = null;\r\n\r\n        if (!empty($content)) {\r\n            $params = json_decode($content, true); // 2nd param to get as array\r\n        }\r\n\r\n        if(!isset($params['page']))\r\n            $params['page'] = 1;\r\n\r\n        $repository = $this->getDoctrine()->getRepository('AppBundle:Customer');\r\n        $custPaginatedResult = $repository->findAllBySearchParams($params, 20, $params['page']);\r\n\r\n        $custSerializableResult = QueryHelper::getSerializableResult($custPaginatedResult);\r\n\r\n        $response = json_encode($custSerializableResult);\r\n\r\n        return new Response($response);\r\n    }\r\n\r\n\r\n    /**\r\n     * @param Request $request\r\n     * @return null\r\n     * @throws EntityNotFoundException\r\n     *\r\n     * @Route(\"/customer/deleteCustomer\", name=\"deleteCustomer\")\r\n     */\r\n    public function deleteCustomer(Request $request)\r\n    {\r\n        // $entity, $name\r\n        if ($request->getMethod() != 'POST') {\r\n            return null;\r\n        }\r\n\r\n        // Daten aus Request in Objekte überführen\r\n        $content = $request->getContent();\r\n\r\n\r\n        // EntityManager laden\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        if ($content != null) {\r\n            $cu = $em->find('AppBundle\\Entity\\Customer', $content);\r\n\r\n            if ($cu != null) {\r\n                $em->remove($cu);\r\n                $em->flush();\r\n            }\r\n        }\r\n\r\n        return new JsonResponse();\r\n    }\r\n\r\n    // ------ CUSTOMER CONTACT ------\r\n\r\n    /**\r\n     * @param Request $request\r\n     * @return null\r\n     * @throws EntityNotFoundException\r\n     *\r\n     * @Method(\"GET\")\r\n     * @Route(\"/customer_contact/{customerContactId}\", name=\"getCustomerContactById\")\r\n     */\r\n    public function getCustomerContactById(Request $request, $customerContactId)\r\n    {\r\n        if (!isset($customerContactId) && !(intval($customerContactId) > 0)) {\r\n            throw new NotFoundHttpException('Customer mit der id {$id} wurde nicht gefunden!');\r\n        }\r\n\r\n        $repository = $this->getDoctrine()->getRepository('AppBundle:Customer\\CustomerContact');\r\n        $customerContact = $repository->find(intval($customerContactId));\r\n\r\n        $serializer = SerializerBuilder::create()->build();\r\n        $response = $serializer->serialize(\r\n            $customerContact,\r\n            'json',\r\n            SerializationContext::create()->setGroups(['display'])\r\n        );\r\n        return new Response($response);\r\n    }\r\n\r\n\r\n    /**\r\n     * Fügt Kontakt hinzu oder bearbeitet ihn\r\n     *\r\n     * @param Request $request\r\n     * @return null\r\n     * @throws EntityNotFoundException\r\n     *\r\n     * @Method(\"POST\")\r\n     * @Route(\"/customer/editCustomerContact\", name=\"editCustomerContact\")\r\n     */\r\n    public function editCustomerContact(Request $request)\r\n    {\r\n        // Daten aus Request in Objekte überführen\r\n        $content = $request->getContent();\r\n\r\n        // Request-Parameter decodieren\r\n        $params = null;\r\n\r\n        if (!empty($content)) {\r\n            $params = json_decode($content, true); // 2nd param to get as array\r\n        }\r\n\r\n\r\n        // EntityManager laden\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        // Kunde suchen, zu dem ein Kontakt hinzugefügt werden soll\r\n        if (isset($params['customer_id'])) {\r\n\r\n            $serializer = $this->get('jms_serializer');\r\n            $contact = $serializer->deserialize(\r\n                $content,\r\n                'AppBundle\\Entity\\Customer\\CustomerContact',\r\n                'json',\r\n                DeserializationContext::create()->setGroups(array('update'))\r\n            );\r\n\r\n            // Erstellungsdatum setzen\r\n            if ($contact->getId() == null) {\r\n                $contact->setCreatedAt(new \\DateTime());\r\n            }\r\n\r\n            // Neuen Kontakt zu Kunde hinzufügen\r\n            if ($contact->getCustomer() == null) {\r\n                $customer = $em->find('AppBundle\\Entity\\Customer', $params['customer_id']);\r\n                $customer->addContact($contact);\r\n            }\r\n\r\n            // Daten speichern\r\n            if ($contact->getCustomer() != null) {\r\n                $em->persist($contact);\r\n                $em->flush();\r\n            }\r\n\r\n            // Liefern der Suche als Ergebnis (JSON)\r\n            $serializer = SerializerBuilder::create()->build();\r\n            $response = $serializer->serialize(\r\n                $contact,\r\n                'json',\r\n                SerializationContext::create()->setGroups(['display'])\r\n            );\r\n\r\n            return new Response($response);\r\n        }\r\n\r\n        // Falls man bis hierher kommt, hat etwas nicht geklappt\r\n        return new Response(\"Fehler beim Speichern des Kontakts!\", 500);\r\n    }\r\n\r\n\r\n    /**\r\n     * Löscht den Kontakt mit der übergebenen ID\r\n     * \r\n     * @param Request $request\r\n     * @return null\r\n     * @throws EntityNotFoundException\r\n     *\r\n     * @Route(\"/customer/deleteContact\", name=\"deleteContact\")\r\n     */\r\n    public function deleteContact(Request $request)\r\n    {\r\n        // $entity, $name\r\n        if ($request->getMethod() != 'POST') {\r\n            return null;\r\n        }\r\n\r\n        // Daten aus Request in Objekte überführen\r\n        $content = $request->getContent();\r\n\r\n\r\n        // EntityManager laden\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        if ($content != null) {\r\n            $contact = $em->find('AppBundle\\Entity\\Customer\\CustomerContact', $content);\r\n\r\n            if ($contact != null) {\r\n                $em->remove($contact);\r\n                $em->flush();\r\n\r\n                return new JsonResponse();\r\n            }\r\n        }\r\n\r\n        // Wenn die Funktion bis hierher kommt, gab es einen Fehler\r\n        return new Response(\"Fehler beim Löschen des Ansprechpartners\", 500);\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,0,null,0,0,0,0,0,0,null,null,null,0,null,0,0,null,null,null,null,null,0,0,0,0,null,null,0,0,null,0,0,null,0,null,null,null,null,null,null,null,null,null,null,0,null,0,null,0,0,0,0,0,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,0,0,null,0,0,0,0,0,null,0,null,null,null,null,null,null,null,null,null,1,0,null,null,null,1,null,1,null,1,0,null,null,1,1,null,1,1,null,1,null,1,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,0,null,null,null,0,null,0,0,null,0,0,0,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,0,0,null,0,0,0,0,0,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null,0,null,0,0,null,null,null,null,0,null,null,0,null,0,0,0,0,0,0,null,null,null,0,0,null,null,null,0,0,0,null,null,null,0,0,0,null,null,null,0,0,0,0,0,null,null,0,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,0,null,null,null,0,null,0,0,null,0,0,0,null,0,null,null,null,null,0,null,null]},{"name":"src/AppBundle/Controller/DefaultsController.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 16.07.2016\r\n * Time: 19:32\r\n */\r\n\r\nnamespace AppBundle\\Controller;\r\n\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Method;\r\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\r\nuse Symfony\\Component\\Serializer\\Serializer;\r\nuse Symfony\\Component\\Serializer\\Normalizer\\GetSetMethodNormalizer;\r\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\r\n\r\nuse AppBundle\\Entity\\Common\\Language;\r\nuse AppBundle\\Entity\\Common\\LanguageSub;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\nuse AppBundle\\Controller\\Admin\\SimpleEntityController;\r\nuse AppBundle\\Entity\\Common\\Sector;\r\n\r\n/**\r\n * Class DefaultsController\r\n * @package AppBundle\\Controller\r\n *\r\n */\r\nclass DefaultsController extends Controller\r\n{\r\n    /**\r\n     * @Route(\"/getDefaults\", name=\"getDefaults\")\r\n     * @Method(\"GET\")\r\n     */\r\n    public function returnDefaults()\r\n    {\r\n        $defaultData = new \\stdClass();\r\n        $defaultData->yes_no_in_progress = $this->getSimpleEntity('Common\\\\YesNoInProgress');\r\n        $defaultData->anrede = $this->getSimpleEntity('Common\\\\Anrede');\r\n        $defaultData->country = $this->getSimpleEntity('Common\\\\Country');\r\n        $defaultData->sectors = $this->getTwoLevelEntity('Common\\\\Sector');\r\n        $defaultData->languages = $this->getTwoLevelEntity('Common\\\\Language');\r\n        $defaultData->services = $this->getSimpleEntity('Common\\\\Service');\r\n        $defaultData->price_units = $this->getSimpleEntity('Common\\\\PriceUnit');\r\n        $defaultData->currency = $this->getSimpleEntity('Common\\\\Currency');\r\n        $defaultData->cat_tools = $this->getSimpleEntity('Common\\\\CatTool');\r\n        $defaultData->freelancer_payment_types = $this->getSimpleEntity('Freelancer\\\\FreelancerPaymentType');\r\n        $defaultData->freelancer_invoicing_types = $this->getSimpleEntity('Freelancer\\\\FreelancerInvoicingType');\r\n        $defaultData->freelancer_rating = $this->getSimpleEntity('Freelancer\\\\FreelancerRating');\r\n        $defaultData->freelancer_status = $this->getSimpleEntity('Freelancer\\\\FreelancerStatus');\r\n        $defaultData->customer_origin = $this->getSimpleEntity('Customer\\\\CustomerOrigin');\r\n        $defaultData->customer_potential = $this->getSimpleEntity('Customer\\\\CustomerPotential');\r\n        $defaultData->customer_status = $this->getSimpleEntity('Customer\\\\CustomerStatus');\r\n        $defaultData->user_roles = $this->getSimpleEntity('User\\\\UserRole');\r\n        $defaultData->account_managers = $this->getAccountManagers();\r\n\r\n        return new JsonResponse($defaultData);\r\n    }\r\n\r\n    /**\r\n     * @Route(\"/getUserRoles\", name=\"getUserRoles\")\r\n     * @Method(\"GET\")\r\n     */\r\n    public function getUserRoles()\r\n    {\r\n        $userRoles = new \\stdClass();\r\n        $userRoles = $this->getSimpleEntity('User\\\\UserRole');\r\n\r\n        return new JsonResponse($userRoles);\r\n    }\r\n\r\n    /**\r\n     * @param $entityName\r\n     * @return \\stdClass\r\n     *\r\n     * !! Duplicated in SimpleEntityController --> Move to service?!\r\n     */\r\n    public function getSimpleEntity($entityName)\r\n    {\r\n        $simpleEntities = new \\stdClass;\r\n        $classname = \"\\\\AppBundle\\\\Entity\\\\\" . $entityName;\r\n\r\n        $simpleEntities->values = $this->getDoctrine()\r\n            ->getRepository($classname)\r\n            ->findBy(\r\n                array(),\r\n                array('name' => 'ASC')\r\n            );\r\n\r\n        $simpleObj = new $classname();\r\n        $simpleEntities->display_name = $simpleObj->getDisplayName();\r\n\r\n        return $simpleEntities;\r\n    }\r\n\r\n    /**\r\n     * @param $entityName\r\n     * @return \\stdClass\r\n     *\r\n     * !! Duplicated in TwoLevelEntityController --> Move to service?!\r\n     */\r\n    public function getTwoLevelEntity($entityName)\r\n    {\r\n        $items = new \\stdClass;\r\n        $itemsTemp = array();\r\n        $classname = \"AppBundle\\\\Entity\\\\\" . $entityName;\r\n\r\n        $repo = $this->getDoctrine()\r\n            ->getRepository($classname);\r\n        $itemsFromDb = $repo->findAllItems();\r\n\r\n        // Subsprachen den Hauptsprachen zuordnen\r\n        foreach ($itemsFromDb as $lang) {\r\n            $itemObj = new \\stdClass();\r\n            $itemObj->id = $lang->getId();\r\n            $itemObj->name = $lang->getName();\r\n\r\n            if ($lang->isMainItem()) {\r\n                // Add main language to result array\r\n                $itemsTemp[$lang->getId()] = $itemObj;\r\n            } else {\r\n                // Add sub language to main\r\n                $itemsTemp[$lang->getMainItem()->getId()]->sub_items[] = $itemObj;\r\n            }\r\n        }\r\n\r\n        $dummyItem = new $classname();\r\n        $items->display_name = $dummyItem->getDisplayName();\r\n        foreach ($itemsTemp as $completeItem) {\r\n            $items->values[] = $completeItem;\r\n        }\r\n\r\n        return $items;\r\n    }\r\n\r\n\r\n    /**\r\n     * @return \\stdClass\r\n     *\r\n     */\r\n    public function getAccountManagers()\r\n    {\r\n        $accountManagers = new \\stdClass;\r\n        $classname = \"\\\\AppBundle\\\\Entity\\\\User\";\r\n\r\n        $ams = $this->getDoctrine()\r\n            ->getRepository($classname)\r\n            ->findAccountManagers();\r\n\r\n        $accountManagers->values = array();\r\n        foreach ($ams as $am) {\r\n            $temp = new \\StdClass;\r\n            $temp->id = $am->getId();\r\n            $temp->username = $am->getUsername();\r\n            $accountManagers->values[] = $temp;\r\n        }\r\n\r\n        $accountManagers->display_name = \"Accountmgr.\";\r\n\r\n        return $accountManagers;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,null,1,null,null,null,null,null,null,null,null,1,1,null,1,null,null,null,null,null,null,null,null,null,null,2,2,null,2,2,2,2,2,null,null,2,2,null,2,null,null,null,null,null,null,null,null,null,null,1,1,1,null,1,1,1,null,null,1,1,1,1,null,1,null,1,null,null,1,null,null,null,1,1,1,1,null,null,1,null,null,null,null,null,null,null,null,null,1,1,null,1,1,1,null,1,1,1,1,1,1,null,null,1,null,1,null,null]},{"name":"src/AppBundle/Controller/FreelancerController.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 04.09.2016\r\n * Time: 19:49\r\n */\r\n\r\nnamespace AppBundle\\Controller;\r\n\r\n\r\nuse AppBundle\\Entity\\Freelancer;\r\nuse AppBundle\\Entity\\QueryHelper;\r\nuse Doctrine\\ORM\\EntityManager;\r\nuse Doctrine\\ORM\\EntityNotFoundException;\r\nuse Doctrine\\ORM\\Mapping\\ClassMetadata;\r\nuse JMS\\Serializer\\DeserializationContext;\r\nuse JMS\\Serializer\\SerializationContext;\r\nuse JMS\\Serializer\\SerializerBuilder;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Method;\r\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\r\nuse Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\r\n\r\n/**\r\n * Class FreelancerController\r\n * @package AppBundle\\Controller\r\n *\r\n */\r\nclass FreelancerController extends Controller\r\n{\r\n\r\n    /**\r\n     * @return Response\r\n     *\r\n     * @Method(\"POST\")\r\n     * @Route(\"/freelancer/searchFreelancers\", name=\"searchFreelancers\")\r\n     */\r\n    public function searchFreelancers(Request $request)\r\n    {\r\n        // Daten aus Request in Objekte überführen\r\n        $content = $request->getContent();\r\n\r\n        $params = null;\r\n\r\n        if (!empty($content)) {\r\n            $params = json_decode($content, true); // 2nd param to get as array\r\n        }\r\n\r\n        if (!isset($params['page']))\r\n            $params['page'] = 1;\r\n\r\n        $repository = $this->getDoctrine()->getRepository('AppBundle:Freelancer');\r\n        $flPaginatedResult = $repository->findAllBySearchParams($params, 20, $params['page']);\r\n\r\n        $flSerializableResult = QueryHelper::getSerializableResult($flPaginatedResult);\r\n\r\n        $response = json_encode($flSerializableResult);\r\n\r\n        return new Response($response);\r\n    }\r\n\r\n    /**\r\n     * @param Request $request\r\n     * @return null\r\n     * @throws EntityNotFoundException\r\n     *\r\n     * @Method(\"GET\")\r\n     * @Route(\"/freelancer/{freelancerId}\", name=\"getFreelancerById\")\r\n     */\r\n    public function getFreelancerById(Request $request, $freelancerId)\r\n    {\r\n        if (!isset($freelancerId) && !(intval($freelancerId) > 0)) {\r\n            throw new NotFoundHttpException('Freelancer mit der id {$id} wurde nicht gefunden!');\r\n        }\r\n\r\n        $repository = $this->getDoctrine()->getRepository('AppBundle:Freelancer');\r\n        $freelancer = $repository->find(intval($freelancerId));\r\n\r\n        $serializer = SerializerBuilder::create()->build();\r\n        $response = $serializer->serialize(\r\n            $freelancer,\r\n            'json',\r\n            SerializationContext::create()->setGroups(['display'])\r\n        );\r\n        return new Response($response);\r\n    }\r\n\r\n    /**\r\n     * @param Request $request\r\n     * @return null\r\n     * @throws EntityNotFoundException\r\n     *\r\n     * @Method(\"POST\")\r\n     * @Route(\"/freelancer/editFreelancer\", name=\"editFreelancer\")\r\n     */\r\n    public function editFreelancer(Request $request)\r\n    {\r\n        // Daten aus Request in Objekte überführen\r\n        $content = $request->getContent();\r\n\r\n        $serializer = $this->get('jms_serializer');\r\n        $fl = $serializer->deserialize($content, 'AppBundle\\Entity\\Freelancer', 'json', DeserializationContext::create()->setGroups(array('update')));\r\n\r\n        // EntityManager laden\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        if ($fl->getId() == null) {\r\n            $fl->setCreatedAt(new \\DateTime());\r\n        }\r\n\r\n        // --------------------------------------\r\n        // Test für den Persist-Listener eines Freelancers\r\n        // --------------------------------------\r\n        $address = $fl->getAddress();\r\n        if ($address->getId() == null) {\r\n            $address->setFreelancer($fl);\r\n            $em->persist($address);\r\n        }\r\n\r\n        // Neue Preise hinzufügen\r\n        foreach ($fl->getPrices() as $price) {\r\n            if ($price->getId() == null) {\r\n                $price->setFreelancer($fl);\r\n                $em->persist($price);\r\n            }\r\n        }\r\n\r\n        // Entfernte Preise löschen\r\n        if ($fl->getId() != null) {\r\n            $items_old = $this->getDoctrine()->getRepository('\\AppBundle\\Entity\\Freelancer\\FreelancerPrice')->findBy(\r\n                array('freelancer' => $fl),\r\n                array()\r\n            );\r\n            foreach ($items_old as $item_old) {\r\n                $item_exists = false;\r\n                foreach ($fl->getPrices() as $item_new) {\r\n                    $item_exists = ($item_old->getId() == $item_new->getId());\r\n                    if ($item_exists) {\r\n                        break;\r\n                    }\r\n                }\r\n                if (!$item_exists) {\r\n                    $em->remove($item_old);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        // Test Ende!\r\n\r\n        $em->persist($fl);\r\n        $em->flush();\r\n\r\n        $serializer = SerializerBuilder::create()->build();\r\n        $response = $serializer->serialize($fl, 'json', SerializationContext::create()->setGroups(['display'])->enableMaxDepthChecks());\r\n\r\n        return new Response($response);\r\n    }\r\n\r\n\r\n    /**\r\n     * @param Request $request\r\n     * @return null\r\n     * @throws EntityNotFoundException\r\n     *\r\n     * @Route(\"/freelancer/deleteFreelancer\", name=\"deleteFreelancer\")\r\n     */\r\n    public function deleteFreelancer(Request $request)\r\n    {\r\n        // $entity, $name\r\n        if ($request->getMethod() != 'POST') {\r\n            return null;\r\n        }\r\n\r\n        // Daten aus Request in Objekte überführen\r\n        $content = $request->getContent();\r\n\r\n\r\n        // EntityManager laden\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        if ($content != null) {\r\n            $fl = $em->find('AppBundle\\Entity\\Freelancer', $content);\r\n\r\n            if ($fl != null) {\r\n                $em->remove($fl);\r\n                $em->flush();\r\n            }\r\n        }\r\n\r\n        return new JsonResponse();\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,null,1,0,null,null,1,1,null,1,1,null,1,null,1,null,1,null,null,null,null,null,null,null,null,null,null,null,null,1,0,null,null,1,1,null,1,1,1,1,1,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,1,null,null,1,null,1,1,null,null,null,null,null,1,1,1,1,null,null,null,1,0,0,0,null,null,null,null,1,0,0,0,null,0,0,0,0,0,0,null,null,0,0,null,null,null,null,null,null,null,1,1,null,1,1,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,0,null,null,null,0,null,0,0,null,0,0,0,null,null,null,0,null,null]},{"name":"src/AppBundle/Controller/HomeController.php","source":"<?php\r\n\r\nnamespace AppBundle\\Controller;\r\n\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\n\r\nclass HomeController extends Controller\r\n{\r\n    /**\r\n     * @Route(\"/\", name=\"homepage\")\r\n     */\r\n    public function indexAction(Request $request)\r\n    {\r\n        return new Response(file_get_contents(\"dist/index.html\"));\r\n    }\r\n\r\n    /**\r\n     * @Route(\"/login\", name=\"login_page\")\r\n     */\r\n    public function loginAction(Request $request)\r\n    {\r\n        return new Response(file_get_contents(\"dist/index.html\"));\r\n    }\r\n\r\n    /**\r\n     * @Route(\"/dist/{req}\", name=\"f5redirect\", requirements={\"req\"=\".*\"})\r\n     */\r\n    public function f5redirectAction(Request $request)\r\n    {\r\n        return new Response(file_get_contents(\"dist/index.html\"));\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,0,null,null]},{"name":"src/AppBundle/Controller/ScriptController.php","source":"<?php\r\n\r\nnamespace AppBundle\\Controller;\r\n\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\n\r\nclass ScriptController extends Controller\r\n{\r\n    /**\r\n     * @Route(\"/feedback\", name=\"feedback\")\r\n     */\r\n    public function feedbackAction(Request $request)\r\n    {\r\n        return new RedirectResponse('https://trello.com/b/owYPOSaW/werftnet-10');\r\n    }\r\n\r\n    /**\r\n     * @Route(\"/admin/update\", name=\"update\")\r\n     */\r\n    public function updateAction(Request $request)\r\n    {\r\n        $old_path = getcwd();\r\n        chdir('/home/werftnet/');\r\n        $output = shell_exec('bash update_symfony');\r\n        chdir($old_path);\r\n        return new Response(\"<p>Skript update_symfony wurde ausgeführt!:</p>\" . nl2br($output));\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,0,0,0,0,null]},{"name":"src/AppBundle/Controller/User/UserController.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 16.07.2016\r\n * Time: 19:32\r\n */\r\n\r\nnamespace AppBundle\\Controller\\User;\r\n\r\nuse AppBundle\\AppFlow\\AppError;\r\nuse AppBundle\\AppFlow\\ErrorResponse;\r\nuse JMS\\Serializer\\DeserializationContext;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Method;\r\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\nuse AppBundle\\Entity\\User;\r\nuse JMS\\Serializer\\SerializerBuilder;\r\nuse JMS\\Serializer\\SerializationContext;\r\n\r\n/**\r\n * Class UserController\r\n * @package AppBundle\\Controller\r\n *\r\n */\r\nclass UserController extends Controller\r\n{\r\n\r\n    /**\r\n     * Ändern des eigenen Passworts\r\n     *\r\n     * @Method(\"POST\")\r\n     * @Route(\"/user/change_pwd\", name=\"change_pwd\")\r\n     */\r\n    public function changeUserPwdAction(Request $request)\r\n    {\r\n        $response = new JsonResponse();\r\n        $pwdOld = null;\r\n        $pwdNew = null;\r\n\r\n        $em = $this->getDoctrine()->getManager();\r\n\r\n        // Daten aus Request in Objekte überführen\r\n        $content = $request->getContent();\r\n\r\n        $params = null;\r\n\r\n        if (!empty($content)) {\r\n            $params = json_decode($content, true); // 2nd param to get as array\r\n        }\r\n\r\n        if (!isset($params['pwd_old'])) {\r\n            $response->setStatusCode(422);\r\n            $response->setContent('Altes Passwort fehlr!');\r\n            return $response;\r\n        } else {\r\n            $pwdOld = $params['pwd_old'];\r\n        }\r\n\r\n        if (!isset($params['pwd_new'])) {\r\n            $response->setStatusCode(422);\r\n            $response->setContent('Neues Passwort fehlr!');\r\n            return $response;\r\n        } else {\r\n            $pwdNew = $params['pwd_new'];\r\n            if(strlen($pwdNew) < 4) {\r\n                $response->setStatusCode(422);\r\n                $response->setContent('Neues Passwort muss mindestens 4 Zeichen haben!');\r\n                return $response;\r\n            }\r\n        }\r\n\r\n        $user = $this->getUser();\r\n        $factory = $this->get('security.encoder_factory');\r\n        $encoder = $factory->getEncoder($user);\r\n\r\n        if (!$encoder->isPasswordValid($user->getPassword(), $pwdOld, $user->getSalt())) {\r\n            $response->setStatusCode(422);\r\n            $response->setContent('Altes Passwort nicht korrekt!');\r\n            return $response;\r\n        }\r\n\r\n        $encoded = $encoder->encodePassword($pwdNew, $user->getSalt());\r\n        $user->setPassword($encoded);\r\n\r\n        $em->persist($user);\r\n        $em->flush();\r\n\r\n        return new JsonResponse($user);\r\n    }\r\n\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,null,null,0,null,0,null,0,0,0,null,0,0,0,0,0,0,0,null,0,0,0,0,0,0,0,0,0,0,0,0,null,0,0,0,null,0,0,0,0,0,null,0,0,null,0,0,null,0,0,null,null]},{"name":"src/AppBundle/DataFixtures/ORM/LoadDefaultData.php","source":"<?php\r\n\r\nnamespace AppBundle\\DataFixtures\\ORM;\r\n\r\nuse AppBundle\\Entity\\Common\\Anrede;\r\nuse AppBundle\\Entity\\Common\\CatTool;\r\nuse AppBundle\\Entity\\Common\\Country;\r\nuse AppBundle\\Entity\\Common\\Currency;\r\nuse AppBundle\\Entity\\Common\\Language;\r\nuse AppBundle\\Entity\\Common\\PriceUnit;\r\nuse AppBundle\\Entity\\Common\\Sector;\r\nuse AppBundle\\Entity\\Common\\SectorSub;\r\nuse AppBundle\\Entity\\Common\\Service;\r\nuse AppBundle\\Entity\\Common\\YesNoInProgress;\r\nuse AppBundle\\Entity\\Customer\\CustomerOrigin;\r\nuse AppBundle\\Entity\\Customer\\CustomerPotential;\r\nuse AppBundle\\Entity\\Customer\\CustomerStatus;\r\nuse AppBundle\\Entity\\User;\r\nuse AppBundle\\Entity\\User\\UserRole;\r\nuse AppBundle\\Entity\\Freelancer\\FreelancerPaymentType;\r\nuse AppBundle\\Entity\\Freelancer\\FreelancerInvoicingType;\r\nuse AppBundle\\Entity\\Freelancer\\FreelancerRating;\r\nuse AppBundle\\Entity\\Freelancer\\FreelancerStatus;\r\nuse Doctrine\\Common\\DataFixtures\\FixtureInterface;\r\nuse Doctrine\\Common\\Persistence\\ObjectManager;\r\nuse Symfony\\Component\\DependencyInjection\\ContainerInterface;\r\nuse Symfony\\Component\\DependencyInjection\\ContainerAwareInterface;\r\n\r\nclass LoadDefaultData implements FixtureInterface, ContainerAwareInterface\r\n{\r\n\r\n    private $container;\r\n\r\n    public function setContainer(ContainerInterface $container = null)\r\n    {\r\n        $this->container = $container;\r\n    }\r\n\r\n    public function load(ObjectManager $manager)\r\n    {\r\n\r\n        // USER\r\n        // StandardRollen\r\n        $roleUser = new UserRole();\r\n        $roleUser->setId(1);\r\n        $roleUser->setName(\"ROLE_USER\");\r\n        $manager->persist($roleUser);\r\n\r\n        $roleAdmin = new UserRole();\r\n        $roleAdmin->setId(2);\r\n        $roleAdmin->setName(\"ROLE_ADMIN\");\r\n        $manager->persist($roleAdmin);\r\n\r\n        $roleAM = new UserRole();\r\n        $roleAM->setId(2);\r\n        $roleAM->setName(\"ROLE_ACCOUNT_MANAGER\");\r\n        $manager->persist($roleAM);\r\n\r\n        // -----------------------------------\r\n        // COMMON\r\n        // -----------------------------------\r\n\r\n        // Anrede\r\n        $anrede = array(\r\n            \"Herr\",\r\n            \"Frau\",\r\n            \"Firma\",\r\n        );\r\n\r\n        for ($i = 1; $i <= count($anrede); $i++) {\r\n            $element = new Anrede();\r\n            $element->setId($i);\r\n            $element->setName($anrede[$i - 1]);\r\n            $manager->persist($element);\r\n        }\r\n\r\n\r\n        // CAT-Tool\r\n        $cat = array(\r\n            \"Trados\",\r\n            \"MemoQ\",\r\n            \"Across\",\r\n            \"WordFast\",\r\n        );\r\n\r\n        for ($i = 1; $i <= count($cat); $i++) {\r\n            $element = new CatTool();\r\n            $element->setId($i);\r\n            $element->setName($cat[$i - 1]);\r\n            $manager->persist($element);\r\n        }\r\n\r\n        // Country\r\n\r\n        $country = array(\r\n            \"Deutschland\",\r\n            \"Österreich\",\r\n            \"Schweiz\"\r\n        );\r\n\r\n        for ($i = 1; $i <= count($country); $i++) {\r\n            $element = new Country();\r\n            $element->setId($i);\r\n            $element->setName($country[$i - 1]);\r\n            $manager->persist($element);\r\n        }\r\n\r\n\r\n        // Language + 2 Subsprachen\r\n\r\n        $language = new Language();\r\n        $language->setName(\"Englisch\");\r\n\r\n        $lang1 = new Language();\r\n        $lang1->setName(\"UK\");\r\n        $lang1->setMainItem($language);\r\n\r\n        $lang2 = new Language();\r\n        $lang2->setName(\"US\");\r\n        $lang2->setMainItem($language);\r\n\r\n        $manager->persist($language);\r\n        $manager->persist($lang1);\r\n        $manager->persist($lang2);\r\n\r\n\r\n        // Preiseinheiten\r\n        $priceUnits = array(\r\n            \"Quellwort\",\r\n            \"Zielwort\",\r\n            \"NZ\",\r\n            \"Stunde\",\r\n            \"Minute\",\r\n            \"Seite\",\r\n        );\r\n\r\n\r\n        for ($i = 1; $i <= count($priceUnits); $i++) {\r\n            $element = new PriceUnit();\r\n            $element->setId($i);\r\n            $element->setName($priceUnits[$i - 1]);\r\n            $manager->persist($element);\r\n        }\r\n\r\n        // Sector/Fachgebiet\r\n\r\n        // Sector 1\r\n\r\n        $sector = new Sector();\r\n        $sector->setName(\"Technik\");\r\n\r\n        $subSector1 = new Sector();\r\n        $subSector1->setName(\"Maschinenbau\");\r\n        $subSector1->setMainItem($sector);\r\n\r\n        $subSector2 = new Sector();\r\n        $subSector2->setName(\"Elektortechnik\");\r\n        $subSector2->setMainItem($sector);\r\n\r\n        $subSector3 = new Sector();\r\n        $subSector3->setName(\"Werkstoffkunde\");\r\n        $subSector3->setMainItem($sector);\r\n\r\n        $manager->persist($sector);\r\n        $manager->persist($subSector1);\r\n        $manager->persist($subSector2);\r\n        $manager->persist($subSector3);\r\n\r\n\r\n        // Sector 2\r\n\r\n        $sector = new Sector();\r\n        $sector->setName(\"Finanzen\");\r\n\r\n        $subSector1 = new Sector();\r\n        $subSector1->setName(\"Bank\");\r\n        $subSector1->setMainItem($sector);\r\n\r\n        $subSector2 = new Sector();\r\n        $subSector2->setName(\"Börse\");\r\n        $subSector2->setMainItem($sector);\r\n\r\n        $subSector3 = new Sector();\r\n        $subSector3->setName(\"Buchhaltung\");\r\n        $subSector3->setMainItem($sector);\r\n\r\n        $manager->persist($sector);\r\n        $manager->persist($subSector1);\r\n        $manager->persist($subSector2);\r\n        $manager->persist($subSector3);\r\n\r\n\r\n        // Service/Dienstleistungen\r\n        $service = array(\r\n            \"Lektorat\",\r\n            \"Korrektorat\",\r\n            \"Übersetzung\",\r\n            \"DTP\",\r\n            \"Dolmetschen\",\r\n        );\r\n\r\n\r\n        for ($i = 1; $i <= count($service); $i++) {\r\n            $element = new Service();\r\n            $element->setId($i);\r\n            $element->setName($service[$i - 1]);\r\n            $manager->persist($element);\r\n        }\r\n\r\n\r\n        // Währungen\r\n        $currencies = array(\r\n            \"EUR\",\r\n            \"USD\",\r\n        );\r\n\r\n\r\n        for ($i = 1; $i <= count($currencies); $i++) {\r\n            $element = new Currency();\r\n            $element->setId($i);\r\n            $element->setName($currencies[$i - 1]);\r\n            $manager->persist($element);\r\n        }\r\n\r\n        // YesNoInProgress\r\n        $yesNoInProgress = array(\r\n            \"Ja\",\r\n            \"Nein\",\r\n            \"In Bearbeitung\",\r\n        );\r\n\r\n        for ($i = 1; $i <= count($yesNoInProgress); $i++) {\r\n            $element = new YesNoInProgress();\r\n            $element->setId($i);\r\n            $element->setName($yesNoInProgress[$i - 1]);\r\n            $manager->persist($element);\r\n        }\r\n\r\n        // FREELANCER\r\n        // Freelancer Bezahlart\r\n        $paymentType = array(\r\n            \"Überweisung\",\r\n            \"PayPal\"\r\n        );\r\n\r\n        for ($i = 1; $i <= count($paymentType); $i++) {\r\n            $element = new FreelancerPaymentType();\r\n            $element->setId($i);\r\n            $element->setName($paymentType[$i - 1]);\r\n            $manager->persist($element);\r\n        }\r\n\r\n        // Freelancer Rechnungsart\r\n        $invoicingType = array(\r\n            \"Rechnung\",\r\n            \"Gutschrift\"\r\n        );\r\n\r\n        for ($i = 1; $i <= count($invoicingType); $i++) {\r\n            $element = new FreelancerInvoicingType();\r\n            $element->setId($i);\r\n            $element->setName($invoicingType[$i - 1]);\r\n            $manager->persist($element);\r\n        }\r\n\r\n\r\n        // Rating Freelancer\r\n        $freelancerRating = array(\r\n            \"A (sehr gut)\",\r\n            \"B (in Ordnung)\",\r\n            \"C (nur als Ausnahme)\",\r\n        );\r\n\r\n        for ($i = 1; $i <= count($freelancerRating); $i++) {\r\n            $element = new FreelancerRating();\r\n            $element->setId($i);\r\n            $element->setName($freelancerRating[$i - 1]);\r\n            $manager->persist($element);\r\n        }\r\n\r\n\r\n        // Freelancer Status\r\n        $freelancerStatus = array(\r\n            \"Lieferant\",\r\n            \"Kandidat\",\r\n            \"Bewerber\",\r\n            \"Kein Interesse\",\r\n        );\r\n\r\n        for ($i = 1; $i <= count($freelancerStatus); $i++) {\r\n            $status = new FreelancerStatus();\r\n            $status->setId($i);\r\n            $status->setName($freelancerStatus[$i - 1]);\r\n            $manager->persist($status);\r\n        }\r\n\r\n        // KUNDEN\r\n\r\n        // Customer Origin\r\n        $customerOrigin = array(\r\n            \"Akquise\",\r\n            \"Empfehlung\",\r\n            \"Website\",\r\n            \"Quahill\"\r\n        );\r\n\r\n        for ($i = 1; $i <= count($customerOrigin); $i++) {\r\n            $origin = new CustomerOrigin();\r\n            $origin->setId($i);\r\n            $origin->setName($customerOrigin[$i - 1]);\r\n            $manager->persist($origin);\r\n        }\r\n\r\n\r\n        // Customer Potential\r\n        $customerPotential = array(\r\n            \"A (Betrag A)\",\r\n            \"B (Betrag B)\",\r\n            \"C (Betrag C)\",\r\n            \"D (Betrag D)\",\r\n        );\r\n\r\n        for ($i = 1; $i <= count($customerPotential); $i++) {\r\n            $potential = new CustomerPotential();\r\n            $potential->setId($i);\r\n            $potential->setName($customerPotential[$i - 1]);\r\n            $manager->persist($potential);\r\n        }\r\n\r\n\r\n        // Customer Status\r\n        $customerStatus = array(\r\n            \"Aktiver Kunde\",\r\n            \"Möglicher Kunde\",\r\n            \"Kein Interesse\",\r\n            \"Verlorener Kunde\",\r\n        );\r\n\r\n        for ($i = 1; $i <= count($customerStatus); $i++) {\r\n            $status = new CustomerStatus();\r\n            $status->setId($i);\r\n            $status->setName($customerStatus[$i - 1]);\r\n            $manager->persist($status);\r\n        }\r\n        \r\n        $manager->flush();\r\n\r\n        // Testuser für den anfänglichen Admin anlegen\r\n        $user = new User();\r\n        $user->setUsername('admin');\r\n        $user->setEmail('admin@some.domain.com');\r\n\r\n        $plainPassword = 'admin';\r\n        $encoder = $this->container->get('security.password_encoder');\r\n        $encoded = $encoder->encodePassword($user, $plainPassword);\r\n        $user->setPassword($encoded);\r\n        $user->addRole($roleAdmin);\r\n\r\n        $manager->persist($user);\r\n        $manager->flush();\r\n\r\n\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,0,null,null,null,0,0,0,0,null,0,0,0,0,null,0,0,0,0,null,null,null,null,null,null,0,0,0,0,0,null,0,0,0,0,0,0,null,null,null,0,0,0,0,0,0,null,0,0,0,0,0,0,null,null,null,0,0,0,0,0,null,0,0,0,0,0,0,null,null,null,null,0,0,null,0,0,0,null,0,0,0,null,0,0,0,null,null,null,0,0,0,0,0,0,0,0,null,null,0,0,0,0,0,0,null,null,null,null,null,0,0,null,0,0,0,null,0,0,0,null,0,0,0,null,0,0,0,0,null,null,null,null,0,0,null,0,0,0,null,0,0,0,null,0,0,0,null,0,0,0,0,null,null,null,0,0,0,0,0,0,0,null,null,0,0,0,0,0,0,null,null,null,0,0,0,0,null,null,0,0,0,0,0,0,null,null,0,0,0,0,0,null,0,0,0,0,0,0,null,null,null,0,0,0,0,null,0,0,0,0,0,0,null,null,0,0,0,0,null,0,0,0,0,0,0,null,null,null,0,0,0,0,0,null,0,0,0,0,0,0,null,null,null,0,0,0,0,0,0,null,0,0,0,0,0,0,null,null,null,null,0,0,0,0,0,0,null,0,0,0,0,0,0,null,null,null,0,0,0,0,0,0,null,0,0,0,0,0,0,null,null,null,0,0,0,0,0,0,null,0,0,0,0,0,0,null,0,null,null,0,0,0,null,0,0,0,0,0,null,0,0,null,null,0,null]},{"name":"src/AppBundle/Entity/Common/Address.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 10.07.2016\r\n * Time: 22:13\r\n */\r\n\r\nnamespace AppBundle\\Entity\\Common;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\n/**\r\n * Class Address\r\n * @package AppBundle\\Entity\\Common\r\n *\r\n */\r\nabstract class Address\r\n{\r\n    /**\r\n     * @ORM\\Column(type=\"integer\")\r\n     * @ORM\\Id\r\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\r\n     * @JMS\\Type(\"integer\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    protected $id;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    protected $street;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    protected $street2;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    protected $zipcode;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    protected $city;\r\n\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Common\\Country\")\r\n     * @ORM\\JoinColumn(name=\"country_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Common\\Country\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    protected $country;\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"src/AppBundle/Entity/Common/Anrede.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 29.07.2016\r\n * Time: 19:33\r\n */\r\n\r\nnamespace AppBundle\\Entity\\Common;\r\n\r\n\r\nuse AppBundle\\Entity\\SimpleEntity;\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\n\r\n/**\r\n * Class Freelancer\r\n * @package AppBundle\\Entity\\Common\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"Anrede\")\r\n */\r\nclass Anrede extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"Anrede\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src/AppBundle/Entity/Common/CatTool.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 16.07.2016\r\n * Time: 11:08\r\n */\r\n\r\nnamespace AppBundle\\Entity\\Common;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\n\r\n/**\r\n * Class Freelancer\r\n * @package AppBundle\\Entity\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"CatTool\")\r\n */\r\nclass CatTool extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"CAT-Tool\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src/AppBundle/Entity/Common/Company.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 13.09.2016\r\n * Time: 21:05\r\n */\r\n\r\nnamespace AppBundle\\Entity\\Common;\r\n\r\n\r\nclass Company extends Contact\r\n{\r\n\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"src/AppBundle/Entity/Common/Contact.php","source":"<?php\r\n/**\r\nKlasse beschreibt ein Freelancer-Objekt\r\n */\r\n\r\nnamespace AppBundle\\Entity\\Common;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\Common\\Anrede;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\n/**\r\n * Class Contact\r\n * @package AppBundle\\Entity\\Common\r\n *\r\n *\r\n */\r\nabstract class Contact\r\n{\r\n    /**\r\n     * @ORM\\Column(type=\"integer\")\r\n     * @ORM\\Id\r\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\r\n     * @JMS\\Type(\"integer\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    protected $id;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\")\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    protected $name1;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    protected $name2;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    protected $phone;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    protected $phone2;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    protected $email;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    protected $email2;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    protected $fax;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    protected $skype;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"text\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    protected $comment;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"datetime\")\r\n     * @JMS\\Type(\"DateTime\")\r\n     * @JMS\\Groups({\"display\"})\r\n     */\r\n    protected $createdAt;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"datetime\")\r\n     * @JMS\\Type(\"DateTime\")\r\n     */\r\n    // protected $createdBy; // User\r\n\r\n    /**\r\n     * Get id\r\n     *\r\n     * @return integer\r\n     */\r\n    public function getId()\r\n    {\r\n        return $this->id;\r\n    }\r\n\r\n\r\n    /**\r\n     * Set name1\r\n     *\r\n     * @param string $name1\r\n     *\r\n     * @return mixed\r\n     */\r\n    public function setName1($name1)\r\n    {\r\n        $this->name1 = $name1;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get name1\r\n     *\r\n     * @return string\r\n     */\r\n    public function getName1()\r\n    {\r\n        return $this->name1;\r\n    }\r\n\r\n\r\n    /**\r\n     * Set name2\r\n     *\r\n     * @param string $name2\r\n     *\r\n     * @return mixed\r\n     */\r\n    public function setName2($name2)\r\n    {\r\n        $this->name2 = $name2;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get name2\r\n     *\r\n     * @return string\r\n     */\r\n    public function getName2()\r\n    {\r\n        return $this->name2;\r\n    }\r\n\r\n    /**\r\n     * Set phone\r\n     *\r\n     * @param string $phone\r\n     *\r\n     * @return mixed\r\n     */\r\n    public function setPhone($phone)\r\n    {\r\n        $this->phone = $phone;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get phone\r\n     *\r\n     * @return string\r\n     */\r\n    public function getPhone()\r\n    {\r\n        return $this->phone;\r\n    }\r\n\r\n    /**\r\n     * Set phone2\r\n     *\r\n     * @param string $phone2\r\n     *\r\n     * @return mixed\r\n     */\r\n    public function setPhone2($phone2)\r\n    {\r\n        $this->phone2 = $phone2;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get phone2\r\n     *\r\n     * @return string\r\n     */\r\n    public function getPhone2()\r\n    {\r\n        return $this->phone2;\r\n    }\r\n\r\n    /**\r\n     * Set email\r\n     *\r\n     * @param string $email\r\n     *\r\n     * @return mixed\r\n     */\r\n    public function setEmail($email)\r\n    {\r\n        $this->email = $email;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get email\r\n     *\r\n     * @return string\r\n     */\r\n    public function getEmail()\r\n    {\r\n        return $this->email;\r\n    }\r\n\r\n    /**\r\n     * Set email2\r\n     *\r\n     * @param string $email2\r\n     *\r\n     * @return mixed\r\n     */\r\n    public function setEmail2($email2)\r\n    {\r\n        $this->email2 = $email2;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get email2\r\n     *\r\n     * @return string\r\n     */\r\n    public function getEmail2()\r\n    {\r\n        return $this->email2;\r\n    }\r\n\r\n    /**\r\n     * Set fax\r\n     *\r\n     * @param string $fax\r\n     *\r\n     * @return mixed\r\n     */\r\n    public function setFax($fax)\r\n    {\r\n        $this->fax = $fax;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get fax\r\n     *\r\n     * @return string\r\n     */\r\n    public function getFax()\r\n    {\r\n        return $this->fax;\r\n    }\r\n\r\n    /**\r\n     * Set skype\r\n     *\r\n     * @param string $skype\r\n     *\r\n     * @return mixed\r\n     */\r\n    public function setSkype($skype)\r\n    {\r\n        $this->skype = $skype;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get skype\r\n     *\r\n     * @return string\r\n     */\r\n    public function getSkype()\r\n    {\r\n        return $this->skype;\r\n    }\r\n\r\n    /**\r\n     * Set comment\r\n     *\r\n     * @param string $comment\r\n     *\r\n     * @return mixed\r\n     */\r\n    public function setComment($comment)\r\n    {\r\n        $this->comment = $comment;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get comment\r\n     *\r\n     * @return string\r\n     */\r\n    public function getComment()\r\n    {\r\n        return $this->comment;\r\n    }\r\n\r\n    /**\r\n     * Set createdAt\r\n     *\r\n     * @param \\DateTime $createdAt\r\n     *\r\n     * @return mixed\r\n     */\r\n    public function setCreatedAt($createdAt)\r\n    {\r\n        $this->createdAt = $createdAt;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get createdAt\r\n     *\r\n     * @return \\DateTime\r\n     */\r\n    public function getCreatedAt()\r\n    {\r\n        return $this->createdAt;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,1,null,1,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"src/AppBundle/Entity/Common/Country.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 17.07.2016\r\n * Time: 18:45\r\n */\r\n\r\nnamespace AppBundle\\Entity\\Common;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\n\r\n/**\r\n * Class Freelancer\r\n * @package AppBundle\\Entity\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"Country\")\r\n *\r\n */\r\nclass Country extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"Land\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src/AppBundle/Entity/Common/Currency.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 17.07.2016\r\n * Time: 18:45\r\n */\r\n\r\nnamespace AppBundle\\Entity\\Common;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\n\r\n/**\r\n * Class Freelancer\r\n * @package AppBundle\\Entity\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"Currency\")\r\n *\r\n */\r\nclass Currency extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"Währung\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src/AppBundle/Entity/Common/Language.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 16.07.2016\r\n * Time: 11:04\r\n */\r\n\r\nnamespace AppBundle\\Entity\\Common;\r\n\r\nuse Doctrine\\Common\\Collections\\ArrayCollection;\r\nuse AppBundle\\Entity\\TwoLevelEntity;\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\n/**\r\n * Class Language\r\n * @package AppBundle\\Entity\\Common\r\n *\r\n * @ORM\\Entity(repositoryClass=\"AppBundle\\Entity\\TwoLevelEntityRepository\")\r\n * @ORM\\Table(name=\"Language\")\r\n */\r\nclass Language extends TwoLevelEntity\r\n{\r\n    /**\r\n     * Redeclaration of property to set relation\r\n     *\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Common\\Language\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Common\\Language\")\r\n     * @JMS\\Groups({\"display\"})\r\n     */\r\n    protected $mainItem;\r\n\r\n    public function __construct()\r\n    {\r\n        // Call parent constructor to initialize class\r\n        parent::__construct();\r\n    }\r\n\r\n    public function getDisplayName()\r\n    {\r\n        return \"Sprache\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,null,null,null,1,null,null]},{"name":"src/AppBundle/Entity/Common/Person.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 13.09.2016\r\n * Time: 21:04\r\n */\r\n\r\nnamespace AppBundle\\Entity\\Common;\r\n\r\nuse AppBundle\\Entity\\Common\\Anrede;\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\nuse Symfony\\Component\\Validator\\Constraints\\DateTime;\r\n\r\nabstract class Person extends Contact\r\n{\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Common\\Anrede\")\r\n     * @ORM\\JoinColumn(name=\"anrede_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Common\\Anrede\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    protected $anrede;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"datetime\", nullable=true)\r\n     * @JMS\\Type(\"DateTime<'Y-m-d'>\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    protected $dateOfBirth;\r\n\r\n\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Common\\Language\")\r\n     * @ORM\\JoinColumn(name=\"correspond_language_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Common\\Language\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    protected $correspondLanguage;\r\n\r\n    /**\r\n     * Set anrede\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\Anrede $anrede\r\n     *\r\n     * @return mixed\r\n     */\r\n    public function setAnrede(Anrede $anrede = null)\r\n    {\r\n        $this->anrede = $anrede;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get anrede\r\n     *\r\n     * @return \\AppBundle\\Entity\\Common\\Anrede\r\n     */\r\n    public function getAnrede()\r\n    {\r\n        return $this->anrede;\r\n    }\r\n    \r\n    /**\r\n     * Set dateOfBirth\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\Anrede $dateOfBirth\r\n     *\r\n     * @return mixed\r\n     */\r\n    public function setDateOfBirth(DateTime $dateOfBirth = null)\r\n    {\r\n        $this->dateOfBirth = $dateOfBirth;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get dateOfBirth\r\n     *\r\n     * @return \\AppBundle\\Entity\\Common\\Anrede\r\n     */\r\n    public function getDateOfBirth()\r\n    {\r\n        return $this->dateOfBirth;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"src/AppBundle/Entity/Common/PriceUnit.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 17.07.2016\r\n * Time: 18:33\r\n */\r\n\r\nnamespace AppBundle\\Entity\\Common;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\n\r\n/**\r\n * Class Freelancer\r\n * @package AppBundle\\Entity\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"PriceUnit\")\r\n */\r\nclass PriceUnit extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"Preiseinheit\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src/AppBundle/Entity/Common/Sector.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 16.07.2016\r\n * Time: 11:04\r\n */\r\n\r\nnamespace AppBundle\\Entity\\Common;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse Doctrine\\Common\\Collections\\ArrayCollection;\r\nuse AppBundle\\Entity\\TwoLevelEntity;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\n/**\r\n * Class Sector\r\n * @package AppBundle\\Entity\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Entity(repositoryClass=\"AppBundle\\Entity\\TwoLevelEntityRepository\")\r\n * @ORM\\Table(name=\"Sector\")\r\n */\r\nclass Sector extends TwoLevelEntity implements \\JsonSerializable\r\n{\r\n    /**\r\n     * Redeclaration of property to set relation\r\n     *\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Common\\Sector\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Common\\Sector\")\r\n     * @JMS\\Groups({\"display\"})\r\n     */\r\n    protected $mainItem;\r\n\r\n    public function __construct()\r\n    {\r\n        // Call parent constructor to initialize class\r\n        parent::__construct();\r\n    }\r\n\r\n    public function getDisplayName()\r\n    {\r\n        return \"Fachgebiet\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,null,null,null,1,null,null]},{"name":"src/AppBundle/Entity/Common/Service.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 17.07.2016\r\n * Time: 20:24\r\n */\r\n\r\nnamespace AppBundle\\Entity\\Common;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\n\r\n/**\r\n * Class Service\r\n * @package AppBundle\\Entity\\Common\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"Service\")\r\n */\r\nclass Service extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"Dienstleistung\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src/AppBundle/Entity/Common/YesNoInProgress.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 17.07.2016\r\n * Time: 22:50\r\n */\r\n\r\nnamespace AppBundle\\Entity\\Common;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\n\r\n/**\r\n * Class YesNoInProgress\r\n * @package AppBundle\\Entity\\Common\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"YesNoInProgress\")\r\n */\r\nclass YesNoInProgress extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"Ja/Nein/In Bearbeitung\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src/AppBundle/Entity/Customer.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 10.09.2016\r\n * Time: 18:44\r\n */\r\n\r\nnamespace AppBundle\\Entity;\r\n\r\nuse AppBundle\\Entity\\Common\\Contact;\r\nuse Doctrine\\Common\\Collections\\ArrayCollection;\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\n/**\r\n * Class Customer\r\n * @package AppBundle\\Entity\r\n *\r\n * @ORM\\Entity(repositoryClass=\"AppBundle\\Entity\\CustomerRepository\")\r\n * @ORM\\Table(name=\"Customer\")\r\n */\r\nclass Customer extends Contact\r\n{\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $customerNo;\r\n\r\n    /**\r\n     * @ORM\\OneToOne(targetEntity=\"AppBundle\\Entity\\Customer\\CustomerAddress\", inversedBy=\"customer\", cascade={\"all\"})\r\n     * @ORM\\JoinColumn(name=\"customeraddress_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Customer\\CustomerAddress\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $address;\r\n\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Customer\\CustomerOrigin\")\r\n     * @ORM\\JoinColumn(name=\"customer_origin_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Customer\\CustomerOrigin\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $origin;\r\n\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Customer\\CustomerPotential\")\r\n     * @ORM\\JoinColumn(name=\"customer_potential_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Customer\\CustomerPotential\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $potential;\r\n\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\User\")\r\n     * @ORM\\JoinColumn(name=\"account_manager_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\User\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $accountManager;\r\n\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Customer\\CustomerStatus\")\r\n     * @ORM\\JoinColumn(name=\"customer_status_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Customer\\CustomerStatus\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $status;\r\n\r\n    /**\r\n     * Bedingungen zur Rechnungsstellung\r\n     *\r\n     * @ORM\\Column(type=\"text\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    protected $invoicingDetails;\r\n\r\n    // ToDo: $accountManager Kundenberater --> Eigenes Feld aus Datanbank oder Benutzer\r\n\r\n    /**\r\n     * @ORM\\OneToMany(targetEntity=\"AppBundle\\Entity\\Customer\\CustomerContact\", mappedBy=\"customer\", cascade={\"all\"})\r\n     * @JMS\\Type(\"ArrayCollection<AppBundle\\Entity\\Customer\\CustomerContact>\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $contacts;\r\n\r\n    public function __construct() {\r\n        $this->contacts = new ArrayCollection();\r\n    }\r\n\r\n    /**\r\n     * Get id\r\n     *\r\n     * @return integer\r\n     */\r\n    public function getId()\r\n    {\r\n        return $this->id;\r\n    }\r\n\r\n    /**\r\n     * Set customerNo\r\n     *\r\n     * @param string $customerNo\r\n     *\r\n     * @return Customer\r\n     */\r\n    public function setCustomerNo($customerNo)\r\n    {\r\n        $this->customerNo = $customerNo;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get customerNo\r\n     *\r\n     * @return string\r\n     */\r\n    public function getCustomerNo()\r\n    {\r\n        return $this->customerNo;\r\n    }\r\n    \r\n\r\n    /**\r\n     * Set invoicingDetails\r\n     *\r\n     * @param string $invoicingDetails\r\n     *\r\n     * @return Customer\r\n     */\r\n    public function setInvoicingDetails($invoicingDetails)\r\n    {\r\n        $this->invoicingDetails = $invoicingDetails;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get invoicingDetails\r\n     *\r\n     * @return string\r\n     */\r\n    public function getInvoicingDetails()\r\n    {\r\n        return $this->invoicingDetails;\r\n    }\r\n\r\n\r\n    /**\r\n     * Set address\r\n     *\r\n     * @param \\AppBundle\\Entity\\Customer\\CustomerAddress $address\r\n     *\r\n     * @return Customer\r\n     */\r\n    public function setAddress(\\AppBundle\\Entity\\Customer\\CustomerAddress $address = null)\r\n    {\r\n        $this->address = $address;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get address\r\n     *\r\n     * @return \\AppBundle\\Entity\\Customer\\CustomerAddress\r\n     */\r\n    public function getAddress()\r\n    {\r\n        return $this->address;\r\n    }\r\n\r\n    /**\r\n     * Set origin\r\n     *\r\n     * @param \\AppBundle\\Entity\\Customer\\CustomerOrigin $origin\r\n     *\r\n     * @return Customer\r\n     */\r\n    public function setOrigin(\\AppBundle\\Entity\\Customer\\CustomerOrigin $origin = null)\r\n    {\r\n        $this->origin = $origin;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get origin\r\n     *\r\n     * @return \\AppBundle\\Entity\\Customer\\CustomerOrigin\r\n     */\r\n    public function getOrigin()\r\n    {\r\n        return $this->origin;\r\n    }\r\n\r\n    /**\r\n     * Set potential\r\n     *\r\n     * @param \\AppBundle\\Entity\\Customer\\CustomerPotential $potential\r\n     *\r\n     * @return Customer\r\n     */\r\n    public function setPotential(\\AppBundle\\Entity\\Customer\\CustomerPotential $potential = null)\r\n    {\r\n        $this->potential = $potential;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get accountManager\r\n     *\r\n     * @return \\AppBundle\\Entity\\User\r\n     */\r\n    public function getAccountManager()\r\n    {\r\n        return $this->accountManager;\r\n    }\r\n\r\n    /**\r\n     * Set accountManager\r\n     *\r\n     * @param \\AppBundle\\Entity\\User $accountManager\r\n     *\r\n     * @return Customer\r\n     */\r\n    public function setAccountManager(\\AppBundle\\Entity\\User $accountManager = null)\r\n    {\r\n        $this->accountManager = $accountManager;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get potential\r\n     *\r\n     * @return \\AppBundle\\Entity\\Customer\\CustomerPotential\r\n     */\r\n    public function getPotential()\r\n    {\r\n        return $this->potential;\r\n    }\r\n\r\n    /**\r\n     * Set status\r\n     *\r\n     * @param \\AppBundle\\Entity\\Customer\\CustomerStatus $status\r\n     *\r\n     * @return Customer\r\n     */\r\n    public function setStatus(\\AppBundle\\Entity\\Customer\\CustomerStatus $status = null)\r\n    {\r\n        $this->status = $status;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get status\r\n     *\r\n     * @return \\AppBundle\\Entity\\Customer\\CustomerStatus\r\n     */\r\n    public function getStatus()\r\n    {\r\n        return $this->status;\r\n    }\r\n\r\n    /**\r\n     * Add contact\r\n     *\r\n     * @param \\AppBundle\\Entity\\Customer\\CustomerContact $contact\r\n     *\r\n     * @return Customer\r\n     */\r\n    public function addContact(\\AppBundle\\Entity\\Customer\\CustomerContact $contact)\r\n    {\r\n        $contact->setCustomer($this);\r\n        $this->contacts[] = $contact;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Remove contact\r\n     *\r\n     * @param \\AppBundle\\Entity\\Customer\\CustomerContact $contact\r\n     */\r\n    public function removeContact(\\AppBundle\\Entity\\Customer\\CustomerContact $contact)\r\n    {\r\n        $this->contacts->removeElement($contact);\r\n    }\r\n\r\n    /**\r\n     * Get contacts\r\n     *\r\n     * @return \\Doctrine\\Common\\Collections\\Collection\r\n     */\r\n    public function getContacts()\r\n    {\r\n        return $this->contacts;\r\n    }\r\n\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,null,null,0,null,null,null]},{"name":"src/AppBundle/Entity/Customer/CustomerAddress.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 17.07.2016\r\n * Time: 19:17\r\n */\r\n\r\nnamespace AppBundle\\Entity\\Customer;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\Common\\Address;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\n/**\r\n * Class Address\r\n * @package AppBundle\\Entity\\Customer\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"CustomerAddress\")\r\n */\r\nclass CustomerAddress extends Address\r\n{\r\n    /**\r\n     * @ORM\\OneToOne(targetEntity=\"AppBundle\\Entity\\Customer\", mappedBy=\"address\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Customer\")\r\n     */\r\n    private $customer;\r\n    /**\r\n     * Constructor\r\n     */\r\n    public function __construct()\r\n    {\r\n        $this->customer = new \\Doctrine\\Common\\Collections\\ArrayCollection();\r\n    }\r\n\r\n    /**\r\n     * Get id\r\n     *\r\n     * @return integer\r\n     */\r\n    public function getId()\r\n    {\r\n        return $this->id;\r\n    }\r\n\r\n    /**\r\n     * Set street\r\n     *\r\n     * @param string $street\r\n     *\r\n     * @return CustomerAddress\r\n     */\r\n    public function setStreet($street)\r\n    {\r\n        $this->street = $street;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get street\r\n     *\r\n     * @return string\r\n     */\r\n    public function getStreet()\r\n    {\r\n        return $this->street;\r\n    }\r\n\r\n    /**\r\n     * Set street2\r\n     *\r\n     * @param string $street2\r\n     *\r\n     * @return CustomerAddress\r\n     */\r\n    public function setStreet2($street2)\r\n    {\r\n        $this->street2 = $street2;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get street2\r\n     *\r\n     * @return string\r\n     */\r\n    public function getStreet2()\r\n    {\r\n        return $this->street2;\r\n    }\r\n\r\n    /**\r\n     * Set zipcode\r\n     *\r\n     * @param string $zipcode\r\n     *\r\n     * @return CustomerAddress\r\n     */\r\n    public function setZipcode($zipcode)\r\n    {\r\n        $this->zipcode = $zipcode;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get zipcode\r\n     *\r\n     * @return string\r\n     */\r\n    public function getZipcode()\r\n    {\r\n        return $this->zipcode;\r\n    }\r\n\r\n    /**\r\n     * Set city\r\n     *\r\n     * @param string $city\r\n     *\r\n     * @return CustomerAddress\r\n     */\r\n    public function setCity($city)\r\n    {\r\n        $this->city = $city;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get city\r\n     *\r\n     * @return string\r\n     */\r\n    public function getCity()\r\n    {\r\n        return $this->city;\r\n    }\r\n\r\n    /**\r\n     * Set customer\r\n     *\r\n     * @param \\AppBundle\\Entity\\Customer $customer\r\n     *\r\n     * @return CustomerAddress\r\n     */\r\n    public function setCustomer(\\AppBundle\\Entity\\Customer $customer)\r\n    {\r\n        $this->customer = $customer;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get customer\r\n     *\r\n     * @return \\Doctrine\\Common\\Collections\\Collection\r\n     */\r\n    public function getCustomer()\r\n    {\r\n        return $this->customer;\r\n    }\r\n\r\n    /**\r\n     * Set country\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\Country $country\r\n     *\r\n     * @return CustomerAddress\r\n     */\r\n    public function setCountry(\\AppBundle\\Entity\\Common\\Country $country = null)\r\n    {\r\n        $this->country = $country;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get country\r\n     *\r\n     * @return \\AppBundle\\Entity\\Common\\Country\r\n     */\r\n    public function getCountry()\r\n    {\r\n        return $this->country;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"src/AppBundle/Entity/Customer/CustomerContact.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 10.09.2016\r\n * Time: 18:52\r\n */\r\n\r\nnamespace AppBundle\\Entity\\Customer;\r\n\r\nuse AppBundle\\Entity\\Common\\Person;\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\n/**\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"CustomerContact\")\r\n */\r\nclass CustomerContact extends Person\r\n{\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Customer\", inversedBy=\"contacts\")\r\n     * @ORM\\JoinColumn(name=\"customer_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Customer\")\r\n     */\r\n    private $customer;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"text\")\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $position;\r\n\r\n    /**\r\n     * Set position\r\n     *\r\n     * @param string $position\r\n     *\r\n     * @return CustomerContact\r\n     */\r\n    public function setPosition($position)\r\n    {\r\n        $this->position = $position;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get position\r\n     *\r\n     * @return string\r\n     */\r\n    public function getPosition()\r\n    {\r\n        return $this->position;\r\n    }\r\n\r\n\r\n    /**\r\n     * Set customer\r\n     *\r\n     * @param \\AppBundle\\Entity\\Customer $customer\r\n     *\r\n     * @return CustomerContact\r\n     */\r\n    public function setCustomer(\\AppBundle\\Entity\\Customer $customer = null)\r\n    {\r\n        $this->customer = $customer;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get customer\r\n     *\r\n     * @return \\AppBundle\\Entity\\Customer\r\n     */\r\n    public function getCustomer()\r\n    {\r\n        return $this->customer;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"src/AppBundle/Entity/Customer/CustomerOrigin.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 16.07.2016\r\n * Time: 11:02\r\n */\r\n\r\nnamespace AppBundle\\Entity\\Customer;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\n\r\n/**\r\n * Class Service\r\n * @package AppBundle\\Entity\\Customer\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"CustomerOrigin\")\r\n */\r\nclass CustomerOrigin extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"Herkunft\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src/AppBundle/Entity/Customer/CustomerPotential.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 16.07.2016\r\n * Time: 11:02\r\n */\r\n\r\nnamespace AppBundle\\Entity\\Customer;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\n\r\n/**\r\n * Class Service\r\n * @package AppBundle\\Entity\\Customer\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"CustomerPotential\")\r\n */\r\nclass CustomerPotential extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"Potenzial\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src/AppBundle/Entity/Customer/CustomerStatus.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 16.07.2016\r\n * Time: 11:02\r\n */\r\n\r\nnamespace AppBundle\\Entity\\Customer;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\n\r\n/**\r\n * Class Service\r\n * @package AppBundle\\Entity\\Customer\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"CustomerStatus\")\r\n */\r\nclass CustomerStatus extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"Status\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src/AppBundle/Entity/CustomerRepository.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 11.09.2016\r\n * Time: 22:15\r\n */\r\n\r\nnamespace AppBundle\\Entity;\r\n\r\nuse Doctrine\\ORM\\EntityRepository;\r\n\r\nclass CustomerRepository extends EntityRepository\r\n{\r\n    public function findAllBySearchParams($search, $limit = null, $page = null)\r\n    {\r\n        $qb = $this->createQueryBuilder('c');\r\n\r\n        if (isset($search['origin'])) {\r\n            $qb->join('c.origin', 'o', 'WITH', 'o.id = :cOriginId');\r\n            $qb->setParameter('cOriginId', $search['origin']['id']);\r\n        }\r\n\r\n        if (isset($search['potential'])) {\r\n            $qb->join('c.potential', 'p', 'WITH', 'p.id = :potentialId');\r\n            $qb->setParameter('potentialId', $search['potential']['id']);\r\n        }\r\n\r\n        if (isset($search['account_manager'])) {\r\n            $qb->join('c.accountManager', 'am', 'WITH', 'am.id = :amId');\r\n            $qb->setParameter('amId', $search['account_manager']['id']);\r\n        }\r\n\r\n        if (isset($search['status'])) {\r\n            $qb->join('c.status', 's', 'WITH', 's.id = :statusId');\r\n            $qb->setParameter('statusId', $search['status']['id']);\r\n        }\r\n\r\n        if (isset($search['name']) && $search['name'] != \"\") {\r\n            $searchStrings = mbsplit('\\s|,',$search['name']);\r\n            for($i = 0; $i < sizeof($searchStrings); $i++) {\r\n                $qb->andWhere('c.name1 LIKE :name'.$i.' OR c.name2 LIKE :name'.$i);\r\n                $qb->setParameter('name'.$i, '%'. $searchStrings[$i] . '%');\r\n            }\r\n        }\r\n\r\n        if (isset($search['asp_name']) && $search['asp_name'] != \"\") {\r\n            $qb->leftjoin('c.contacts', 'cc', 'WITH', 'cc.customer = c');\r\n            $searchStrings = mbsplit('\\s|,',$search['asp_name']);\r\n            for($i = 0; $i < sizeof($searchStrings); $i++) {\r\n                $qb->andWhere('cc.name1 LIKE :asp_name'.$i.' OR cc.name2 LIKE :asp_name'.$i);\r\n                $qb->setParameter('asp_name'.$i, '%'. $searchStrings[$i] . '%');\r\n            }\r\n        }\r\n\r\n        $qb->orderBy('c.name2');\r\n        $qb->addOrderBy('c.name1');\r\n        $qb->distinct();\r\n\r\n        $query = $qb->getQuery();\r\n\r\n        if ($page == null && $limit = null)\r\n        {\r\n            // Get unpaginated result\r\n            return $query->getResult();\r\n        }\r\n        else\r\n        {\r\n            $qHelper = new QueryHelper();\r\n            $paginator = $qHelper->paginate($query, $page, $limit);\r\n            return $qHelper->getPaginatedResult($paginator);\r\n        }\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,0,0,null,null,1,0,0,null,null,1,0,0,null,null,1,0,0,null,null,1,0,0,0,0,null,null,null,1,0,0,0,0,0,null,null,null,1,1,1,null,1,null,1,null,null,0,null,null,null,1,1,1,null,null,null]},{"name":"src/AppBundle/Entity/Freelancer.php","source":"<?php\r\n/**\r\n * Klasse beschreibt ein Freelancer-Objekt\r\n */\r\n\r\nnamespace AppBundle\\Entity;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse Doctrine\\Common\\Collections\\ArrayCollection;\r\nuse AppBundle\\Entity\\Common\\Person;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\n/**\r\n * Class Freelancer\r\n * @package AppBundle\\Entity\r\n *\r\n * @ORM\\Entity(repositoryClass=\"AppBundle\\Entity\\FreelancerRepository\")\r\n * @ORM\\Table(name=\"Freelancer\")\r\n */\r\nclass Freelancer extends Person implements \\JsonSerializable\r\n{\r\n    /**\r\n     * @ORM\\Column(type=\"integer\", unique=true, nullable=true)\r\n     * @JMS\\Type(\"integer\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $supplierNo;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $companyName;\r\n\r\n    /**\r\n     * @ORM\\OneToOne(targetEntity=\"AppBundle\\Entity\\Freelancer\\FreelancerAddress\", inversedBy=\"freelancer\")\r\n     * @ORM\\JoinColumn(name=\"freelanceraddress_id\", referencedColumnName=\"id\", onDelete=\"CASCADE\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Freelancer\\FreelancerAddress\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     * @JMS\\AccessType(\"public_method\")\r\n     */\r\n    private $address;\r\n\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Freelancer\\FreelancerStatus\")\r\n     * @ORM\\JoinColumn(name=\"status_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Freelancer\\FreelancerStatus\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $flStatus; // Entity\r\n\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Common\\Language\")\r\n     * @ORM\\JoinColumn(name=\"mothertounge_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Common\\Language\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $mothertounge;\r\n\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Common\\Language\")\r\n     * @ORM\\JoinColumn(name=\"mothertounge2_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Common\\Language\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $mothertounge2;\r\n\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Freelancer\\FreelancerRating\")\r\n     * @ORM\\JoinColumn(name=\"fl_rating_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Freelancer\\FreelancerRating\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $flRating; // Entity\r\n\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Common\\YesNoInProgress\")\r\n     * @ORM\\JoinColumn(name=\"nda_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Common\\YesNoInProgress\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $nda;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"boolean\", nullable=true)\r\n     * @JMS\\Type(\"boolean\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $sworn;\r\n\r\n    // Dateien?\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $vatNo;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"boolean\", nullable=true)\r\n     * @JMS\\Type(\"boolean\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $vatPayer;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $taxId;\r\n\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Freelancer\\FreelancerPaymentType\")\r\n     * @ORM\\JoinColumn(name=\"fl_payment_type_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Freelancer\\FreelancerPaymentType\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $flPaymentType;\r\n\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Freelancer\\FreelancerInvoicingType\")\r\n     * @ORM\\JoinColumn(name=\"fl_invoicing_type_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Freelancer\\FreelancerInvoicingType\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $flInvoicingType;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", nullable=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $bankdetails;\r\n\r\n    /**\r\n     * @ORM\\OneToMany(targetEntity=\"AppBundle\\Entity\\Freelancer\\FreelancerPrice\", mappedBy=\"freelancer\")\r\n     * @ORM\\JoinColumn(name=\"price_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"ArrayCollection<AppBundle\\Entity\\Freelancer\\FreelancerPrice>\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $prices;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"boolean\", nullable=true)\r\n     * @JMS\\Type(\"boolean\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $catPrices;\r\n\r\n    /**\r\n     * @ORM\\ManyToMany(targetEntity=\"AppBundle\\Entity\\Common\\Sector\")\r\n     * @ORM\\JoinTable(name=\"freelancers_sectors\",\r\n     *     joinColumns={@ORM\\JoinColumn(name=\"freelancer_id\", referencedColumnName=\"id\", onDelete=\"CASCADE\")},\r\n     *     inverseJoinColumns={@ORM\\JoinColumn(name=\"sector_id\", referencedColumnName=\"id\")}\r\n     *     )\r\n     * @JMS\\Type(\"ArrayCollection<AppBundle\\Entity\\Common\\Sector>\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $sectors; // Entity Collection\r\n\r\n    /**\r\n     * @ORM\\ManyToMany(targetEntity=\"AppBundle\\Entity\\Common\\CatTool\")\r\n     * @ORM\\JoinTable(name=\"freelancers_cattools\",\r\n     *     joinColumns={@ORM\\JoinColumn(name=\"freelancer_id\", referencedColumnName=\"id\", onDelete=\"CASCADE\")},\r\n     *     inverseJoinColumns={@ORM\\JoinColumn(name=\"cattool_id\", referencedColumnName=\"id\")}\r\n     *     )\r\n     * @JMS\\Type(\"ArrayCollection<AppBundle\\Entity\\Common\\CatTool>\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $catTools; // Entity Collection\r\n\r\n    // Abwesenheiten --> Genauer eruieren, was gewünscht ist\r\n\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\User\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\User\")\r\n     * @JMS\\Groups({\"display\"})\r\n     */\r\n    protected $createdBy; // User\r\n\r\n    public function __construct()\r\n    {\r\n        $this->prices = new ArrayCollection();\r\n        $this->sectors = new ArrayCollection();\r\n        $this->catTools = new ArrayCollection();\r\n    }\r\n\r\n    /**\r\n     * Set supplierNo\r\n     *\r\n     * @param string $supplierNo\r\n     *\r\n     * @return mixed\r\n     */\r\n    public function setSupplierNo($supplierNo)\r\n    {\r\n        $this->supplierNo = $supplierNo;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get supplierNo\r\n     *\r\n     * @return string\r\n     */\r\n    public function getSupplierNo()\r\n    {\r\n        return $this->supplierNo;\r\n    }\r\n\r\n\r\n    /**\r\n     * Set companyName\r\n     *\r\n     * @param string $companyName\r\n     *\r\n     * @return mixed\r\n     */\r\n    public function setCompanyName($companyName)\r\n    {\r\n        $this->companyName = $companyName;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get companyName\r\n     *\r\n     * @return string\r\n     */\r\n    public function getCompanyName()\r\n    {\r\n        return $this->companyName;\r\n    }\r\n\r\n    /**\r\n     * Set vatNo\r\n     *\r\n     * @param string $vatNo\r\n     *\r\n     * @return Freelancer\r\n     */\r\n    public function setVatNo($vatNo)\r\n    {\r\n        $this->vatNo = $vatNo;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get vatNo\r\n     *\r\n     * @return string\r\n     */\r\n    public function getVatNo()\r\n    {\r\n        return $this->vatNo;\r\n    }\r\n\r\n    /**\r\n     * Set vatPayer\r\n     *\r\n     * @param boolean $vatPayer\r\n     *\r\n     * @return Freelancer\r\n     */\r\n    public function setVatPayer($vatPayer)\r\n    {\r\n        $this->vatPayer = $vatPayer;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get vatPayer\r\n     *\r\n     * @return boolean\r\n     */\r\n    public function getVatPayer()\r\n    {\r\n        return $this->vatPayer;\r\n    }\r\n    \r\n    /**\r\n     * Set taxId\r\n     *\r\n     * @param string $taxId\r\n     *\r\n     * @return Freelancer\r\n     */\r\n    public function setTaxId($taxId)\r\n    {\r\n        $this->taxId = $taxId;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get taxId\r\n     *\r\n     * @return string\r\n     */\r\n    public function getTaxId()\r\n    {\r\n        return $this->taxId;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Set bankdetails\r\n     *\r\n     * @param string $bankdetails\r\n     *\r\n     * @return Freelancer\r\n     */\r\n    public function setBankdetails($bankdetails)\r\n    {\r\n        $this->bankdetails = $bankdetails;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get bankdetails\r\n     *\r\n     * @return string\r\n     */\r\n    public function getBankdetails()\r\n    {\r\n        return $this->bankdetails;\r\n    }\r\n\r\n    /**\r\n     * Set sworn\r\n     *\r\n     * @param boolean $sworn\r\n     *\r\n     * @return Freelancer\r\n     */\r\n    public function setSworn($sworn)\r\n    {\r\n        $this->sworn = $sworn;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get sworn\r\n     *\r\n     * @return boolean\r\n     */\r\n    public function getSworn()\r\n    {\r\n        return $this->sworn;\r\n    }\r\n\r\n    /**\r\n     * Set address\r\n     *\r\n     * @param \\AppBundle\\Entity\\Freelancer\\FreelancerAddress $address\r\n     *\r\n     * @return Freelancer\r\n     */\r\n    public function setAddress(\\AppBundle\\Entity\\Freelancer\\FreelancerAddress $address = null)\r\n    {\r\n        $this->address = $address;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get address\r\n     *\r\n     * @return \\AppBundle\\Entity\\Freelancer\\FreelancerAddress\r\n     */\r\n    public function getAddress()\r\n    {\r\n        return $this->address;\r\n    }\r\n\r\n    /**\r\n     * Set status\r\n     *\r\n     * @param \\AppBundle\\Entity\\Freelancer\\FreelancerStatus $flStatus\r\n     *\r\n     * @return Freelancer\r\n     */\r\n    public function setFlStatus(\\AppBundle\\Entity\\Freelancer\\FreelancerStatus $flStatus = null)\r\n    {\r\n        $this->flStatus = $flStatus;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get status\r\n     *\r\n     * @return \\AppBundle\\Entity\\Freelancer\\FreelancerStatus\r\n     */\r\n    public function getFlStatus()\r\n    {\r\n        return $this->flStatus;\r\n    }\r\n\r\n    /**\r\n     * Set rating\r\n     *\r\n     * @param \\AppBundle\\Entity\\Freelancer\\FreelancerRating $flRating\r\n     *\r\n     * @return Freelancer\r\n     */\r\n    public function setFlRating(\\AppBundle\\Entity\\Freelancer\\FreelancerRating $flRating = null)\r\n    {\r\n        $this->flRating = $flRating;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get rating\r\n     *\r\n     * @return \\AppBundle\\Entity\\Freelancer\\FreelancerRating\r\n     */\r\n    public function getFlRating()\r\n    {\r\n        return $this->flRating;\r\n    }\r\n\r\n    \r\n    /**\r\n     * Set mothertounge\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\Language $mothertounge\r\n     *\r\n     * @return Freelancer\r\n     */\r\n    public function setMothertounge(\\AppBundle\\Entity\\Common\\Language $mothertounge = null)\r\n    {\r\n        $this->mothertounge = $mothertounge;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get mothertounge\r\n     *\r\n     * @return \\AppBundle\\Entity\\Common\\Language\r\n     */\r\n    public function getMothertounge()\r\n    {\r\n        return $this->mothertounge;\r\n    }\r\n\r\n    /**\r\n     * Set mothertounge2\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\Language $mothertounge2\r\n     *\r\n     * @return Freelancer\r\n     */\r\n    public function setMothertounge2(\\AppBundle\\Entity\\Common\\Language $mothertounge2 = null)\r\n    {\r\n        $this->mothertounge2 = $mothertounge2;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get mothertounge2\r\n     *\r\n     * @return \\AppBundle\\Entity\\Common\\Language\r\n     */\r\n    public function getMothertounge2()\r\n    {\r\n        return $this->mothertounge2;\r\n    }\r\n\r\n    /**\r\n     * Set nda\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\YesNoInProgress $nda\r\n     *\r\n     * @return Freelancer\r\n     */\r\n    public function setNda(\\AppBundle\\Entity\\Common\\YesNoInProgress $nda = null)\r\n    {\r\n        $this->nda = $nda;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get nda\r\n     *\r\n     * @return \\AppBundle\\Entity\\Common\\YesNoInProgress\r\n     */\r\n    public function getNda()\r\n    {\r\n        return $this->nda;\r\n    }\r\n    \r\n\r\n    /**\r\n     * Set catPrices\r\n     *\r\n     * @param boolean $catPrices\r\n     *\r\n     * @return Freelancer\r\n     */\r\n    public function setCatPrices($catPrices)\r\n    {\r\n        $this->catPrices = $catPrices;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get catPrices\r\n     *\r\n     * @return boolean\r\n     */\r\n    public function getCatPrices()\r\n    {\r\n        return $this->catPrices;\r\n    }\r\n    \r\n    \r\n\r\n    /**\r\n     * Add price\r\n     *\r\n     * @param \\AppBundle\\Entity\\Freelancer\\FreelancerPrice $price\r\n     *\r\n     * @return Freelancer\r\n     */\r\n    public function addPrice(\\AppBundle\\Entity\\Freelancer\\FreelancerPrice $price)\r\n    {\r\n        $price->setFreelancer($this);\r\n        $this->prices[] = $price;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Remove price\r\n     *\r\n     * @param \\AppBundle\\Entity\\Freelancer\\FreelancerPrice $price\r\n     */\r\n    public function removePrice(\\AppBundle\\Entity\\Freelancer\\FreelancerPrice $price)\r\n    {\r\n        $this->prices->removeElement($price);\r\n        $price->setFreelancer(null);\r\n    }\r\n\r\n    /**\r\n     * Get prices\r\n     *\r\n     * @return \\Doctrine\\Common\\Collections\\Collection\r\n     */\r\n    public function getPrices()\r\n    {\r\n        return $this->prices;\r\n    }\r\n\r\n    /**\r\n     * Add sector\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\Sector $sector\r\n     *\r\n     * @return Freelancer\r\n     */\r\n    public function addSector(\\AppBundle\\Entity\\Common\\Sector $sector)\r\n    {\r\n        $this->sectors[] = $sector;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Remove sector\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\Sector $sector\r\n     */\r\n    public function removeSector(\\AppBundle\\Entity\\Common\\Sector $sector)\r\n    {\r\n        $this->sectors->removeElement($sector);\r\n    }\r\n\r\n    /**\r\n     * Get sectors\r\n     *\r\n     * @return \\Doctrine\\Common\\Collections\\Collection\r\n     */\r\n    public function getSectors()\r\n    {\r\n        return $this->sectors;\r\n    }\r\n\r\n    /**\r\n     * Add catTool\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\CatTool $catTool\r\n     *\r\n     * @return Freelancer\r\n     */\r\n    public function addCatTool(\\AppBundle\\Entity\\Common\\CatTool $catTool)\r\n    {\r\n        $this->catTools[] = $catTool;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Remove catTool\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\CatTool $catTool\r\n     */\r\n    public function removeCatTool(\\AppBundle\\Entity\\Common\\CatTool $catTool)\r\n    {\r\n        $this->catTools->removeElement($catTool);\r\n    }\r\n\r\n    /**\r\n     * Get catTools\r\n     *\r\n     * @return \\Doctrine\\Common\\Collections\\Collection\r\n     */\r\n    public function getCatTools()\r\n    {\r\n        return $this->catTools;\r\n    }\r\n\r\n\r\n    public function jsonSerialize()\r\n    {\r\n        $vars = get_object_vars($this);\r\n\r\n        return $vars;\r\n    }\r\n\r\n\r\n    /**\r\n     * Set flPaymentType\r\n     *\r\n     * @param \\AppBundle\\Entity\\Freelancer\\FreelancerPaymentType $flPaymentType\r\n     *\r\n     * @return Freelancer\r\n     */\r\n    public function setFlPaymentType(\\AppBundle\\Entity\\Freelancer\\FreelancerPaymentType $flPaymentType = null)\r\n    {\r\n        $this->flPaymentType = $flPaymentType;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get flPaymentType\r\n     *\r\n     * @return \\AppBundle\\Entity\\Freelancer\\FreelancerPaymentType\r\n     */\r\n    public function getFlPaymentType()\r\n    {\r\n        return $this->flPaymentType;\r\n    }\r\n\r\n\r\n    /**\r\n     * Set flInvoicingType\r\n     *\r\n     * @param \\AppBundle\\Entity\\Freelancer\\FreelancerInvoicingType $flInvoicingType\r\n     *\r\n     * @return Freelancer\r\n     */\r\n    public function setFlInvoicingType(\\AppBundle\\Entity\\Freelancer\\FreelancerInvoicingType $flInvoicingType = null)\r\n    {\r\n        $this->flInvoicingType = $flInvoicingType;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get flInvoicingType\r\n     *\r\n     * @return \\AppBundle\\Entity\\Freelancer\\FreelancerInvoicingType\r\n     */\r\n    public function getFlInvoicingType()\r\n    {\r\n        return $this->flInvoicingType;\r\n    }\r\n\r\n    /**\r\n     * Set createdBy\r\n     *\r\n     * @param \\AppBundle\\Entity\\User $createdBy\r\n     *\r\n     * @return Freelancer\r\n     */\r\n    public function setCreatedBy(\\AppBundle\\Entity\\User $createdBy = null)\r\n    {\r\n        $this->createdBy = $createdBy;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get createdBy\r\n     *\r\n     * @return \\AppBundle\\Entity\\User\r\n     */\r\n    public function getCreatedBy()\r\n    {\r\n        return $this->createdBy;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,1,1,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,1,null,1,null,null,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,null,null,0,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"src/AppBundle/Entity/Freelancer/FreelancerAddress.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 17.07.2016\r\n * Time: 19:17\r\n */\r\n\r\nnamespace AppBundle\\Entity\\Freelancer;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\Common\\Address;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\n/**\r\n * Class Address\r\n * @package AppBundle\\Entity\\Freelancer\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"FreelancerAddress\")\r\n */\r\nclass FreelancerAddress extends Address\r\n{\r\n    /**\r\n     * @ORM\\OneToOne(targetEntity=\"AppBundle\\Entity\\Freelancer\", mappedBy=\"address\")\r\n     * @ORM\\JoinColumn(name=\"freelancer_id\", referencedColumnName=\"id\", onDelete=\"SET NULL\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Freelancer\")\r\n     */\r\n    private $freelancer;\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    public function __construct()\r\n    {\r\n\r\n    }\r\n\r\n    /**\r\n     * Get id\r\n     *\r\n     * @return integer\r\n     */\r\n    public function getId()\r\n    {\r\n        return $this->id;\r\n    }\r\n\r\n    /**\r\n     * Set street\r\n     *\r\n     * @param string $street\r\n     *\r\n     * @return FreelancerAddress\r\n     */\r\n    public function setStreet($street)\r\n    {\r\n        $this->street = $street;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get street\r\n     *\r\n     * @return string\r\n     */\r\n    public function getStreet()\r\n    {\r\n        return $this->street;\r\n    }\r\n\r\n    /**\r\n     * Set street2\r\n     *\r\n     * @param string $street2\r\n     *\r\n     * @return FreelancerAddress\r\n     */\r\n    public function setStreet2($street2)\r\n    {\r\n        $this->street2 = $street2;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get street2\r\n     *\r\n     * @return string\r\n     */\r\n    public function getStreet2()\r\n    {\r\n        return $this->street2;\r\n    }\r\n\r\n    /**\r\n     * Set zipcode\r\n     *\r\n     * @param string $zipcode\r\n     *\r\n     * @return FreelancerAddress\r\n     */\r\n    public function setZipcode($zipcode)\r\n    {\r\n        $this->zipcode = $zipcode;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get zipcode\r\n     *\r\n     * @return string\r\n     */\r\n    public function getZipcode()\r\n    {\r\n        return $this->zipcode;\r\n    }\r\n\r\n    /**\r\n     * Set city\r\n     *\r\n     * @param string $city\r\n     *\r\n     * @return FreelancerAddress\r\n     */\r\n    public function setCity($city)\r\n    {\r\n        $this->city = $city;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get city\r\n     *\r\n     * @return string\r\n     */\r\n    public function getCity()\r\n    {\r\n        return $this->city;\r\n    }\r\n\r\n    /**\r\n     * Set freelancer\r\n     *\r\n     * @param \\AppBundle\\Entity\\Freelancer $freelancer\r\n     *\r\n     * @return FreelancerAddress\r\n     */\r\n    public function setFreelancer(\\AppBundle\\Entity\\Freelancer $freelancer)\r\n    {\r\n        $this->freelancer = $freelancer;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get freelancer\r\n     *\r\n     * @return \\Doctrine\\Common\\Collections\\Collection\r\n     */\r\n    public function getFreelancer()\r\n    {\r\n        return $this->freelancer;\r\n    }\r\n\r\n    /**\r\n     * Set country\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\Country $country\r\n     *\r\n     * @return FreelancerAddress\r\n     */\r\n    public function setCountry(\\AppBundle\\Entity\\Common\\Country $country = null)\r\n    {\r\n        $this->country = $country;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get country\r\n     *\r\n     * @return \\AppBundle\\Entity\\Common\\Country\r\n     */\r\n    public function getCountry()\r\n    {\r\n        return $this->country;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,1,null,1,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"src/AppBundle/Entity/Freelancer/FreelancerInvoicingType.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 16.07.2016\r\n * Time: 11:03\r\n */\r\n\r\nnamespace AppBundle\\Entity\\Freelancer;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\n\r\n/**\r\n * Class FreelancerPaymentType\r\n * @package AppBundle\\Entity\\Freelancer\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"FreelancerInvoicingType\")\r\n */\r\nclass FreelancerInvoicingType extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"Rechnungsart\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src/AppBundle/Entity/Freelancer/FreelancerPaymentType.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 16.07.2016\r\n * Time: 11:03\r\n */\r\n\r\nnamespace AppBundle\\Entity\\Freelancer;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\n\r\n/**\r\n * Class FreelancerPaymentType\r\n * @package AppBundle\\Entity\\Freelancer\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"FreelancerPaymentType\")\r\n */\r\nclass FreelancerPaymentType extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"Bezahlart\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src/AppBundle/Entity/Freelancer/FreelancerPrice.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 17.07.2016\r\n * Time: 20:19\r\n */\r\n\r\nnamespace AppBundle\\Entity\\Freelancer;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\Common\\Service;\r\nuse AppBundle\\Entity\\Common\\PriceUnit;\r\nuse AppBundle\\Entity\\Freelancer;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\n/**\r\n * Class FreelancerPrice\r\n * @package AppBundle\\Entity\\Freelancer\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"FreelancerPrice\")\r\n */\r\nclass FreelancerPrice\r\n{\r\n    /**\r\n     * @ORM\\Id\r\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\r\n     * @ORM\\Column(type=\"integer\")\r\n     * @JMS\\Type(\"integer\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $id;\r\n\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Common\\Language\")\r\n     * @ORM\\JoinColumn(name=\"lngSource_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Common\\Language\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $lngSource;\r\n\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Common\\Language\")\r\n     * @ORM\\JoinColumn(name=\"lngTarget_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Common\\Language\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $lngTarget;\r\n\r\n\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Common\\Service\")\r\n     * @ORM\\JoinColumn(name=\"service_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Common\\Service\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $service;\r\n\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Common\\PriceUnit\")\r\n     * @ORM\\JoinColumn(name=\"priceunit_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Common\\PriceUnit\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $priceUnit;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"float\")\r\n     * @JMS\\Type(\"double\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $pricePerUnit;\r\n\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Common\\Currency\")\r\n     * @ORM\\JoinColumn(name=\"currency_id\", referencedColumnName=\"id\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Common\\Currency\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $currency;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"float\")\r\n     * @JMS\\Type(\"double\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $minimumPrice;\r\n\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=\"AppBundle\\Entity\\Freelancer\", inversedBy=\"prices\")\r\n     * @ORM\\JoinColumn(name=\"freelancer_id\", referencedColumnName=\"id\", onDelete=\"CASCADE\")\r\n     * @JMS\\Type(\"AppBundle\\Entity\\Freelancer\")\r\n     */\r\n    private $freelancer;\r\n\r\n    /**\r\n     * Get id\r\n     *\r\n     * @return integer\r\n     */\r\n    public function getId()\r\n    {\r\n        return $this->id;\r\n    }\r\n\r\n    /**\r\n     * Set lngSource\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\Language $lngSource\r\n     *\r\n     * @return FreelancerPrice\r\n     */\r\n    public function setLngSource(\\AppBundle\\Entity\\Common\\Language $lngSource = null)\r\n    {\r\n        $this->lngSource = $lngSource;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get lngSource\r\n     *\r\n     * @return \\AppBundle\\Entity\\Common\\Language\r\n     */\r\n    public function getLngSource()\r\n    {\r\n        return $this->lngSource;\r\n    }\r\n\r\n    /**\r\n     * Set lngTarget\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\Language $lngTarget\r\n     *\r\n     * @return FreelancerPrice\r\n     */\r\n    public function setLngTarget(\\AppBundle\\Entity\\Common\\Language $lngTarget = null)\r\n    {\r\n        $this->lngTarget = $lngTarget;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get lngTarget\r\n     *\r\n     * @return \\AppBundle\\Entity\\Common\\Language\r\n     */\r\n    public function getLngTarget()\r\n    {\r\n        return $this->lngTarget;\r\n    }\r\n\r\n    /**\r\n     * Set minimumPrice\r\n     *\r\n     * @param float $minimumPrice\r\n     *\r\n     * @return FreelancerPrice\r\n     */\r\n    public function setMinimumPrice($minimumPrice)\r\n    {\r\n        $this->minimumPrice = $minimumPrice;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get minimumPrice\r\n     *\r\n     * @return float\r\n     */\r\n    public function getMinimumPrice()\r\n    {\r\n        return $this->minimumPrice;\r\n    }\r\n    \r\n    /**\r\n     * Set pricePerUnit\r\n     *\r\n     * @param float $pricePerUnit\r\n     *\r\n     * @return FreelancerPrice\r\n     */\r\n    public function setPricePerUnit($pricePerUnit)\r\n    {\r\n        $this->pricePerUnit = $pricePerUnit;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get pricePerUnit\r\n     *\r\n     * @return float\r\n     */\r\n    public function getPricePerUnit()\r\n    {\r\n        return $this->pricePerUnit;\r\n    }\r\n\r\n    /**\r\n     * Set service\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\Service $service\r\n     *\r\n     * @return FreelancerPrice\r\n     */\r\n    public function setService(\\AppBundle\\Entity\\Common\\Service $service = null)\r\n    {\r\n        $this->service = $service;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get service\r\n     *\r\n     * @return \\AppBundle\\Entity\\Common\\Service\r\n     */\r\n    public function getService()\r\n    {\r\n        return $this->service;\r\n    }\r\n\r\n    /**\r\n     * Set priceUnit\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\PriceUnit $priceUnit\r\n     *\r\n     * @return FreelancerPrice\r\n     */\r\n    public function setPriceUnit(\\AppBundle\\Entity\\Common\\PriceUnit $priceUnit = null)\r\n    {\r\n        $this->priceUnit = $priceUnit;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get priceUnit\r\n     *\r\n     * @return \\AppBundle\\Entity\\Common\\PriceUnit\r\n     */\r\n    public function getPriceUnit()\r\n    {\r\n        return $this->priceUnit;\r\n    }\r\n\r\n    /**\r\n     * Set currency\r\n     *\r\n     * @param \\AppBundle\\Entity\\Common\\Currency $currency\r\n     *\r\n     * @return FreelancerPrice\r\n     */\r\n    public function setCurrency(\\AppBundle\\Entity\\Common\\Currency $currency = null)\r\n    {\r\n        $this->currency = $currency;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get currency\r\n     *\r\n     * @return \\AppBundle\\Entity\\Common\\Currency\r\n     */\r\n    public function getCurrency()\r\n    {\r\n        return $this->currency;\r\n    }\r\n\r\n    /**\r\n     * Set freelancer\r\n     *\r\n     * @param \\AppBundle\\Entity\\Freelancer $freelancer\r\n     *\r\n     * @return FreelancerPrice\r\n     */\r\n    public function setFreelancer(\\AppBundle\\Entity\\Freelancer $freelancer = null)\r\n    {\r\n        $this->freelancer = $freelancer;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get freelancer\r\n     *\r\n     * @return \\AppBundle\\Entity\\Freelancer\r\n     */\r\n    public function getFreelancer()\r\n    {\r\n        return $this->freelancer;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"src/AppBundle/Entity/Freelancer/FreelancerRating.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 16.07.2016\r\n * Time: 11:02\r\n */\r\n\r\nnamespace AppBundle\\Entity\\Freelancer;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\n\r\n/**\r\n * Class Service\r\n * @package AppBundle\\Entity\\Common\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"FreelancerRating\")\r\n */\r\nclass FreelancerRating extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"Rating\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src/AppBundle/Entity/Freelancer/FreelancerStatus.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 16.07.2016\r\n * Time: 11:01\r\n */\r\n\r\nnamespace AppBundle\\Entity\\Freelancer;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\n\r\n/**\r\n * Class Service\r\n * @package AppBundle\\Entity\\Common\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"FreelancerStatus\")\r\n */\r\nclass FreelancerStatus extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"Status\";\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src/AppBundle/Entity/FreelancerRepository.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 11.09.2016\r\n * Time: 22:15\r\n */\r\n\r\nnamespace AppBundle\\Entity;\r\n\r\n\r\nuse Doctrine\\ORM\\EntityRepository;\r\nuse Doctrine\\ORM\\Tools\\Pagination\\Paginator;\r\n\r\nclass FreelancerRepository extends EntityRepository\r\n{\r\n    public function findAllBySearchParams($search, $limit = null, $page = null)\r\n    {\r\n        $qbSl = $this->_em->createQueryBuilder();\r\n        $qbSl->select('ls_search.id');\r\n        $qbSl->from('AppBundle:Common\\\\Language', 'ls_search');\r\n        $qbSl->leftJoin('AppBundle:Common\\\\Language', 'mls', 'WITH', 'mls = ls_search.mainItem');\r\n        $qbSl->where('mls.id = :lngSourceId or ls_search.id = :lngSourceId');\r\n\r\n        $qbTl = $this->_em->createQueryBuilder();\r\n        $qbTl->select('lt_search.id');\r\n        $qbTl->from('AppBundle:Common\\\\Language', 'lt_search');\r\n        $qbTl->leftJoin('AppBundle:Common\\\\Language', 'mlt', 'WITH', 'mlt = lt_search.mainItem');\r\n        $qbTl->where('mlt.id = :lngTargetId or lt_search.id = :lngTargetId');\r\n\r\n        $qbSector = $this->_em->createQueryBuilder();\r\n        $qbSector->select('sec_search.id');\r\n        $qbSector->from('AppBundle:Common\\\\Sector', 'sec_search');\r\n        $qbSector->leftJoin('AppBundle:Common\\\\Sector', 'mainsec', 'WITH', 'mainsec = sec_search.mainItem');\r\n        $qbSector->where('mainsec.id = :sectorId or sec_search.id = :sectorId');\r\n\r\n\r\n        $qb = $this->createQueryBuilder('fl');\r\n\r\n        if (isset($search['lng_source']) || isset($search['lng_target'])) {\r\n            $qb->join('fl.prices', 'p', 'WITH', 'fl = p.freelancer');\r\n\r\n            if(isset($search['lng_source']['id'])) {\r\n                $qb->join('p.lngSource', 'ls');\r\n                $qb->andWhere($qbSl->expr()->in('ls.id', $qbSl->getDQL()));\r\n                $qb->setParameter('lngSourceId', $search['lng_source']['id']);\r\n            }\r\n            \r\n\r\n            if (isset($search['lng_target']['id'])) {\r\n                $qb->join('p.lngTarget', 'lt');\r\n                $qb->andWhere($qbTl->expr()->in('lt.id', $qbTl->getDQL()));\r\n                $qb->setParameter('lngTargetId', $search['lng_target']['id']);\r\n            }\r\n\r\n        }\r\n\r\n        if (isset($search['fl_status']['id'])) {\r\n            $qb->join('fl.flStatus', 's', 'WITH', 's.id = :flStatusId');\r\n            $qb->setParameter('flStatusId', $search['fl_status']['id']);\r\n        }\r\n\r\n        if (isset($search['sector']['id'])) {\r\n            $qb->join('fl.sectors', 's');\r\n            $qb->andWhere($qbSl->expr()->in('s.id', $qbSector->getDQL()));\r\n            $qb->setParameter('sectorId', $search['sector']['id']);\r\n        }\r\n\r\n        if (isset($search['name'])) {\r\n            $searchStrings = mbsplit('\\s|,',$search['name']);\r\n            for($i = 0; $i < sizeof($searchStrings); $i++) {\r\n                $qb->andWhere('fl.name1 LIKE :name'.$i.' OR fl.name2 LIKE :name'.$i.' OR fl.companyName LIKE :name'.$i);\r\n                $qb->setParameter('name'.$i, '%'. $searchStrings[$i] . '%');\r\n            }\r\n        }\r\n\r\n        $qb->orderBy('fl.name2');\r\n        $qb->addOrderBy('fl.name1');\r\n        $qb->distinct();\r\n\r\n        $query = $qb->getQuery();\r\n\r\n\r\n        if ($page == null && $limit = null)\r\n        {\r\n            // Get unpaginated result\r\n            return $query->getResult();\r\n        }\r\n        else\r\n        {\r\n            $qHelper = new QueryHelper();\r\n            $paginator = $qHelper->paginate($query, $page, $limit);\r\n            return $qHelper->getPaginatedResult($paginator);\r\n        }\r\n\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,1,1,1,null,1,1,1,1,1,null,1,1,1,1,1,null,null,1,null,1,0,null,0,0,0,0,null,null,null,0,0,0,0,null,null,null,null,1,0,0,null,null,1,0,0,0,null,null,1,0,0,0,0,null,null,null,1,1,1,null,1,null,null,1,null,null,0,null,null,null,1,1,1,null,null,null,null]},{"name":"src/AppBundle/Entity/QueryHelper.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 20.08.2017\r\n * Time: 12:40\r\n */\r\n\r\nnamespace AppBundle\\Entity;\r\n\r\nuse Doctrine\\ORM\\Tools\\Pagination\\Paginator;\r\nuse JMS\\Serializer\\SerializationContext;\r\nuse JMS\\Serializer\\SerializerBuilder;\r\n\r\nclass QueryHelper\r\n{\r\n    /**\r\n     * Paginator Helper\r\n     *\r\n     * Pass through a query object, current page & limit\r\n     * the offset is calculated from the page and limit\r\n     * returns an `Paginator` instance, which you can call the following on:\r\n     *\r\n     *     $paginator->getIterator()->count() # Total fetched (ie: `5` posts)\r\n     *     $paginator->count() # Count of ALL posts (ie: `20` posts)\r\n     *     $paginator->getIterator() # ArrayIterator\r\n     *\r\n     * @param \\Doctrine\\ORM\\Query $dql   DQL Query Object or QueryBuilder\r\n     * @param integer            $page  Current page (defaults to 1)\r\n     * @param integer            $limit The total number per page (defaults to 10)\r\n     *\r\n     * @return \\Doctrine\\ORM\\Tools\\Pagination\\Paginator\r\n     */\r\n    public static function paginate($dql, $page = 1, $limit = 10)\r\n    {\r\n        $paginator = new Paginator($dql, false);\r\n\r\n        if ($page < 1)\r\n            $page = 1;\r\n        /*\r\n        if($limit < 20)\r\n            $limit = 20;\r\n        */\r\n\r\n        $paginator->getQuery()\r\n            ->setFirstResult($limit * ($page - 1)) // Offset\r\n            ->setMaxResults($limit); // Limit\r\n\r\n        return $paginator;\r\n    }\r\n\r\n    public static function getPaginatedResult(\\Doctrine\\ORM\\Tools\\Pagination\\Paginator $paginator) {\r\n        $result = new \\stdClass();\r\n        $result->items = $paginator->getQuery()->getResult();\r\n        $result->itemsTotal = $paginator->count();\r\n        $result->itemsPerPage = $paginator->getQuery()->getMaxResults();\r\n        $result->page = ceil(($paginator->getQuery()->getFirstResult() + 1) / $result->itemsPerPage);\r\n        $result->pageMax = ceil($result->itemsTotal / $result->itemsPerPage);\r\n\r\n        return $result;\r\n    }\r\n\r\n    public static function getSerializableResult(\\stdClass $paginatedResult) {\r\n        // Liefern der Suche als Ergebnis (JSON)\r\n        $serializer = SerializerBuilder::create()->build();\r\n\r\n        $itemListTemp = $serializer->serialize(\r\n            $paginatedResult->items,\r\n            'json',\r\n            SerializationContext::create()->setGroups(['display'])\r\n        );\r\n\r\n        $paginatedResult->items = json_decode($itemListTemp, true);\r\n\r\n        return $paginatedResult;\r\n    }\r\n\r\n    public static function getFullEntityName($entityName) {\r\n        $collections = array(\"Freelancer\", \"Customer\", \"User\");\r\n        $found = false;\r\n        for($i = 0; $i < count($collections); $i++) {\r\n            if(strrpos($entityName, $collections[$i]) === 0) {\r\n                $entityName = $collections[$i] . \"\\\\\" . $entityName;\r\n                $found = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if(!$found) {\r\n            $entityName = \"Common\\\\\".$entityName;\r\n        }\r\n\r\n        return $entityName;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,null,2,0,null,null,null,null,null,2,2,2,null,2,null,null,null,2,2,2,2,2,2,null,2,null,null,null,null,2,null,2,2,2,2,null,null,2,null,2,null,null,null,0,0,0,0,0,0,0,null,null,null,0,0,null,null,0,null,null]},{"name":"src/AppBundle/Entity/SimpleEntity.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 17.07.2016\r\n * Time: 18:34\r\n */\r\n\r\nnamespace AppBundle\\Entity;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\nabstract class SimpleEntity implements \\JsonSerializable\r\n{\r\n    /**\r\n     * @ORM\\Column(type=\"integer\")\r\n     * @ORM\\Id\r\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\r\n     * @JMS\\Type(\"integer\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    protected $id;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\")\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\"})\r\n     */\r\n    protected $name;\r\n\r\n    // Getter und Setter\r\n\r\n    public function getId() {\r\n        return $this->id;\r\n    }\r\n\r\n    public function setId($id) {\r\n        $this->id = $id;\r\n    }\r\n\r\n    public function getName() {\r\n        return $this->name;\r\n    }\r\n\r\n    public function setName($name) {\r\n        $this->name = $name;\r\n    }\r\n\r\n    abstract public function getDisplayName();\r\n\r\n    /**\r\n     * @return object\r\n     * Serialize only the properties needed\r\n     */\r\n    public function jsonSerialize()\r\n    {\r\n        $vars = get_object_vars($this);\r\n        return $vars;\r\n    }\r\n\r\n    public function createSubItemObject($subItems, $subItemClass) {\r\n\r\n        $vars = $vars = new \\stdClass();\r\n\r\n        // Array aus den Subvalues erstellen\r\n        $subArray = array();\r\n        foreach($subItems as $sub) {\r\n            $subObj = new \\stdClass();\r\n            $subObj->id = $sub->getId();\r\n            $subObj->name = $sub->getName();\r\n            $subArray[] = $subObj;\r\n        }\r\n\r\n        $vars->values = $subArray;\r\n\r\n        // Anzeigename SubEntity hinzufügen\r\n        $subLang = new $subItemClass();\r\n        $vars->display_name = $subLang->getDisplayName();\r\n\r\n        return $vars;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,0,0,null,null,5,null,null,null,0,0,null,null,null,null,null,null,null,null,null,2,2,null,null,null,null,0,null,null,0,0,0,0,0,0,null,null,0,null,null,0,0,null,0,null,null]},{"name":"src/AppBundle/Entity/TwoLevelEntity.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 16.07.2016\r\n * Time: 11:04\r\n */\r\n\r\nnamespace AppBundle\\Entity;\r\n\r\nuse Doctrine\\Common\\Collections\\ArrayCollection;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\n/**\r\n * Class TwoLevelEntity\r\n * @package AppBundle\\Entity\r\n *\r\n **/\r\nabstract class TwoLevelEntity extends SimpleEntity implements \\JsonSerializable\r\n{\r\n    // Redeclare with Repository in implementing class\r\n    protected $mainItem;\r\n    protected $implementingClassName;\r\n\r\n    public function __construct()\r\n    {\r\n        $this->implementingClassName = get_class($this);\r\n        $this->mainItem = null;\r\n    }\r\n\r\n    /**\r\n     * Set mainItem\r\n     *\r\n     * @param \\AppBundle\\Entity\\TwoLevelEntity $mainItem\r\n     *\r\n     * @return \\AppBundle\\Entity\\TwoLevelEntity\r\n     */\r\n    public function setMainItem(\\AppBundle\\Entity\\TwoLevelEntity $mainItem = null)\r\n    {\r\n        // ToDo: Falls das Item bereits Subitems hat, darf sie kein Hauptitem kriegen!\r\n        // ToDo: Evtl. muss das im Controller oder in OnBeforePersist abgefangen werden\r\n        if ($mainItem === null || $mainItem->isMainItem()) {\r\n            // Sprache darf nur einer Hauptsprache als Subsprache hinzugefügt werden\r\n            $this->mainItem = $mainItem;\r\n        }\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get mainItem\r\n     *\r\n     * @return \\AppBundle\\Entity\\TwoLevelEntity\r\n     */\r\n    public function getMainItem()\r\n    {\r\n        return $this->mainItem;\r\n    }\r\n\r\n    public function isMainItem()\r\n    {\r\n        return empty($this->getmainItem());\r\n    }\r\n\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,1,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,0,null,null,null,null,null,null,null,null,null,1,null,null,null,null,1,null,null,null]},{"name":"src/AppBundle/Entity/TwoLevelEntityRepository.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 03.08.2017\r\n * Time: 21:15\r\n */\r\n\r\nnamespace AppBundle\\Entity;\r\n\r\nuse Doctrine\\ORM\\EntityRepository;\r\n\r\nclass TwoLevelEntityRepository extends EntityRepository\r\n{\r\n    public function findAllItems()\r\n    {\r\n        $q = $this->createQueryBuilder('item');\r\n\r\n        $q->leftJoin('item.mainItem', 'mainItem');\r\n\r\n        $q->orderBy('mainItem.name'); // Main items first, since their main language is null\r\n        $q->addOrderBy('item.name');\r\n\r\n        $result = $q->getQuery()\r\n            ->getResult();\r\n\r\n        return $result;\r\n    }\r\n\r\n    public function findAllSubItems($mainId) {\r\n\r\n        // Falls Parameter nicht angegeben, null zurückgeben\r\n        if (empty($mainId)) {\r\n            return null;\r\n        }\r\n\r\n        $q = $this->createQueryBuilder('item');\r\n\r\n        $q->where('item.mainItem = :mainId');\r\n\r\n        $q->orderBy('item.name');\r\n\r\n        $q->setParameter('mainId', $mainId);\r\n\r\n        $result = $q->getQuery()\r\n            ->getResult();\r\n\r\n        return $result;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,null,1,1,null,1,1,null,1,null,null,null,null,null,0,0,null,null,0,null,0,null,0,null,0,null,0,0,null,0,null,null]},{"name":"src/AppBundle/Entity/User.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 17.07.2016\r\n * Time: 21:56\r\n */\r\n\r\nnamespace AppBundle\\Entity;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse Doctrine\\Common\\Collections\\ArrayCollection;\r\nuse Symfony\\Component\\Security\\Core\\User\\AdvancedUserInterface;\r\nuse AppBundle\\Entity\\User\\UserRole;\r\nuse JMS\\Serializer\\Annotation as JMS;\r\n\r\n/**\r\n * Class User\r\n * @package AppBundle\\Entity\r\n *\r\n * !!! Eventlistener OnBeforePersist adds the USER_ROLE to each new User !!!\r\n *\r\n * @ORM\\Entity(repositoryClass=\"AppBundle\\Entity\\UserRepository\")\r\n * @ORM\\Table(name=\"User\")\r\n */\r\nclass User implements AdvancedUserInterface\r\n{\r\n    /**\r\n     * @ORM\\Id\r\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\r\n     * @ORM\\Column(type=\"integer\")\r\n     * @JMS\\Type(\"integer\")\r\n     * @JMS\\Groups({\"display\", \"update\"})\r\n     */\r\n    private $id;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=25, unique=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"create\"})\r\n     */\r\n    private $username;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=64)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"create\"})\r\n     */\r\n    private $password;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=100, unique=true)\r\n     * @JMS\\Type(\"string\")\r\n     * @JMS\\Groups({\"display\", \"update\", \"create\"})\r\n     */\r\n    private $email;\r\n\r\n\r\n    /**\r\n     * @ORM\\ManyToMany(targetEntity=\"AppBundle\\Entity\\User\\UserRole\", inversedBy=\"users\")\r\n     * @ORM\\JoinTable(name=\"users_roles\")\r\n     * @JMS\\Type(\"ArrayCollection<AppBundle\\Entity\\User\\UserRole>\")\r\n     * @JMS\\Groups({\"display\", \"update\", \"create\"})\r\n     */\r\n    private $roles;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"datetime\", nullable=true)\r\n     */\r\n    private $lastLoginAttempt;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"integer\", nullable=true)\r\n     */\r\n    private $failedLoginAttempts;\r\n\r\n    /**\r\n     * @ORM\\Column(name=\"is_active\", type=\"boolean\")\r\n     */\r\n    private $isActive;\r\n\r\n    public function __construct()\r\n    {\r\n        $this->isActive = true;\r\n        $this->failedLoginAttempts = 0;\r\n\r\n        $this->roles = new ArrayCollection();\r\n    }\r\n\r\n    /**\r\n     * @return integer\r\n     */\r\n    public function getId()\r\n    {\r\n        return $this->id;\r\n    }\r\n\r\n    /**\r\n     * @return mixed\r\n     */\r\n    public function getUsername()\r\n    {\r\n        return $this->username;\r\n    }\r\n\r\n    /**\r\n     * @param string $username\r\n     *\r\n     * @return User\r\n     */\r\n    public function setUsername($username)\r\n    {\r\n        $this->username = $username;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * @return mixed\r\n     */\r\n    public function getPassword()\r\n    {\r\n        return $this->password;\r\n    }\r\n\r\n    /**\r\n     * @param string $password\r\n     *\r\n     * @return User\r\n     */\r\n    public function setPassword($password)\r\n    {\r\n        $this->password = $password;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * @return null\r\n     */\r\n    public function getSalt()\r\n    {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @return array\r\n     */\r\n    public function getRoles()\r\n    {\r\n        $roles = array();\r\n        foreach ($this->roles as $role) {\r\n            array_push($roles, $role->getName());\r\n        }\r\n\r\n        return $roles;\r\n    }\r\n\r\n    /**\r\n     * @return ArrayCollection\r\n     */\r\n    public function getRealRoles() {\r\n        return $this->roles;\r\n    }\r\n\r\n    public function hasRole($role)\r\n    {\r\n        if (in_array($role, $this->roles->toArray())) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param \\AppBundle\\Entity\\User\\UserRole $role\r\n     *\r\n     * @return User\r\n     */\r\n    public function addRole(\\AppBundle\\Entity\\User\\UserRole $role)\r\n    {\r\n        $this->roles[] = $role;\r\n        $role->addUser($this);\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * @param \\AppBundle\\Entity\\User\\UserRole $role\r\n     */\r\n    public function removeRole(\\AppBundle\\Entity\\User\\UserRole $role)\r\n    {\r\n        $this->roles->removeElement($role);\r\n    }\r\n\r\n\r\n    /**\r\n     * Set email\r\n     *\r\n     * @param string $email\r\n     *\r\n     * @return User\r\n     */\r\n    public function setEmail($email)\r\n    {\r\n        $this->email = $email;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * @return string\r\n     */\r\n    public function getEmail()\r\n    {\r\n        return $this->email;\r\n    }\r\n\r\n    /**\r\n     * @param boolean $isActive\r\n     *\r\n     * @return User\r\n     */\r\n    public function setIsActive($isActive)\r\n    {\r\n        $this->isActive = $isActive;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * @return boolean\r\n     */\r\n    public function getIsActive()\r\n    {\r\n        return $this->isActive;\r\n    }\r\n\r\n    /**\r\n     * @param boolean $lastLoginAttempt\r\n     *\r\n     * @return User\r\n     */\r\n    public function setLastLoginAttempt($lastLoginAttempt)\r\n    {\r\n        $this->lastLoginAttempt = $lastLoginAttempt;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * @return \\DateTime\r\n     */\r\n    public function getLastLoginAttempt()\r\n    {\r\n        return $this->lastLoginAttempt;\r\n    }\r\n\r\n    /**\r\n     * @param boolean $failedLoginAttempts\r\n     *\r\n     * @return User\r\n     */\r\n    public function setFailedLoginAttempts($failedLoginAttempts)\r\n    {\r\n        $this->failedLoginAttempts = $failedLoginAttempts;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * @return Integer\r\n     */\r\n    public function getFailedLoginAttempts()\r\n    {\r\n        return $this->failedLoginAttempts;\r\n    }\r\n\r\n    public function isAccountNonExpired()\r\n    {\r\n        // Accounts do not expire\r\n        return true;\r\n    }\r\n\r\n    public function isAccountNonLocked()\r\n    {\r\n        // TODO: Implement isAccountNonLocked() method.\r\n        return $this->getFailedLoginAttempts() < 3 || !$this->requestWithinLoginDelay();\r\n    }\r\n\r\n    public function isCredentialsNonExpired()\r\n    {\r\n        // Credentials do not expire\r\n        return true;\r\n    }\r\n\r\n    public function isEnabled()\r\n    {\r\n        // TODO: Implement isEnabled() method.\r\n        return true;\r\n    }\r\n\r\n    public function eraseCredentials()\r\n    {\r\n        // TODO: Implement eraseCredentials() method.\r\n    }\r\n\r\n    public function requestWithinLoginDelay() {\r\n        $loginAttemptTime = new \\DateTime();\r\n        return $loginAttemptTime->getTimeStamp() - $this->getLastLoginAttempt()->getTimeStamp() < 60;\r\n    }\r\n\r\n    public function serialize()\r\n    {\r\n        return serialize(\r\n            array(\r\n                $this->id,\r\n                $this->username,\r\n                $this->password,\r\n                $this->isActive,\r\n            )\r\n        );\r\n    }\r\n\r\n    public function unserialize($serialized)\r\n    {\r\n        list(\r\n            $this->id,\r\n            $this->username,\r\n            $this->password,\r\n            $this->isActive,\r\n            ) = unserialize($serialized);\r\n    }\r\n\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,0,null,null,null,null,null,null,1,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,5,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,5,null,null,null,null,null,null,null,5,5,5,null,null,5,null,null,null,null,null,null,0,null,null,null,null,0,0,null,null,0,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,5,null,null,null,null,null,5,null,null,null,null,null,5,null,null,null,null,null,5,null,null,null,null,null,5,null,null,null,null,null,5,null,null,0,0,null,null,null,null,0,null,0,0,0,0,null,null,null,null,null,null,null,0,0,0,0,0,0,null,null]},{"name":"src/AppBundle/Entity/User/UserRole.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 17.07.2016\r\n * Time: 22:04\r\n */\r\n\r\nnamespace AppBundle\\Entity\\User;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse AppBundle\\Entity\\User;\r\nuse AppBundle\\Entity\\SimpleEntity;\r\n\r\n/**\r\n * Class UserRole\r\n * @package AppBundle\\Entity\\User\r\n *\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"UserRole\")\r\n */\r\nclass UserRole extends SimpleEntity\r\n{\r\n    public function getDisplayName() {\r\n        return \"Rolle Benutzer\";\r\n    }\r\n\r\n    /**\r\n     * @ORM\\ManyToMany(targetEntity=\"AppBundle\\Entity\\User\", mappedBy=\"roles\")\r\n     */\r\n    private $users;\r\n    /**\r\n     * Constructor\r\n     */\r\n    public function __construct()\r\n    {\r\n        $this->users = new \\Doctrine\\Common\\Collections\\ArrayCollection();\r\n    }\r\n\r\n    /**\r\n     * Add user\r\n     *\r\n     * @param User $user\r\n     *\r\n     * @return UserRole\r\n     */\r\n    public function addUser(User $user)\r\n    {\r\n        $this->users[] = $user;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Remove user\r\n     *\r\n     * @param User $user\r\n     */\r\n    public function removeUser(User $user)\r\n    {\r\n        $this->users->removeElement($user);\r\n    }\r\n\r\n    /**\r\n     * Get users\r\n     *\r\n     * @return \\Doctrine\\Common\\Collections\\Collection\r\n     */\r\n    public function getUsers()\r\n    {\r\n        return $this->users;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,null,null,2,2,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,null,null,0,null,null]},{"name":"src/AppBundle/Entity/UserRepository.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 06.08.2016\r\n * Time: 23:13\r\n */\r\n\r\nnamespace AppBundle\\Entity;\r\n\r\n\r\nuse Doctrine\\ORM\\EntityRepository;\r\nuse Symfony\\Bridge\\Doctrine\\Security\\User\\UserLoaderInterface;\r\n\r\nclass UserRepository extends EntityRepository implements UserLoaderInterface\r\n{\r\n    /**\r\n     * @param string $username\r\n     * @return mixed\r\n     *\r\n     * Funktion für UserLoaderInterface\r\n     * Ein Benutzer kann sich dadurch per Benutzername oder per E-Mail anmelden\r\n     */\r\n    public function loadUserByUsername($username)\r\n    {\r\n        return $this->createQueryBuilder('u')\r\n            ->where('u.username = :username OR u.email = :email')\r\n            ->setParameter('username', $username)\r\n            ->setParameter('email', $username)\r\n            ->getQuery()\r\n            ->getOneOrNullResult();\r\n    }\r\n\r\n    public function findAccountManagers()\r\n    {\r\n        return $this->createQueryBuilder('u')\r\n            ->join('u.roles', 'r', 'WITH', 'r.name = :role')\r\n            ->setParameter('role', 'ROLE_ACCOUNT_MANAGER')\r\n            ->getQuery()\r\n            ->getResult();\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,5,5,5,5,5,5,null,null,null,null,1,1,1,1,1,null,null]},{"name":"src/AppBundle/EventListener/AuthenticationHandler.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 31.08.2017\r\n * Time: 22:28\r\n */\r\n\r\nnamespace AppBundle\\EventListener;\r\n\r\n\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\r\nuse Symfony\\Component\\Routing\\RouterInterface;\r\nuse Symfony\\Component\\HttpFoundation\\Session\\Session;\r\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\TokenInterface;\r\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\Security\\Core\\SecurityContextInterface;\r\nuse Symfony\\Component\\Security\\Http\\Authentication\\AuthenticationSuccessHandlerInterface;\r\nuse Symfony\\Component\\Security\\Http\\Authentication\\AuthenticationFailureHandlerInterface;\r\nuse Doctrine\\ORM\\EntityManager;\r\nuse AppBundle\\AppFlow\\ErrorResponse;\r\nuse AppBundle\\AppFlow\\AppError;\r\nuse Twig\\Error\\Error;\r\n\r\nclass AuthenticationHandler implements AuthenticationSuccessHandlerInterface, AuthenticationFailureHandlerInterface\r\n{\r\n    private $router = null;\r\n    private $session = null;\r\n    private $em = null;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @author    Joe Sexton <joe@webtipblog.com>\r\n     * @param    RouterInterface $router\r\n     * @param    Session $session\r\n     */\r\n    public function __construct(RouterInterface $router, Session $session)\r\n    {\r\n        $this->router = $router;\r\n        $this->session = $session;\r\n    }\r\n\r\n    public function setEntityManager(EntityManager $entityManager)\r\n    {\r\n        $this->em = $entityManager;\r\n    }\r\n\r\n    /**\r\n     * onAuthenticationSuccess\r\n     *\r\n     * @author    Joe Sexton <joe@webtipblog.com>\r\n     * @param    Request $request\r\n     * @param    TokenInterface $token\r\n     * @return    JsonResponse\r\n     */\r\n    public function onAuthenticationSuccess(Request $request, TokenInterface $token)\r\n    {\r\n        $user = new \\stdClass();\r\n\r\n        $userLoggedIn = $token->getUser();\r\n        $userLoggedIn->setFailedLoginAttempts(0);\r\n\r\n        $this->em->persist($userLoggedIn);\r\n        $this->em->flush();\r\n\r\n\r\n        $user->id = $userLoggedIn->getId();\r\n        $user->username = $userLoggedIn->getUsername();\r\n        $user->roles = $userLoggedIn->getRoles();\r\n\r\n        return new JsonResponse($user);\r\n    }\r\n\r\n    /**\r\n     * onAuthenticationFailure\r\n     *\r\n     * @author    Joe Sexton <joe@webtipblog.com>\r\n     * @param    Request $request\r\n     * @param    AuthenticationException $exception\r\n     * @return    Response\r\n     */\r\n    public function onAuthenticationFailure(Request $request, AuthenticationException $exception)\r\n    {\r\n        $response = new ErrorResponse();\r\n        $response->setStatusCode(Response::HTTP_UNAUTHORIZED);\r\n        $response->setMessage(\"Es ist ein Fehler beim Login aufgetreten\");\r\n\r\n        $user = null;\r\n\r\n        $repo = $this->em->getRepository('AppBundle:User');\r\n        $user = $repo->findOneByUsername($exception->getToken()->getUsername());\r\n\r\n        if ($user !== null) {\r\n            $loginAttemptTime = new \\DateTime();\r\n            $user->setFailedLoginAttempts($user->getFailedLoginAttempts() + 1);\r\n\r\n            if ($user->getFailedLoginAttempts() >= 3 && ($user->requestWithinLoginDelay())) {\r\n                $error = new AppError('login_error', \"Sie haben 3 Mal oder öfter das falsche Passwort eingegeben.Der nächste Loginversuch ist erst in 1 Minute möglich.\");\r\n                $response->addError($error);\r\n            }\r\n\r\n            $user->setLastLoginAttempt($loginAttemptTime);\r\n            $this->em->persist($user);\r\n            $this->em->flush();\r\n        }\r\n\r\n        return $response;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,7,7,7,null,null,null,7,7,null,null,null,null,null,null,null,null,null,null,null,0,null,0,0,null,0,0,null,null,0,0,0,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,0,null,0,0,null,0,0,0,null,0,0,0,null,null,0,0,0,null,null,0,null,null]},{"name":"src/AppBundle/EventListener/LogoutSuccessHandler.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 07.09.2017\r\n * Time: 21:53\r\n */\r\n\r\nnamespace AppBundle\\EventListener;\r\n\r\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\TokenInterface;\r\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Doctrine\\ORM\\EntityManager;\r\nuse Symfony\\Component\\Security\\Http\\Logout\\LogoutSuccessHandlerInterface;\r\n\r\nclass LogoutSuccessHandler implements LogoutSuccessHandlerInterface\r\n{\r\n    /**\r\n     * @var EntityManager\r\n     */\r\n    protected $em;\r\n\r\n    /**\r\n     * Constructor\r\n     * @param EntityManager $em\r\n     */\r\n    public function __construct()\r\n    {\r\n\r\n    }\r\n\r\n    /**\r\n     * Do post logout stuff\r\n     */\r\n    public function onLogoutSuccess(Request $request)\r\n    {\r\n        /*\r\n        $user = $authToken->getUser();\r\n\r\n        // do stuff with the user object...\r\n        $this->em->flush();\r\n        */\r\n        $response = new \\stdClass();\r\n        $response->message = \"Ausgeloggt\";\r\n\r\n        return new JsonResponse($response);\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,7,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null]},{"name":"src/AppBundle/EventListener/UserRoleSetter.php","source":"<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: Fuzzzzel\r\n * Date: 06.08.2016\r\n * Time: 23:28\r\n */\r\n\r\nnamespace AppBundle\\EventListener;\r\n\r\n\r\nuse AppBundle\\Entity\\User;\r\nuse Doctrine\\Common\\Persistence\\Event\\LifecycleEventArgs;\r\n\r\nclass UserRoleSetter\r\n{\r\n    public function prePersist(LifecycleEventArgs $args) {\r\n        $obj = $args->getObject();\r\n        $om = $args->getObjectManager();\r\n\r\n        if($obj instanceof User) {\r\n            // Get role \"ROLE_USER\"\r\n            $userRole = $om->getRepository('AppBundle:User\\UserRole')->findOneBy(array('name' => 'ROLE_USER'));\r\n            if(!$obj->hasRole($userRole)) {\r\n                $obj->addRole($userRole);\r\n            }\r\n        }\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,null,1,null,0,0,0,null,null,1,null]},{"name":"src/AppBundle/Serializer/ObjectConstructor.php","source":"<?php\r\n\r\nnamespace AppBundle\\Serializer;\r\n\r\nuse JMS\\Serializer\\Construction\\ObjectConstructorInterface;\r\nuse JMS\\Serializer\\DeserializationContext;\r\nuse JMS\\Serializer\\Metadata\\ClassMetadata;\r\nuse JMS\\Serializer\\VisitorInterface;\r\n\r\nclass ObjectConstructor implements ObjectConstructorInterface\r\n{\r\n    /**\r\n     * {@inheritdoc}\r\n     */\r\n    public function construct(\r\n        VisitorInterface $visitor,\r\n        ClassMetadata $metadata,\r\n        $data,\r\n        array $type,\r\n        DeserializationContext $context\r\n    ) {\r\n        $className = $metadata->name;\r\n\r\n        return new $className();\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,null,null]},{"name":"src/polyfills.ts","source":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/docs/ts/latest/guide/browser-support.html\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n// import 'core-js/es6/symbol';\n// import 'core-js/es6/object';\n// import 'core-js/es6/function';\n// import 'core-js/es6/parse-int';\n// import 'core-js/es6/parse-float';\n// import 'core-js/es6/number';\n// import 'core-js/es6/math';\n// import 'core-js/es6/string';\n// import 'core-js/es6/date';\n// import 'core-js/es6/array';\n// import 'core-js/es6/regexp';\n// import 'core-js/es6/map';\n// import 'core-js/es6/weak-map';\n// import 'core-js/es6/set';\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/** IE10 and IE11 requires the following for the Reflect API. */\n// import 'core-js/es6/reflect';\n\n\n/** Evergreen browsers require these. **/\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\nimport 'core-js/es7/reflect';\n\n\n/**\n * Required to support Web Animations `@angular/platform-browser/animations`.\n * Needed for: All but Chrome, Firefox and Opera. http://caniuse.com/#feat=web-animation\n **/\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n\n\n/***************************************************************************************************\n * Zone JS is required by Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\n/**\n * Date, currency, decimal and percent pipes.\n * Needed for: All but Chrome, Firefox, Edge, IE11 and Safari 10\n */\n// import 'intl';  // Run `npm install --save intl`.\n/**\n * Need to import at least one locale-data with intl.\n */\n// import 'intl/locale-data/jsonp/en';\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"branches":[]},{"name":"src/test.ts","source":"// This file is required by karma.conf.js and loads recursively all the .spec and framework files\n\nimport 'zone.js/dist/long-stack-trace-zone';\nimport 'zone.js/dist/proxy.js';\nimport 'zone.js/dist/sync-test';\nimport 'zone.js/dist/jasmine-patch';\nimport 'zone.js/dist/async-test';\nimport 'zone.js/dist/fake-async-test';\nimport { getTestBed } from '@angular/core/testing';\nimport {\n  BrowserDynamicTestingModule,\n  platformBrowserDynamicTesting\n} from '@angular/platform-browser-dynamic/testing';\n\n// Unfortunately there's no typing for the `__karma__` variable. Just declare it as any.\ndeclare const __karma__: any;\ndeclare const require: any;\n\n// Prevent Karma from running prematurely.\n__karma__.loaded = function () { };\n\n// First, initialize the Angular testing environment.\ngetTestBed().initTestEnvironment(\n  BrowserDynamicTestingModule,\n  platformBrowserDynamicTesting()\n);\n// Then we find all the tests.\nconst context = require.context('./', true, /\\.spec\\.ts$/);\n// And load the modules.\ncontext.keys().map(context);\n// Finally, start Karma to run the tests.\n__karma__.start();\n","coverage":[null,null,1,1,1,1,1,1,1,1,null,null,null,null,null,null,null,null,null,1,null,null,1,null,null,null,null,1,null,1,null,1,null],"branches":[]},{"name":"src/app/app.component.ts","source":"import { Component, OnInit } from '@angular/core';\nimport { CoreDataService } from './core/core-data.service';\nimport { UserService } from './user/user.service';\nimport { UtilService } from './core/util.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  title = 'WerftNET Version 1.1';\n  coreDataLoaded: Boolean = false;\n\n  constructor(\n    private coreDataService: CoreDataService,\n    private userService: UserService,\n    private util: UtilService\n  ) {\n\n  }\n\n  isUserLoggedIn() {\n    return this.userService.isLoggedIn();\n  }\n\n  userHasRole(role: string) {\n    return this.userService.userHasRole(role);\n  }\n\n  ngOnInit() {\n    this.coreDataService.getDataLoaded().subscribe(dataLoaded => {\n      this.coreDataLoaded = dataLoaded;\n    })\n    this.userService.testServerForLoggedInUser(\n      () => { this.util.goTo('/home') },\n      null\n    );\n  }\n}\n","coverage":[1,1,1,1,null,null,null,null,null,null,1,3,3,null,null,3,3,3,null,null,null,null,1,1,null,null,1,1,null,null,1,0,0,null,0,0,null,null,null,1,null],"branches":[16,0,0,1,16,0,1,0,16,1,0,1,16,2,0,1,16,2,1,1,16,2,2,0,16,3,0,1,16,3,1,1,17,4,0,1,17,4,1,1,17,4,2,0,17,5,0,1,17,5,1,1]},{"name":"src/app/admin/admin-user.service.ts","source":"import { Injectable } from '@angular/core';\nimport { User } from '../user/user.model';\nimport { BehaviorSubject } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { UtilService } from '../core/util.service';\n\n@Injectable()\nexport class AdminUserService {\n\n  private $userList: BehaviorSubject<User[]>;\n\n  constructor(\n    private http: HttpClient,\n    private util: UtilService\n  ) {\n    this.$userList = <BehaviorSubject<User[]>>new BehaviorSubject([]);\n    this.fetchAllUsers();\n  }\n\n  getUserList() {\n    return this.$userList.asObservable();\n  }\n\n  fetchAllUsers() {\n    // Set up post request\n    const req = this.http.get<User[]>(\n      '/admin/users'\n    )\n\n    // Execute post request and subscribe to response\n    req.subscribe(\n      data => {\n        this.$userList.next(data);\n      },\n      error => {\n        alert('Es ist ein Fehler beim Laden der Benutzer aufgetreten.\\n' + error.message);\n      });\n  }\n\n}\n","coverage":[1,null,1,1,1,null,null,1,null,null,null,null,4,4,null,4,4,null,null,1,1,null,null,4,null,4,null,null,null,null,4,null,0,null,null,2,null,null,null,1,null],"branches":[13,0,0,1,13,0,1,0,13,1,0,1,13,2,0,1,13,2,1,1,13,2,2,0,13,3,0,1,13,3,1,1]},{"name":"src/app/admin/admin/admin.component.ts","source":"import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.scss']\n})\nexport class AdminComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","coverage":[1,null,null,null,null,null,null,1,null,null,null,1,null,null,1,null],"branches":[]},{"name":"src/app/admin/admin-overview/admin-overview.component.ts","source":"import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-admin-overview',\n  templateUrl: './admin-overview.component.html',\n  styleUrls: ['./admin-overview.component.scss']\n})\nexport class AdminOverviewComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","coverage":[1,null,null,null,null,null,null,1,null,null,null,1,null,null,1,null],"branches":[]},{"name":"src/app/admin/admin-simple-entity/admin-simple-entity.component.ts","source":"import { Component, OnInit, Input } from '@angular/core';\nimport { SimpleEntityCollection, SimpleEntity } from '../../shared/model/simple-entity.model';\nimport { CoreDataService } from '../../core/core-data.service';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-admin-simple-entity',\n  templateUrl: './admin-simple-entity.component.html',\n  styleUrls: ['./admin-simple-entity.component.scss']\n})\nexport class AdminSimpleEntityComponent implements OnInit {\n\n  entityName: string = \"\";\n  valuearray: SimpleEntityCollection = new SimpleEntityCollection();\n  item_new: string = \"\";\n\n  constructor(\n    private coreDataService: CoreDataService,\n    private route: ActivatedRoute\n  ) { }\n\n  ngOnInit() {\n    this.entityName = this.route.snapshot.data.entity;\n    this.loadSimpleEntityValues();\n  }\n\n  loadSimpleEntityValues() {\n    this.coreDataService.getSimpleEntityCollection(this.entityName)\n      .then((data) => {\n        this.valuearray = data;\n      })\n  }\n\n  /**\n     * Adds item to the database, receives id and adds item\n     * to the according array in angular\n     */\n  createSimpleEntityItem(newItemName) {\n    this.coreDataService.createSimpleEntityItem(this.entityName, newItemName)\n      .then(() => {\n        this.loadSimpleEntityValues();\n      })\n    this.item_new = '';\n  }\n\n  /**\n   * Removes item in database and updates angular array\n   * on success\n   */\n  deleteSimpleEntityItem(item_id) {\n    this.coreDataService.deleteSimpleEntityItem(this.entityName, item_id)\n      .then(() => {\n        this.loadSimpleEntityValues();\n      })\n  }\n\n  /**\n   * Updates item in database and updates angular array\n   * on success\n   *\n   * // Change to input on first click, then update on second click!\n   */\n  updateSimpleEntityItem(item_id, item_edited_name) {\n    this.coreDataService.updateSimpleEntityItem(this.entityName, item_id, item_edited_name)\n      .then(() => {\n        this.loadSimpleEntityValues();\n      })\n  }\n\n}\n","coverage":[1,1,1,1,null,null,null,null,null,null,1,null,1,1,1,null,null,1,1,null,null,1,1,1,null,null,1,1,null,0,null,null,null,null,null,null,null,1,0,null,0,null,0,null,null,null,null,null,null,1,0,null,0,null,null,null,null,null,null,null,null,null,1,0,null,0,null,null,null,1,null],"branches":[18,0,0,1,18,0,1,0,18,1,0,1,18,2,0,1,18,2,1,1,18,2,2,0,18,3,0,1,18,3,1,1]},{"name":"src/app/admin/admin-two-level-entity/admin-two-level-entity.component.ts","source":"import { Component, OnInit } from '@angular/core';\nimport { TwoLevelEntityCollection } from '../../shared/model/two-level-entity.model';\nimport { CoreDataService } from '../../core/core-data.service';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-admin-two-level-entity',\n  templateUrl: './admin-two-level-entity.component.html',\n  styleUrls: ['./admin-two-level-entity.component.scss']\n})\nexport class AdminTwoLevelEntityComponent implements OnInit {\n\n  entityName: string = '';\n  valuearray: TwoLevelEntityCollection = new TwoLevelEntityCollection();\n  main_item_new: string = '';\n  sub_item_new: string = '';\n\n  constructor(\n    private coreDataService: CoreDataService,\n    private route: ActivatedRoute\n  ) { }\n\n  ngOnInit() {\n    this.entityName = this.route.snapshot.data.entity;\n    this.loadTwoLevelEntityValues();\n  }\n\n  loadTwoLevelEntityValues() {\n    this.coreDataService.getFlattenedTwoLevelEntityCollection(this.entityName)\n      .then((data) => {\n        this.valuearray = data;\n      })\n  }\n\n  /**\n     * Adds item to the database, receives id and adds item\n     * to the according array in angular\n     */\n  createTwoLevelEntityMainItem(valueArray, newItemName) {\n    this.coreDataService.createTwoLevelEntityItem(this.entityName, null, newItemName)\n      .then(() => {\n        this.loadTwoLevelEntityValues();\n      })\n    this.main_item_new = '';\n  }\n\n  /**\n   * Removes item in database and updates angular array\n   * on success\n   */\n  deleteTwoLevelEntityMainItem(valueArray, item_id) {\n    this.coreDataService.deleteTwoLevelEntityItem(this.entityName, item_id, null)\n      .then(() => {\n        this.loadTwoLevelEntityValues();\n      })\n  }\n\n  /**\n   * Updates item in database and updates angular array\n   * on success\n   *\n   * // Change to input on first click, then update on second click!\n   */\n  updateTwoLevelEntityMainItem(item_id, item_edited_name) {\n    this.coreDataService.updateTwoLevelEntityItem(this.entityName, item_id, null, item_edited_name)\n      .then(() => {\n        this.loadTwoLevelEntityValues();\n      })\n  }\n\n\n  /**\n     * Adds item to the database, receives id and adds item\n     * to the according array in angular\n     */\n  createTwoLevelEntitySubItem(mainItemId, newItemName) {\n    this.coreDataService.createTwoLevelEntityItem(this.entityName, mainItemId, newItemName)\n      .then(() => {\n        this.loadTwoLevelEntityValues();\n      })\n    this.sub_item_new = '';\n  }\n\n  /**\n   * Removes item in database and updates angular array\n   * on success\n   */\n  deleteTwoLevelEntitySubItem(mainItemId, subItemId) {\n    this.coreDataService.deleteTwoLevelEntityItem(this.entityName, mainItemId, subItemId)\n      .then(() => {\n        this.loadTwoLevelEntityValues();\n      })\n  }\n\n  /**\n   * Updates item in database and updates angular array\n   * on success\n   *\n   * // Change to input on first click, then update on second click!\n   */\n  updateTwoLevelEntitySubItem(mainItemId, subItemId, newItemName) {\n    this.coreDataService.updateTwoLevelEntityItem(this.entityName, mainItemId, subItemId, newItemName)\n      .then(() => {\n        this.loadTwoLevelEntityValues();\n      })\n  }\n\n}\n","coverage":[1,1,1,1,null,null,null,null,null,null,1,null,1,1,1,1,null,null,1,1,null,null,1,1,1,null,null,1,1,null,0,null,null,null,null,null,null,null,1,0,null,0,null,0,null,null,null,null,null,null,1,0,null,0,null,null,null,null,null,null,null,null,null,1,0,null,0,null,null,null,null,null,null,null,null,1,0,null,0,null,0,null,null,null,null,null,null,1,0,null,0,null,null,null,null,null,null,null,null,null,1,0,null,0,null,null,null,1,null],"branches":[19,0,0,1,19,0,1,0,19,1,0,1,19,2,0,1,19,2,1,1,19,2,2,0,19,3,0,1,19,3,1,1]},{"name":"src/app/admin/admin-user-edit/admin-user-edit.component.ts","source":"import { Component, OnInit, Input } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { User } from '../../user/user.model';\nimport { AdminUserEditService } from './admin-user-edit.service';\nimport { UtilService } from '../../core/util.service';\nimport { CoreData, CoreDataService } from '../../core/core-data.service';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-admin-user-edit',\n  templateUrl: './admin-user-edit.component.html',\n  styleUrls: ['./admin-user-edit.component.scss']\n})\nexport class AdminUserEditComponent implements OnInit {\n\n  userToEdit: User = new User();\n  pwdNew: String = '';\n  coreData: CoreData = new CoreData();\n  submittedForm: boolean = false;\n  submittedPw: boolean = false;\n\n  constructor(\n    private route: ActivatedRoute,\n    private coreDataService: CoreDataService,\n    private adminUserEditService: AdminUserEditService,\n    private util: UtilService\n  ) { }\n\n  ngOnInit() {\n    this.coreDataService.getData().subscribe(\n      (data) => { this.coreData = data }\n    )\n\n    this.adminUserEditService.getObservableUser().subscribe(\n      (user) => { this.userToEdit = user, console.log(user) }\n    )\n\n    this.adminUserEditService.clearUser();\n    this.route.params.subscribe(params => {\n      const userId = +params['userId'];\n      if (userId > 0) {\n        this.adminUserEditService.fetchUser(userId);\n      }\n    });\n\n  }\n\n  changeUserPwd(uderEditPwdForm) {\n    if (uderEditPwdForm.invalid) {\n      alert('Eingegebenes Passwort entspricht nicht den Richtlinien (min. 4 Zeichen)');\n      return;\n    };\n\n    if (!(this.userToEdit.id > 0)) {\n      alert('User hat keine Id');\n      return;\n    }\n\n    this.adminUserEditService.changeUserPwd(this.pwdNew)\n      .then((user) => {\n        this.util.historyBack();\n      })\n      .catch((error) => {\n        alert(error.message);\n      })\n  }\n\n  saveUser(userForm) {\n    this.submittedForm = true;\n    if (!userForm.valid) {\n      alert('Bitte alle Pflichtfelder ausfüllen!');\n    } else {\n      this.adminUserEditService.saveUser(this.userToEdit)\n        .then((user) => {\n          this.util.historyBack();\n        })\n        .catch((error) => {\n          alert(error.message);\n        })\n    }\n  }\n\n  deleteUser() {\n\n  }\n\n  cancelEdit() {\n    this.util.historyBack();\n  }\n\n}\n","coverage":[1,1,1,1,1,1,null,null,null,null,null,null,null,1,null,1,1,1,1,1,null,null,1,1,1,1,null,null,1,1,1,null,null,1,2,null,null,1,1,1,1,0,null,null,null,null,null,1,0,0,0,null,null,0,0,0,null,null,0,null,0,null,null,0,null,null,null,1,0,0,0,null,0,null,0,null,null,0,null,null,null,null,1,null,null,null,1,0,null,null,1,null],"branches":[41,0,0,0,41,0,1,1,49,1,0,0,49,1,1,0,54,2,0,0,54,2,1,0,70,3,0,0,70,3,1,0,23,4,0,1,23,4,1,0,23,5,0,1,23,6,0,1,23,6,1,1,23,6,2,0,23,7,0,1,23,7,1,1,24,8,0,1,24,8,1,1,24,8,2,0,24,9,0,1,24,9,1,1,25,10,0,1,25,10,1,1,25,10,2,0,25,11,0,1,25,11,1,1]},{"name":"src/app/admin/admin-user-edit/admin-user-edit.service.ts","source":"import { Injectable } from '@angular/core';\nimport { User } from '../../user/user.model';\nimport { BehaviorSubject } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { isNumber } from 'util';\nimport { AdminUserService } from '../admin-user.service';\n\n@Injectable()\nexport class AdminUserEditService {\n  private $userToEdit: BehaviorSubject<User>;\n\n  constructor(\n    private http: HttpClient,\n    private adminUserService: AdminUserService\n  ) {\n    this.$userToEdit = <BehaviorSubject<User>>new BehaviorSubject(new User());\n  }\n\n  getObservableUser() {\n    return this.$userToEdit.asObservable();\n  }\n\n  fetchUser(userId): void {\n    if (isNaN(userId)) {\n      alert('Es wurde keine User Id angegeben');\n      return;\n    }\n\n    const req = this.http.get<User>(\n      '/admin/users/' + userId\n    )\n\n    // Execute post request and subscribe to response\n    req.subscribe(\n      data => {\n        this.$userToEdit.next(data[0]);\n      },\n      error => {\n        alert('Fehler beim Laden des Users');\n      });\n  }\n\n  clearUser() {\n    this.$userToEdit.next(new User());\n  }\n\n  saveUser(editedUser): Promise<User> {\n    return new Promise(\n      (resolve, reject) => {\n        if (!(editedUser.id > 0)) {\n          delete editedUser['id'];\n        }\n        const req = this.http.post<any>(\n          '/admin/users' + (editedUser.id > 0 ? '/' + editedUser.id : ''),\n          editedUser\n        )\n\n        // Execute post request and subscribe to response\n        req.subscribe(\n          data => {\n            this.$userToEdit.next(data);\n            this.adminUserService.fetchAllUsers();\n            resolve && resolve(data);\n          },\n          error => {\n            reject && reject(error);\n          });\n      }\n    )\n  }\n\n  changeUserPwd(newPwd): Promise<any> {\n    return new Promise(\n      (resolve, reject) => {\n        if (!(this.$userToEdit.getValue().id > 0)) {\n          reject('Der User hat keine Id. Passwort kann nicht geändert werden');\n          return\n        }\n        const req = this.http.post<any>(\n          '/admin/users' + (this.$userToEdit.getValue().id > 0 ? '/' + this.$userToEdit.getValue().id : '') + '/password',\n          newPwd\n        )\n\n        // Execute post request and subscribe to response\n        req.subscribe(\n          data => {\n            this.$userToEdit.next(data);\n            this.adminUserService.fetchAllUsers();\n            resolve && resolve(data);\n          },\n          error => {\n            reject && reject(error);\n          });\n      }\n    );\n  }\n}\n","coverage":[1,1,1,1,null,1,null,null,1,null,null,null,2,2,null,2,null,null,1,1,null,null,1,0,0,0,null,null,0,null,null,null,null,0,null,0,null,null,0,null,null,null,1,1,null,null,1,0,null,0,0,null,0,null,null,null,null,null,0,null,0,0,0,null,null,0,null,null,null,null,null,1,0,null,0,0,0,null,0,null,null,null,null,null,0,null,0,0,0,null,null,0,null,null,null,null,1,null],"branches":[24,0,0,0,24,0,1,0,50,1,0,0,50,1,1,0,54,2,0,0,54,2,1,0,63,3,0,0,63,3,1,0,66,4,0,0,66,4,1,0,75,5,0,0,75,5,1,0,80,6,0,0,80,6,1,0,89,7,0,0,89,7,1,0,92,8,0,0,92,8,1,0,13,9,0,1,13,9,1,0,13,10,0,1,13,11,0,1,13,11,1,1,13,11,2,0,13,12,0,1,13,12,1,1]},{"name":"src/app/admin/admin-user-overview/admin-user-overview.component.ts","source":"import { Component, OnInit } from '@angular/core';\nimport { AdminUserService } from '../admin-user.service';\nimport { BehaviorSubject } from 'rxjs';\nimport { User } from '../../user/user.model';\nimport { UtilService } from '../../core/util.service';\nimport { AdminUserEditService } from '../admin-user-edit/admin-user-edit.service';\n\n@Component({\n  selector: 'app-admin-user-overview',\n  templateUrl: './admin-user-overview.component.html',\n  styleUrls: ['./admin-user-overview.component.scss']\n})\nexport class AdminUserOverviewComponent implements OnInit {\n\n  userList: User[] = [];\n\n  constructor(\n    private adminUserService: AdminUserService,\n    private util: UtilService\n  ) { }\n\n  ngOnInit() {\n    this.adminUserService.getUserList().subscribe((userList) => {\n      this.userList = userList;\n    })\n  }\n\n  editUser(userId) {\n    this.util.goTo('admin/usermanagement/edit_user/' + userId);\n  }\n\n}\n","coverage":[1,1,null,null,1,null,null,null,null,null,null,null,1,null,1,null,null,1,1,null,null,1,1,1,null,null,null,1,0,null,null,1,null],"branches":[18,0,0,1,18,0,1,0,18,1,0,1,18,2,0,1,18,2,1,1,18,2,2,0,18,3,0,1,18,3,1,1]},{"name":"src/app/core/core-data.service-mock.ts","source":"import { Injectable } from '@angular/core';\nimport { SimpleEntity, SimpleEntityCollection } from '../shared/model/simple-entity.model'\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { TwoLevelEntity, TwoLevelEntityCollection } from '../shared/model/two-level-entity.model';\nimport { UtilService } from './util.service';\nimport { User } from '../user/user.model';\nimport * as _ from \"lodash\";\nimport { CoreDataService, CoreData } from './core-data.service';\n\n@Injectable()\nexport class CoreDataServiceMock extends CoreDataService {\n\n  constructor(\n    util: UtilService,\n    http: HttpClient\n  ) {\n    super(util, http);\n  }\n\n  refreshDefaultData(resolve, reject) {\n\n    // Execute post request and subscribe to response\n    let coreDataProcessed: CoreData = new CoreData();\n    Object.assign(coreDataProcessed, coreDataMock)\n\n    let languages: TwoLevelEntityCollection = new TwoLevelEntityCollection();\n    Object.assign(languages, coreDataMock.languages);\n    coreDataProcessed.languages_flat = this.util.getFlattenedTwoLevelEntity(languages);\n\n    let sectors: TwoLevelEntityCollection = new TwoLevelEntityCollection();\n    Object.assign(sectors, coreDataMock.languages);\n    coreDataProcessed.sectors_flat = this.util.getFlattenedTwoLevelEntity(sectors);\n\n    this.$data.next(coreDataProcessed);\n    resolve && resolve(coreDataMock);\n\n  };\n}\n\nvar coreDataMock =\n  {\n    \"yes_no_in_progress\": {\n      \"values\": [\n        {\n          \"id\": 3,\n          \"name\": \"In Bearbeitung\"\n        },\n        {\n          \"id\": 1,\n          \"name\": \"Ja\"\n        },\n        {\n          \"id\": 2,\n          \"name\": \"Nein\"\n        }\n      ],\n      \"display_name\": \"Ja\\/Nein\\/In Bearbeitung\"\n    },\n    \"anrede\": {\n      \"values\": [\n        {\n          \"id\": 3,\n          \"name\": \"Firma\"\n        },\n        {\n          \"id\": 2,\n          \"name\": \"Frau\"\n        },\n        {\n          \"id\": 1,\n          \"name\": \"Herr\"\n        }\n      ],\n      \"display_name\": \"Anrede\"\n    },\n    \"country\": {\n      \"values\": [\n        {\n          \"id\": 60,\n          \"name\": \"_TEXT\"\n        },\n        {\n          \"id\": 1,\n          \"name\": \"ARG\"\n        },\n        {\n          \"id\": 2,\n          \"name\": \"AUS\"\n        },\n        {\n          \"id\": 3,\n          \"name\": \"AUT\"\n        },\n        {\n          \"id\": 4,\n          \"name\": \"BE\"\n        },\n        {\n          \"id\": 5,\n          \"name\": \"BIH\"\n        },\n        {\n          \"id\": 6,\n          \"name\": \"BLR\"\n        },\n        {\n          \"id\": 7,\n          \"name\": \"BRA\"\n        },\n        {\n          \"id\": 8,\n          \"name\": \"BUL\"\n        },\n        {\n          \"id\": 9,\n          \"name\": \"CAN\"\n        },\n        {\n          \"id\": 10,\n          \"name\": \"CH\"\n        },\n        {\n          \"id\": 11,\n          \"name\": \"CHN\"\n        },\n        {\n          \"id\": 12,\n          \"name\": \"CZ\"\n        },\n        {\n          \"id\": 13,\n          \"name\": \"DK\"\n        },\n        {\n          \"id\": 14,\n          \"name\": \"EGY\"\n        },\n        {\n          \"id\": 15,\n          \"name\": \"ESP\"\n        },\n        {\n          \"id\": 16,\n          \"name\": \"EST\"\n        },\n        {\n          \"id\": 17,\n          \"name\": \"FIN\"\n        },\n        {\n          \"id\": 18,\n          \"name\": \"FRA\"\n        },\n        {\n          \"id\": 19,\n          \"name\": \"GB\"\n        },\n        {\n          \"id\": 20,\n          \"name\": \"GER\"\n        },\n        {\n          \"id\": 21,\n          \"name\": \"GRI\"\n        },\n        {\n          \"id\": 22,\n          \"name\": \"HKG\"\n        },\n        {\n          \"id\": 23,\n          \"name\": \"HU\"\n        },\n        {\n          \"id\": 24,\n          \"name\": \"IDN\"\n        },\n        {\n          \"id\": 25,\n          \"name\": \"IND\"\n        },\n        {\n          \"id\": 26,\n          \"name\": \"IRL\"\n        },\n        {\n          \"id\": 27,\n          \"name\": \"IRQ\"\n        },\n        {\n          \"id\": 28,\n          \"name\": \"ITA\"\n        },\n        {\n          \"id\": 29,\n          \"name\": \"JER\"\n        },\n        {\n          \"id\": 30,\n          \"name\": \"JOR\"\n        },\n        {\n          \"id\": 31,\n          \"name\": \"JPN\"\n        },\n        {\n          \"id\": 32,\n          \"name\": \"KOR\"\n        },\n        {\n          \"id\": 33,\n          \"name\": \"LBN\"\n        },\n        {\n          \"id\": 34,\n          \"name\": \"LIE\"\n        },\n        {\n          \"id\": 35,\n          \"name\": \"LUX\"\n        },\n        {\n          \"id\": 36,\n          \"name\": \"LVA\"\n        },\n        {\n          \"id\": 37,\n          \"name\": \"MAR\"\n        },\n        {\n          \"id\": 38,\n          \"name\": \"MKD\"\n        },\n        {\n          \"id\": 39,\n          \"name\": \"MLT\"\n        },\n        {\n          \"id\": 40,\n          \"name\": \"MYS\"\n        },\n        {\n          \"id\": 41,\n          \"name\": \"NL\"\n        },\n        {\n          \"id\": 42,\n          \"name\": \"NOR\"\n        },\n        {\n          \"id\": 43,\n          \"name\": \"Pak\"\n        },\n        {\n          \"id\": 44,\n          \"name\": \"PL\"\n        },\n        {\n          \"id\": 45,\n          \"name\": \"PT\"\n        },\n        {\n          \"id\": 46,\n          \"name\": \"ROM\"\n        },\n        {\n          \"id\": 47,\n          \"name\": \"RUS\"\n        },\n        {\n          \"id\": 48,\n          \"name\": \"SK\"\n        },\n        {\n          \"id\": 49,\n          \"name\": \"SWE\"\n        },\n        {\n          \"id\": 50,\n          \"name\": \"THA\"\n        },\n        {\n          \"id\": 51,\n          \"name\": \"TR\"\n        },\n        {\n          \"id\": 52,\n          \"name\": \"UAE\"\n        },\n        {\n          \"id\": 53,\n          \"name\": \"UKR\"\n        },\n        {\n          \"id\": 54,\n          \"name\": \"UNK\"\n        },\n        {\n          \"id\": 55,\n          \"name\": \"URY\"\n        },\n        {\n          \"id\": 56,\n          \"name\": \"USA\"\n        },\n        {\n          \"id\": 57,\n          \"name\": \"XXX\"\n        },\n        {\n          \"id\": 58,\n          \"name\": \"ZAF\"\n        }\n      ],\n      \"display_name\": \"Land\"\n    },\n    \"sectors\": {\n      \"display_name\": \"Fachgebiet\",\n      \"values\": [\n        {\n          \"id\": 5,\n          \"name\": \"Finanzen\",\n          \"sub_items\": [\n            {\n              \"id\": 6,\n              \"name\": \"Bank\"\n            },\n            {\n              \"id\": 7,\n              \"name\": \"B\\u00f6rse\"\n            },\n            {\n              \"id\": 8,\n              \"name\": \"Buchhaltung\"\n            }\n          ]\n        },\n        {\n          \"id\": 9,\n          \"name\": \"Marketing\",\n          \"sub_items\": [\n            {\n              \"id\": 11,\n              \"name\": \"Produktmanagement\"\n            },\n            {\n              \"id\": 12,\n              \"name\": \"Slogans\"\n            },\n            {\n              \"id\": 10,\n              \"name\": \"Werbung\"\n            }\n          ]\n        },\n        {\n          \"id\": 1,\n          \"name\": \"Technik\",\n          \"sub_items\": [\n            {\n              \"id\": 3,\n              \"name\": \"Elektrotechnik\"\n            },\n            {\n              \"id\": 14,\n              \"name\": \"Hochspannung\"\n            },\n            {\n              \"id\": 13,\n              \"name\": \"Konstruktion\"\n            },\n            {\n              \"id\": 2,\n              \"name\": \"Maschinenbau\"\n            },\n            {\n              \"id\": 4,\n              \"name\": \"Werkstoffkunde\"\n            }\n          ]\n        }\n      ]\n    },\n    \"languages\": {\n      \"display_name\": \"Sprache\",\n      \"values\": [\n        {\n          \"id\": 14,\n          \"name\": \"AM\"\n        },\n        {\n          \"id\": 2,\n          \"name\": \"ARA\",\n          \"sub_items\": [\n            {\n              \"id\": 64,\n              \"name\": \"AR-IQ\"\n            },\n            {\n              \"id\": 45,\n              \"name\": \"AR-JO\"\n            }\n          ]\n        },\n        {\n          \"id\": 5,\n          \"name\": \"AZE\"\n        },\n        {\n          \"id\": 54,\n          \"name\": \"BAM\"\n        },\n        {\n          \"id\": 79,\n          \"name\": \"BE\"\n        },\n        {\n          \"id\": 49,\n          \"name\": \"BG\"\n        },\n        {\n          \"id\": 56,\n          \"name\": \"BS\"\n        },\n        {\n          \"id\": 60,\n          \"name\": \"CA\"\n        },\n        {\n          \"id\": 55,\n          \"name\": \"CS\"\n        },\n        {\n          \"id\": 65,\n          \"name\": \"CY\"\n        },\n        {\n          \"id\": 17,\n          \"name\": \"DA\"\n        },\n        {\n          \"id\": 36,\n          \"name\": \"DAR\"\n        },\n        {\n          \"id\": 3,\n          \"name\": \"DE\"\n        },\n        {\n          \"id\": 61,\n          \"name\": \"DE-CH\"\n        },\n        {\n          \"id\": 73,\n          \"name\": \"DI\"\n        },\n        {\n          \"id\": 32,\n          \"name\": \"EL\"\n        },\n        {\n          \"id\": 10,\n          \"name\": \"EN\",\n          \"sub_items\": [\n            {\n              \"id\": 28,\n              \"name\": \"EN-GB\"\n            },\n            {\n              \"id\": 22,\n              \"name\": \"EN-US\"\n            }\n          ]\n        },\n        {\n          \"id\": 46,\n          \"name\": \"EN-AU\"\n        },\n        {\n          \"id\": 58,\n          \"name\": \"EN-IE\"\n        },\n        {\n          \"id\": 68,\n          \"name\": \"ENG\"\n        },\n        {\n          \"id\": 1,\n          \"name\": \"ES\"\n        },\n        {\n          \"id\": 44,\n          \"name\": \"ES-AR\"\n        },\n        {\n          \"id\": 70,\n          \"name\": \"ES-XL\"\n        },\n        {\n          \"id\": 8,\n          \"name\": \"FA\"\n        },\n        {\n          \"id\": 12,\n          \"name\": \"FI\"\n        },\n        {\n          \"id\": 13,\n          \"name\": \"FR\"\n        },\n        {\n          \"id\": 59,\n          \"name\": \"FR-BE\"\n        },\n        {\n          \"id\": 72,\n          \"name\": \"FR-CH\"\n        },\n        {\n          \"id\": 67,\n          \"name\": \"GER\"\n        },\n        {\n          \"id\": 33,\n          \"name\": \"GU\"\n        },\n        {\n          \"id\": 15,\n          \"name\": \"HA\"\n        },\n        {\n          \"id\": 51,\n          \"name\": \"HE\"\n        },\n        {\n          \"id\": 47,\n          \"name\": \"HI\"\n        },\n        {\n          \"id\": 37,\n          \"name\": \"HR\"\n        },\n        {\n          \"id\": 20,\n          \"name\": \"HU\"\n        },\n        {\n          \"id\": 26,\n          \"name\": \"HY\"\n        },\n        {\n          \"id\": 23,\n          \"name\": \"IT\"\n        },\n        {\n          \"id\": 76,\n          \"name\": \"IT-CH\"\n        },\n        {\n          \"id\": 9,\n          \"name\": \"JA\"\n        },\n        {\n          \"id\": 52,\n          \"name\": \"KA\"\n        },\n        {\n          \"id\": 34,\n          \"name\": \"KU\"\n        },\n        {\n          \"id\": 71,\n          \"name\": \"LA\"\n        },\n        {\n          \"id\": 53,\n          \"name\": \"LT\"\n        },\n        {\n          \"id\": 25,\n          \"name\": \"MK\"\n        },\n        {\n          \"id\": 41,\n          \"name\": \"MNT\"\n        },\n        {\n          \"id\": 27,\n          \"name\": \"NL\"\n        },\n        {\n          \"id\": 77,\n          \"name\": \"NL-BE\"\n        },\n        {\n          \"id\": 40,\n          \"name\": \"NO-NO\"\n        },\n        {\n          \"id\": 35,\n          \"name\": \"PA\"\n        },\n        {\n          \"id\": 30,\n          \"name\": \"PL\"\n        },\n        {\n          \"id\": 4,\n          \"name\": \"PS\"\n        },\n        {\n          \"id\": 7,\n          \"name\": \"PT\"\n        },\n        {\n          \"id\": 78,\n          \"name\": \"PT-BR\"\n        },\n        {\n          \"id\": 57,\n          \"name\": \"RO\"\n        },\n        {\n          \"id\": 24,\n          \"name\": \"RU\"\n        },\n        {\n          \"id\": 16,\n          \"name\": \"SK\"\n        },\n        {\n          \"id\": 43,\n          \"name\": \"SL\"\n        },\n        {\n          \"id\": 21,\n          \"name\": \"SO\"\n        },\n        {\n          \"id\": 19,\n          \"name\": \"SQ\"\n        },\n        {\n          \"id\": 63,\n          \"name\": \"SR\"\n        },\n        {\n          \"id\": 31,\n          \"name\": \"SV\"\n        },\n        {\n          \"id\": 74,\n          \"name\": \"SW\"\n        },\n        {\n          \"id\": 50,\n          \"name\": \"TA\"\n        },\n        {\n          \"id\": 89,\n          \"name\": \"Test2\"\n        },\n        {\n          \"id\": 39,\n          \"name\": \"TESTSPRACHE\"\n        },\n        {\n          \"id\": 11,\n          \"name\": \"TH\"\n        },\n        {\n          \"id\": 29,\n          \"name\": \"TI\"\n        },\n        {\n          \"id\": 18,\n          \"name\": \"TR\"\n        },\n        {\n          \"id\": 80,\n          \"name\": \"tst\"\n        },\n        {\n          \"id\": 62,\n          \"name\": \"UK\"\n        },\n        {\n          \"id\": 38,\n          \"name\": \"UR\"\n        },\n        {\n          \"id\": 48,\n          \"name\": \"VI\"\n        },\n        {\n          \"id\": 75,\n          \"name\": \"WO\"\n        },\n        {\n          \"id\": 87,\n          \"name\": \"xyz123\",\n          \"sub_items\": [\n            {\n              \"id\": 91,\n              \"name\": \"xyz\"\n            }\n          ]\n        },\n        {\n          \"id\": 6,\n          \"name\": \"ZH-CN\"\n        },\n        {\n          \"id\": 42,\n          \"name\": \"ZH-HK\"\n        },\n        {\n          \"id\": 66,\n          \"name\": \"ZH-SG\"\n        }\n      ]\n    },\n    \"services\": {\n      \"values\": [\n        {\n          \"id\": 1,\n          \"name\": \"\\u0022Premium\\u0022\"\n        },\n        {\n          \"id\": 2,\n          \"name\": \"Beglaubigungen\"\n        },\n        {\n          \"id\": 3,\n          \"name\": \"CAT \\u00dcbersetzung (FM1) 50%-74%\"\n        },\n        {\n          \"id\": 4,\n          \"name\": \"CAT \\u00dcbersetzung No Match\"\n        },\n        {\n          \"id\": 5,\n          \"name\": \"DTP\"\n        },\n        {\n          \"id\": 6,\n          \"name\": \"Fachkorrektur\"\n        },\n        {\n          \"id\": 7,\n          \"name\": \"Lektorat\"\n        },\n        {\n          \"id\": 8,\n          \"name\": \"\\u00dcbersetzung\"\n        }\n      ],\n      \"display_name\": \"Dienstleistung\"\n    },\n    \"price_units\": {\n      \"values\": [\n        {\n          \"id\": 1,\n          \"name\": \"Mindestgeb\\u00fchr\"\n        },\n        {\n          \"id\": 2,\n          \"name\": \"Minute\"\n        },\n        {\n          \"id\": 3,\n          \"name\": \"Normseite\"\n        },\n        {\n          \"id\": 4,\n          \"name\": \"Normzeile\"\n        },\n        {\n          \"id\": 5,\n          \"name\": \"Pauschale\"\n        },\n        {\n          \"id\": 6,\n          \"name\": \"Quellwort\"\n        },\n        {\n          \"id\": 7,\n          \"name\": \"Stunde\"\n        },\n        {\n          \"id\": 8,\n          \"name\": \"Zielwort\"\n        }\n      ],\n      \"display_name\": \"Preiseinheit\"\n    },\n    \"currency\": {\n      \"values\": [\n        {\n          \"id\": 1,\n          \"name\": \"EUR\"\n        },\n        {\n          \"id\": 2,\n          \"name\": \"USD\"\n        }\n      ],\n      \"display_name\": \"W\\u00e4hrung\"\n    },\n    \"cat_tools\": {\n      \"values\": [\n        {\n          \"id\": 3,\n          \"name\": \"Across\"\n        },\n        {\n          \"id\": 2,\n          \"name\": \"MemoQ\"\n        },\n        {\n          \"id\": 1,\n          \"name\": \"Trados\"\n        },\n        {\n          \"id\": 4,\n          \"name\": \"WordFast\"\n        }\n      ],\n      \"display_name\": \"CAT-Tool\"\n    },\n    \"freelancer_payment_types\": {\n      \"values\": [\n        {\n          \"id\": 2,\n          \"name\": \"PayPal\"\n        },\n        {\n          \"id\": 1,\n          \"name\": \"\\u00dcberweisung\"\n        }\n      ],\n      \"display_name\": \"Bezahlart\"\n    },\n    \"freelancer_invoicing_types\": {\n      \"values\": [\n        {\n          \"id\": 2,\n          \"name\": \"Gutschrift\"\n        },\n        {\n          \"id\": 1,\n          \"name\": \"Rechnung\"\n        }\n      ],\n      \"display_name\": \"Rechnungsart\"\n    },\n    \"freelancer_rating\": {\n      \"values\": [\n        {\n          \"id\": 1,\n          \"name\": \"Qualti\\u00e4t A\"\n        }\n      ],\n      \"display_name\": \"Rating\"\n    },\n    \"freelancer_status\": {\n      \"values\": [\n        {\n          \"id\": 1,\n          \"name\": \"Kandidat\"\n        },\n        {\n          \"id\": 2,\n          \"name\": \"Kein Interesse\"\n        },\n        {\n          \"id\": 3,\n          \"name\": \"Lektor\"\n        },\n        {\n          \"id\": 4,\n          \"name\": \"\\u00dcbersetzer\"\n        },\n        {\n          \"id\": 5,\n          \"name\": \"\\u00dcbersetzer\\/Lektor\"\n        }\n      ],\n      \"display_name\": \"Status\"\n    },\n    \"customer_origin\": {\n      \"values\": [\n        {\n          \"id\": 1,\n          \"name\": \"Akquise\"\n        },\n        {\n          \"id\": 2,\n          \"name\": \"Empfehlung\"\n        },\n        {\n          \"id\": 4,\n          \"name\": \"Quahill\"\n        },\n        {\n          \"id\": 3,\n          \"name\": \"Website\"\n        }\n      ],\n      \"display_name\": \"Herkunft\"\n    },\n    \"customer_potential\": {\n      \"values\": [\n        {\n          \"id\": 1,\n          \"name\": \"A (Betrag A)\"\n        },\n        {\n          \"id\": 2,\n          \"name\": \"B (Betrag B)\"\n        },\n        {\n          \"id\": 3,\n          \"name\": \"C (Betrag C)\"\n        },\n        {\n          \"id\": 4,\n          \"name\": \"D (Betrag D)\"\n        }\n      ],\n      \"display_name\": \"Potenzial\"\n    },\n    \"customer_status\": {\n      \"values\": [\n        {\n          \"id\": 1,\n          \"name\": \"Aktiver Kunde\"\n        },\n        {\n          \"id\": 3,\n          \"name\": \"Kein Interesse\"\n        },\n        {\n          \"id\": 2,\n          \"name\": \"M\\u00f6glicher Kunde\"\n        },\n        {\n          \"id\": 4,\n          \"name\": \"Verlorener Kunde\"\n        }\n      ],\n      \"display_name\": \"Status\"\n    },\n    \"user_roles\": {\n      \"values\": [\n        {\n          \"id\": 3,\n          \"name\": \"ROLE_ACCOUNT_MANAGER\"\n        },\n        {\n          \"id\": 2,\n          \"name\": \"ROLE_ADMIN\"\n        },\n        {\n          \"id\": 1,\n          \"name\": \"ROLE_USER\"\n        }\n      ],\n      \"display_name\": \"Rolle Benutzer\"\n    },\n    \"account_managers\": {\n      \"values\": [\n        {\n          \"id\": 2,\n          \"username\": \"o.lindner\"\n        },\n        {\n          \"id\": 4,\n          \"username\": \"test\"\n        },\n        {\n          \"id\": 8,\n          \"username\": \"bbbbbbb\"\n        },\n        {\n          \"id\": 9,\n          \"username\": \"ccccccc\"\n        },\n        {\n          \"id\": 12,\n          \"username\": \"yyyyyy\"\n        },\n        {\n          \"id\": 13,\n          \"username\": \"gibbetnicht\"\n        }\n      ],\n      \"display_name\": \"Accountmgr.\"\n    }\n  }\n\n","coverage":[1,null,1,null,1,1,null,null,1,null,null,1,null,null,null,null,null,null,null,null,1,null,null,8,8,null,8,8,8,null,8,8,8,null,8,8,null,null,1,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"branches":[18,0,0,8,18,0,1,8,36,1,0,8,36,1,1,8,15,2,0,1,15,2,1,0,15,3,0,1,15,4,0,1,15,4,1,1,15,4,2,0,15,5,0,1,15,5,1,1]},{"name":"src/app/core/core-data.service.ts","source":"import { Injectable } from '@angular/core';\nimport { SimpleEntity, SimpleEntityCollection } from '../shared/model/simple-entity.model'\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { TwoLevelEntity, TwoLevelEntityCollection } from '../shared/model/two-level-entity.model';\nimport { UtilService } from './util.service';\nimport { User } from '../user/user.model';\nimport * as _ from \"lodash\";\n\n@Injectable()\nexport class CoreDataService {\n\n  protected $data: BehaviorSubject<CoreData>;\n  protected $dataLoaded: BehaviorSubject<Boolean>;\n\n  constructor(\n    protected util: UtilService,\n    protected http: HttpClient\n  ) {\n    this.$dataLoaded = <BehaviorSubject<Boolean>>new BehaviorSubject(false);\n    this.$data = <BehaviorSubject<CoreData>>new BehaviorSubject(new CoreData);\n\n    this.refreshDefaultData(() => { this.$dataLoaded.next(true) }, null);\n  }\n\n\n  getData() {\n    return this.$data.asObservable();\n  }\n\n  getDataLoaded() {\n    return this.$dataLoaded.asObservable();\n  }\n\n  coreDataLoaded(): Boolean {\n    return this.$dataLoaded.getValue();\n  }\n\n  refreshDefaultData(resolve, reject) {\n    // Set up post request\n    const req = this.http.get<CoreData>(\n      '/getDefaults'\n    )\n\n    // Execute post request and subscribe to response\n    req.subscribe(\n      data => {\n        data.languages_flat = this.util.getFlattenedTwoLevelEntity(data.languages);\n        data.sectors_flat = this.util.getFlattenedTwoLevelEntity(data.sectors);\n        this.$data.next(data);\n\n        resolve && resolve(data);\n      },\n      error => {\n\n        reject && reject(error);\n      });\n\n    return\n  }\n\n  /**\n   * \n   * @param entityName Can be passed in pascal case (php-classname) or snake case (collection name in CoreDataService)\n   */\n  getSimpleEntityCollection(entityName: string): Promise<SimpleEntityCollection> {\n\n    return new Promise((resolve, reject) => {\n      const entityNameConverted = this.util.ucfirst(_.camelCase(entityName));\n\n      // Set up post request\n      const req = this.http.get<SimpleEntityCollection>(\n        '/admin/simple_entity/' + entityNameConverted\n      )\n\n      // Execute post request and subscribe to response\n      req.subscribe(\n        data => {\n          let arrayOfValues = this.$data.getValue();\n          arrayOfValues[_.snakeCase(entityName)] = data;\n          this.$data.next(arrayOfValues);\n          resolve && resolve(data);\n        },\n        error => {\n          reject && reject(error);\n        });\n    });\n  }\n\n  /**\n     * Adds item to the database, receives id and adds item\n     * to the according array in angular\n     */\n  createSimpleEntityItem(entityName, newItemName): Promise<SimpleEntity> {\n\n    return new Promise((resolve, reject) => {\n      if (entityName == null || entityName == \"\") {\n        alert(\"Bug: Name der Entity nicht angegeben\");\n        reject && reject();\n      } else if (newItemName == null || newItemName == \"\") {\n        alert(\"Der neue Name darf nicht leer sein!\");\n        reject && reject();\n      } else {\n        const entityNameConverted = this.util.ucfirst(_.camelCase(entityName));\n\n        // Set up post request\n        const req = this.http.post<SimpleEntity>(\n          '/admin/simple_entity/' + entityNameConverted,\n          {\n            newItemName\n          }\n        )\n\n        // Execute post request and subscribe to response\n        req.subscribe(\n          data => {\n            resolve && resolve(data);\n          },\n          error => {\n            console.log(error);\n            reject && reject(error);\n          });\n      }\n\n\n    });\n\n  }\n\n  /**\n   * Removes item in database and updates angular array\n   * on success\n   */\n  deleteSimpleEntityItem(entityName, item_id): Promise<any> {\n    return new Promise((resolve, reject) => {\n      if (!confirm(\"Eintrag wird gelöscht!\")) {\n        reject && reject();\n      } else {\n        const entityNameConverted = this.util.ucfirst(_.camelCase(entityName));\n\n        // Set up post request\n        const req = this.http.delete<any>(\n          '/admin/simple_entity/' + entityNameConverted + '/' + item_id\n        )\n\n        // Execute post request and subscribe to response\n        req.subscribe(\n          (data) => {\n            resolve && resolve(data);\n          },\n          error => {\n            console.log(error);\n            reject && reject(error);\n          });\n      }\n    });\n  }\n\n  /**\n   * Updates item in database and updates angular array\n   * on success\n   *\n   * // Change to input on first click, then update on second click!\n   */\n  updateSimpleEntityItem(entityName, item_id, item_edited_name): Promise<SimpleEntity> {\n    return new Promise((resolve, reject) => {\n      if (entityName == null || entityName == \"\") {\n        alert(\"Bug: Name der Entity nicht angegeben\")\n        reject && reject();\n      } else if (item_edited_name == null || item_edited_name == \"\") {\n        alert(\"Der neue Name darf nicht leer sein!\");\n        reject && reject();\n      } else {\n        {\n          const entityNameConverted = this.util.ucfirst(_.camelCase(entityName));\n\n          // Set up post request\n          const req = this.http.post<SimpleEntity>(\n            '/admin/simple_entity/' + entityNameConverted + '/' + item_id,\n            {\n              itemEditedName: item_edited_name\n            }\n          )\n\n          // Execute post request and subscribe to response\n          req.subscribe(\n            data => {\n              resolve && resolve(data);\n            },\n            error => {\n              console.log(error);\n              reject && reject(error);\n            });\n        }\n      }\n    });\n  }\n\n\n\n  /**\n     * \n     * @param entityName Can be passed in pascal case (php-classname) or snake case (collection name in CoreDataService)\n     */\n  getFlattenedTwoLevelEntityCollection(entityName: string): Promise<TwoLevelEntityCollection> {\n\n    return new Promise((resolve, reject) => {\n      const entityNameConverted = this.util.ucfirst(_.camelCase(entityName));\n\n      // Set up post request\n      const req = this.http.get<TwoLevelEntityCollection>(\n        '/admin/two_level_entity/' + entityNameConverted\n      )\n\n      // Execute post request and subscribe to response\n      req.subscribe(\n        data => {\n          let arrayOfValues = this.$data.getValue();\n          arrayOfValues[_.snakeCase(entityName)] = data;\n\n          arrayOfValues[_.snakeCase(entityName) + '_flat'] = this.util.getFlattenedTwoLevelEntity(data);;\n          this.$data.next(arrayOfValues);\n\n          resolve && resolve(data);\n        },\n        error => {\n          reject && reject(error);\n        });\n    });\n  }\n\n  createTwoLevelEntityItem(entityName, mainItemId, newItemName): Promise<TwoLevelEntity> {\n\n    return new Promise((resolve, reject) => {\n      if (entityName == null || entityName == \"\") {\n        alert(\"Bug: Name der Entity nicht angegeben\")\n        reject && reject();\n      } else if (newItemName == null || newItemName == \"\") {\n        alert(\"Der neue Name darf nicht leer sein!\");\n        reject && reject();\n      } else {\n        const entityNameConverted = this.util.ucfirst(_.camelCase(entityName));\n\n\n        const url = '/admin/two_level_entity/' + entityNameConverted + (mainItemId ? '/' + mainItemId + '/sub_items' : '');\n\n        // Set up post request\n        const req = this.http.post<TwoLevelEntity>(\n          url,\n          {\n            newItemName: newItemName\n          }\n        )\n\n        // Execute post request and subscribe to response\n        req.subscribe(\n          data => {\n            resolve && resolve(data);\n          },\n          error => {\n            reject && reject(error);\n          });\n      }\n\n    });\n  }\n\n\n  deleteTwoLevelEntityItem(entityName, mainItemId, subItemId): Promise<any> {\n    return new Promise((resolve, reject) => {\n      if (!confirm(\"Eintrag wird gelöscht!\")) {\n        reject && reject()\n      } else if (entityName == null || entityName == \"\") {\n        alert(\"Bug: Name der Entity nicht angegeben\")\n        reject && reject();\n      } else if (!(mainItemId > 0)) {\n        alert(\"Bug: Eine der angegebenen Item IDs ist keine positive Zahl!\");\n        reject && reject();\n      } else {\n        const entityNameConverted = this.util.ucfirst(_.camelCase(entityName));\n\n        const url = '/admin/two_level_entity/' + entityNameConverted + '/' + mainItemId + (subItemId ? '/sub_items/' + subItemId : '');\n\n        // Set up post request\n        const req = this.http.delete(\n          url\n        )\n\n        // Execute post request and subscribe to response\n        req.subscribe(\n          data => {\n            resolve && resolve(data);\n          },\n          error => {\n            reject && reject(error);\n          });\n      }\n\n    });\n  }\n\n  updateTwoLevelEntityItem(entityName, mainItemId, subItemId, itemNewName): Promise<TwoLevelEntity> {\n\n    return new Promise((resolve, reject) => {\n      if (entityName == null || entityName == \"\") {\n        alert(\"Bug: Name der Entity nicht angegeben\")\n        return null;\n      } else if (itemNewName == null || itemNewName == \"\") {\n        alert(\"Der neue Name darf nicht leer sein!\");\n        return null;\n      } else {\n        const entityNameConverted = this.util.ucfirst(_.camelCase(entityName));\n\n        const url = '/admin/two_level_entity/' + entityNameConverted + '/' + mainItemId + (subItemId ? '/sub_items/' + subItemId : '');\n\n        // Set up post request\n        const req = this.http.post<TwoLevelEntity>(\n          url,\n          {\n            itemNewName: itemNewName\n          }\n        )\n\n        // Execute post request and subscribe to response\n        req.subscribe(\n          data => {\n            resolve && resolve(data);\n          },\n          error => {\n            reject && reject(error);\n          });\n      }\n    });\n  }\n\n  makeMainItem() {\n\n  }\n  addAsSubItem() {\n\n  }\n}\n\nexport class CoreData {\n  yes_no_in_progress: SimpleEntityCollection;\n  anrede: SimpleEntityCollection;\n  country: SimpleEntityCollection;\n  sectors: TwoLevelEntityCollection;\n  sectors_flat: SimpleEntityCollection;\n  languages: TwoLevelEntityCollection;\n  languages_flat: SimpleEntityCollection;\n  services: SimpleEntityCollection;\n  price_units: SimpleEntityCollection;\n  currency: SimpleEntityCollection;\n  cat_tools: SimpleEntityCollection;\n  freelancer_payment_types: SimpleEntityCollection;\n  freelancer_invoicing_types: SimpleEntityCollection;\n  freelancer_rating: SimpleEntityCollection;\n  freelancer_status: SimpleEntityCollection;\n  customer_origin: SimpleEntityCollection;\n  customer_potential: SimpleEntityCollection;\n  customer_status: SimpleEntityCollection;\n  user_roles: SimpleEntityCollection;\n  account_managers: User[];\n}","coverage":[1,null,1,1,null,1,null,1,null,null,1,null,null,null,null,20,20,20,null,20,20,null,20,null,null,null,1,6,null,null,1,0,null,null,1,1,null,null,12,null,12,null,null,null,null,12,null,9,9,9,null,9,null,null,null,0,null,null,12,null,null,null,null,null,null,2,null,2,2,null,null,2,null,null,null,null,2,null,1,1,1,1,null,null,0,null,null,null,null,null,null,null,null,1,null,1,1,0,0,1,0,0,null,1,null,null,1,null,null,null,null,null,null,null,1,null,1,null,null,0,0,null,null,null,null,null,null,null,null,null,null,null,null,1,1,1,0,null,1,null,null,1,null,null,null,null,1,null,1,null,null,0,0,null,null,null,null,null,null,null,null,null,null,null,1,1,1,0,0,1,0,0,null,null,1,null,null,1,null,null,null,null,null,null,null,1,null,1,null,null,0,0,null,null,null,null,null,null,null,null,null,null,null,null,2,null,2,2,null,null,2,null,null,null,null,2,null,1,1,null,1,1,null,1,null,null,0,null,null,null,null,1,null,1,1,0,0,1,0,0,null,1,null,null,1,null,null,1,null,null,null,null,null,null,null,1,null,1,null,null,0,null,null,null,null,null,null,null,1,1,1,0,1,0,0,1,0,0,null,1,null,1,null,null,1,null,null,null,null,1,null,1,null,null,0,null,null,null,null,null,null,1,null,1,1,0,0,1,0,0,null,1,null,1,null,null,1,null,null,null,null,null,null,null,1,null,1,null,null,0,null,null,null,null,null,1,null,null,1,null,null,1,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1],"branches":[52,0,0,9,52,0,1,9,56,1,0,0,56,1,1,0,82,2,0,1,82,2,1,1,85,3,0,0,85,3,1,0,97,4,0,0,97,4,1,1,97,5,0,1,97,5,1,1,99,6,0,0,99,6,1,0,100,7,0,0,100,7,1,1,100,8,0,1,100,8,1,1,102,9,0,0,102,9,1,0,117,10,0,1,117,10,1,1,121,11,0,0,121,11,1,0,136,12,0,0,136,12,1,1,137,13,0,0,137,13,1,0,149,14,0,1,149,14,1,1,153,15,0,0,153,15,1,0,167,16,0,0,167,16,1,1,167,17,0,1,167,17,1,1,169,18,0,0,169,18,1,0,170,19,0,0,170,19,1,1,170,20,0,1,170,20,1,1,172,21,0,0,172,21,1,0,188,22,0,1,188,22,1,1,192,23,0,0,192,23,1,0,224,24,0,1,224,24,1,1,227,25,0,0,227,25,1,0,235,26,0,0,235,26,1,1,235,27,0,1,235,27,1,1,237,28,0,0,237,28,1,0,238,29,0,0,238,29,1,1,238,30,0,1,238,30,1,1,240,31,0,0,240,31,1,0,245,32,0,1,245,32,1,0,258,33,0,1,258,33,1,1,261,34,0,0,261,34,1,0,271,35,0,0,271,35,1,1,272,36,0,0,272,36,1,0,273,37,0,0,273,37,1,1,273,38,0,1,273,38,1,1,275,39,0,0,275,39,1,0,276,40,0,0,276,40,1,1,278,41,0,0,278,41,1,0,282,42,0,1,282,42,1,0,292,43,0,1,292,43,1,1,295,44,0,0,295,44,1,0,305,45,0,0,305,45,1,1,305,46,0,1,305,46,1,1,308,47,0,0,308,47,1,1,308,48,0,1,308,48,1,1,314,49,0,1,314,49,1,0,327,50,0,1,327,50,1,1,330,51,0,0,330,51,1,0,17,52,0,1,17,52,1,0,17,53,0,1,17,54,0,1,17,54,1,1,17,54,2,0,17,55,0,1,17,55,1,1]},{"name":"src/app/core/util.service.ts","source":"import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Location } from '@angular/common';\r\nimport { TwoLevelEntity, TwoLevelEntityCollection } from '../shared/model/two-level-entity.model';\r\nimport { PriceLine } from '../shared/model/price-line.model';\r\nimport { SimpleEntityCollection, SimpleEntity } from '../shared/model/simple-entity.model';\r\nimport * as _ from \"lodash\";\r\n\r\n/**\r\n * Service class with small helper methods used in multiple places of the app.\r\n */\r\n@Injectable()\r\nexport class UtilService {\r\n\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private location: Location) {\r\n  }\r\n\r\n  goTo(route) {\r\n    this.router.navigate([route]);\r\n  }\r\n\r\n  historyBack() {\r\n    this.location.back();\r\n  }\r\n\r\n  ucfirst(str) {\r\n    str += ''\r\n    var f = str.charAt(0)\r\n      .toUpperCase()\r\n    return f + str.substr(1)\r\n  }\r\n\r\n  // Create display name for entities with potential subentities\r\n  getCombinedDisplayName(obj: TwoLevelEntity) {\r\n    if (!obj) return null;\r\n\r\n    if (typeof obj.main_item === 'undefined')\r\n      return obj.name;\r\n\r\n    return obj.main_item.name + ' (' + obj.name + ')';\r\n  }\r\n\r\n  getFlattenedTwoLevelEntity(twoLevelEntity: TwoLevelEntityCollection): SimpleEntityCollection {\r\n    let arrTemp = this.cloneDeep(twoLevelEntity);\r\n    let result = new SimpleEntityCollection();\r\n    let flatArr: SimpleEntity[] = [];\r\n\r\n    if (typeof arrTemp.values !== 'undefined') {\r\n      for (var idxMain = 0; idxMain < arrTemp.values.length; idxMain++) {\r\n\r\n        flatArr.push(arrTemp.values[idxMain]);\r\n        if (typeof arrTemp.values[idxMain].sub_items !== 'undefined') {\r\n          for (var idxSub = 0; idxSub < arrTemp.values[idxMain].sub_items.length; idxSub++) {\r\n            arrTemp.values[idxMain].sub_items[idxSub].name = arrTemp.values[idxMain].name + ' (' + arrTemp.values[idxMain].sub_items[idxSub].name + ')';\r\n            flatArr.push(arrTemp.values[idxMain].sub_items[idxSub]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    result.display_name = arrTemp.display_name;\r\n    flatArr.sort((a, b) => { return a.name.localeCompare(b.name) });\r\n    result.values = flatArr;\r\n\r\n    return result;\r\n  }\r\n\r\n  compareById(obj1, obj2) {\r\n    return obj1 && obj2 && (obj1.id === obj2.id)\r\n  }\r\n\r\n  cloneDeep(obj) {\r\n    return _.cloneDeep(obj);\r\n  }\r\n\r\n  isObjectIdInArray(targetArray, obj) {\r\n    for (let i = 0; i < targetArray.length; i++) {\r\n      if (targetArray[i].id === obj.id) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  addCopyToArray(targetArray, obj) {\r\n    if (targetArray && obj) {\r\n      const copyObj = this.cloneDeep(obj);\r\n      targetArray.push(copyObj);\r\n    }\r\n  }\r\n\r\n  removeFromArray(targetArray, obj) {\r\n    if (targetArray && obj) {\r\n      for (var i = 0; i < targetArray.length; i++) {\r\n        if (targetArray[i].id == obj.id) {\r\n          const test = targetArray.splice(i, 1);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  orderArrayByName(simpleEntityArray: SimpleEntity[]) {\r\n    if (simpleEntityArray) {\r\n      return simpleEntityArray.sort((a, b) => { return a.name.localeCompare(b.name) });\r\n    }\r\n    return [];\r\n  }\r\n\r\n  orderPrices(prices: PriceLine[]): PriceLine[] {\r\n    if (!prices) {\r\n      return null;\r\n    }\r\n\r\n    return prices.sort((a, b) => {\r\n      let result = 0;\r\n\r\n      let valA = this.getCombinedDisplayName(a.lng_source);\r\n      let valB = this.getCombinedDisplayName(b.lng_source);\r\n      if (valA && valB)\r\n        result = valA.localeCompare(valB);\r\n\r\n      if (result === 0) {\r\n        valA = this.getCombinedDisplayName(a.lng_target);\r\n        valB = this.getCombinedDisplayName(b.lng_target);\r\n        if (valA && valB)\r\n          result = valA.localeCompare(valB);\r\n      }\r\n\r\n      if (result === 0) {\r\n        if (a.service && b.service)\r\n          result = a.service.name.localeCompare(b.service.name);\r\n      }\r\n\r\n      return result;\r\n    });\r\n  }\r\n\r\n}\r\n","coverage":[1,1,1,null,null,1,1,null,null,null,null,null,1,null,null,null,52,52,null,null,1,3,null,null,1,2,null,null,1,10,10,null,10,null,null,null,1,20,null,20,19,null,1,null,null,1,35,35,35,null,35,35,null,1952,1952,102,224,224,null,null,null,null,null,35,11570,35,null,35,null,null,1,69067,null,null,1,37,null,null,1,2,4,1,null,null,1,null,null,1,1,1,1,null,null,null,1,1,1,2,1,1,null,null,null,null,null,1,6,457,null,0,null,null,1,1,0,null,null,1,6,null,6,6,6,6,null,6,3,3,3,3,null,null,6,1,1,null,null,6,null,null,null,1,null],"branches":[38,0,0,0,38,0,1,20,40,1,0,19,40,1,1,1,51,2,0,35,51,2,1,0,55,3,0,102,55,3,1,1850,72,4,0,69067,72,4,1,69067,72,4,2,0,81,5,0,1,81,5,1,3,89,6,0,1,89,6,1,0,89,7,0,1,89,7,1,1,96,8,0,1,96,8,1,0,96,9,0,1,96,9,1,1,98,10,0,1,98,10,1,1,107,11,0,6,107,11,1,0,114,12,0,0,114,12,1,1,123,13,0,6,123,13,1,0,123,14,0,6,123,14,1,6,126,15,0,3,126,15,1,3,129,16,0,3,129,16,1,0,129,17,0,3,129,17,1,3,133,18,0,1,133,18,1,5,134,19,0,1,134,19,1,0,134,20,0,1,134,20,1,1,17,21,0,1,17,21,1,0,17,22,0,1,17,23,0,1,17,23,1,1,17,23,2,0,17,24,0,1,17,24,1,1]},{"name":"src/app/customer/customer.model.ts","source":"import { Language, YesNoInProgress, Sector, CatTool } from '../shared/model/common.model';\r\nimport { Address } from '../shared/model/address.model';\r\nimport { Person } from '../shared/model/person.model';\r\nimport { SimpleChange } from '@angular/core';\r\nimport { PriceLine } from '../shared/model/price-line.model';\r\nimport { SimpleEntity } from '../shared/model/simple-entity.model';\r\nimport { Contact } from '../shared/model/contact.model';\r\nimport { User } from '../user/user.model';\r\n\r\n/**\r\n * Object to hold all information the application can know about a freelancer.\r\n */\r\nexport class Customer extends Contact {\r\n    customer_no: string = null;\r\n    address: Address = new Address();\r\n    origin: CustomerOrigin = null;\r\n    potential: CustomerPotential = null;\r\n    account_manager: User = null;\r\n    status: CustomerStatus = null;\r\n    invoicing_details: string = null;\r\n    contacts: CustomerContact[];\r\n}\r\n\r\nexport class CustomerOrigin extends SimpleEntity { }\r\n\r\nexport class CustomerPotential extends SimpleEntity { }\r\n\r\nexport class CustomerStatus extends SimpleEntity { }\r\n\r\nexport class CustomerContact extends Person {\r\n    position: string;\r\n}","coverage":[null,1,1,null,null,1,1,null,null,null,null,null,9,9,9,9,9,9,9,9,null,1,null,1,null,1,null,1,null,1,null,1],"branches":[13,0,0,9,13,0,1,9,13,0,2,9]},{"name":"src/app/customer/customer-compact/customer-compact.component.ts","source":"import { Component, OnInit, Input } from '@angular/core';\nimport { Customer } from '../customer.model';\nimport { UtilService } from '../../core/util.service';\nimport { CustomerEditService } from '../customer-edit/customer-edit.service';\n\n@Component({\n  selector: 'app-customer-compact',\n  templateUrl: './customer-compact.component.html',\n  styleUrls: ['./customer-compact.component.scss']\n})\nexport class CustomerCompactComponent implements OnInit {\n\n  @Input('customer')\n  customer: Customer\n\n  constructor(\n    private util: UtilService,\n    private customerEditService: CustomerEditService\n  ) { }\n\n  editCustomer(customer) {\n    // Reload customer or pass empty new customer\n    this.customerEditService.editCustomer(customer.id)\n  }\n\n  editcontact(customer, contact) {\n    this.customerEditService.editCustomerContact(customer, contact);\n  }\n\n  getCombinedDisplayName(entity) {\n    return this.util.getCombinedDisplayName(entity);\n  }\n\n  ngOnInit() {\n  }\n\n}\n","coverage":[1,1,1,1,null,null,null,null,null,null,1,null,null,1,null,null,1,1,null,null,1,null,0,null,null,1,0,null,null,1,0,null,null,1,null,null,1,null],"branches":[14,0,0,1,14,0,1,0,14,1,0,1,17,2,0,1,17,2,1,0,17,3,0,1,17,4,0,1,17,4,1,1,17,4,2,0,17,5,0,1,17,5,1,1]},{"name":"src/app/customer/customer-edit/customer-edit.component.ts","source":"import { Component, OnInit } from '@angular/core';\nimport { CoreData, CoreDataService } from '../../core/core-data.service';\nimport { CustomerEditService } from './customer-edit.service';\nimport { Customer } from '../customer.model';\nimport { PriceLine } from '../../shared/model/price-line.model';\nimport { UtilService } from '../../core/util.service';\nimport { CustomerSearchService } from '../customer-search/customer-search.service';\n\n@Component({\n  selector: 'app-customer-edit',\n  templateUrl: './customer-edit.component.html',\n  styleUrls: ['./customer-edit.component.scss']\n})\nexport class CustomerEditComponent implements OnInit {\n\n  cust_edit: Customer;\n  coreData: CoreData = new CoreData();\n\n  constructor(\n    public util: UtilService,\n    private coreDataService: CoreDataService,\n    private customerEditService: CustomerEditService,\n    private customerSearchService: CustomerSearchService\n  ) { }\n\n\n  saveCustomer() {\n    this.customerEditService.saveCustomer(this.cust_edit);\n    // ToDo: Reload search list or update customer in list\n  }\n\n  deleteCustomer() {\n    this.customerEditService.deleteCustomer(this.cust_edit);\n    // ToDo: Reload search list or update customer in list\n  }\n\n  cancelEdit() {\n    // this.customerSearchService.searchCustomers(null);\n    this.util.historyBack();\n  }\n\n  ngOnInit() {\n    this.coreDataService.getData().subscribe((data) => {\n      this.coreData = data;\n    });\n\n    this.cust_edit = this.customerEditService.getCustomerToEdit();\n  }\n}\n","coverage":[1,1,1,null,null,1,1,null,null,null,null,null,null,1,null,null,1,null,null,1,1,1,1,null,null,null,1,0,null,null,null,1,0,null,null,null,1,null,0,null,null,1,1,1,null,null,1,null,1,null],"branches":[20,0,0,1,20,0,1,0,20,1,0,1,20,2,0,1,20,2,1,1,20,2,2,0,20,3,0,1,20,3,1,1,21,4,0,1,21,4,1,1,21,4,2,0,21,5,0,1,21,5,1,1,22,6,0,1,22,6,1,1,22,6,2,0,22,7,0,1,22,7,1,1]},{"name":"src/app/customer/customer-edit/customer-edit.service.ts","source":"import { Injectable } from '@angular/core';\r\nimport { Customer, CustomerContact } from '../customer.model';\r\nimport { UtilService } from '../../core/util.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { CustomerSearchService } from '../customer-search/customer-search.service';\r\n\r\n@Injectable()\r\nexport class CustomerEditService {\r\n\r\n  private customerToEdit: Customer = new Customer();\r\n  private customerContactToEdit: CustomerContact = new CustomerContact();\r\n  private customerContactToEdit_CustomerId: number = null;\r\n\r\n  constructor(\r\n    private util: UtilService,\r\n    private http: HttpClient,\r\n    private customerSearchService: CustomerSearchService\r\n  ) {\r\n\r\n  }\r\n\r\n  getCustomerToEdit() {\r\n    return this.customerToEdit;\r\n  }\r\n\r\n\r\n  /**\r\n   * Save changes on server\r\n   * \r\n   * @param customerToSave Data for the customer to be updated\r\n   */\r\n  saveCustomer(customerToSave) {\r\n    this.customerToEdit = customerToSave;\r\n\r\n    // Kopie des Customers erstellen, um Datum in yyyy-mm-dd String zu wandeln, falls vorhanden\r\n    let fl_save = this.util.cloneDeep(this.customerToEdit);\r\n\r\n    // Set up post request\r\n    const req = this.http.post<Customer>(\r\n      '/customer/editCustomer',\r\n      fl_save\r\n    )\r\n\r\n    // Execute post request and subscribe to response\r\n    req.subscribe(\r\n      data => {\r\n        this.customerToEdit = data;\r\n        this.customerSearchService.searchCustomers(null);\r\n        this.util.historyBack();\r\n      },\r\n      error => {\r\n        alert(\"Fehler beim Speichern:\" + error.message);\r\n      });\r\n\r\n    return\r\n  }\r\n\r\n  deleteCustomer(customerToDelete) {\r\n    if (!confirm('Customer ' + customerToDelete.name2 + ', ' + customerToDelete.name1 + ' wirklich löschen?!')) {\r\n      return;\r\n    }\r\n\r\n    // Set up post request\r\n    const req = this.http.post<Customer>(\r\n      '/customer/deleteCustomer',\r\n      customerToDelete.id\r\n    )\r\n\r\n    // Execute post request and subscribe to response\r\n    req.subscribe(\r\n      data => {\r\n        this.customerSearchService.searchCustomers(null);\r\n        this.util.historyBack();\r\n      },\r\n      error => {\r\n        alert(\"Fehler beim Löschen:\" + error.message);\r\n      });\r\n\r\n    return\r\n  }\r\n\r\n  /**\r\n   * Loads customer by id and switches to edit view if found\r\n   * \r\n   * @param id Id of the customer to be edited\r\n   */\r\n  getCustomerByIdAndEdit(id: number) {\r\n    // Set up post request\r\n    const req = this.http.get<Customer>(\r\n      '/customer/' + id\r\n    )\r\n\r\n    // Execute post request and subscribe to response\r\n    req.subscribe(\r\n      data => {\r\n        this.customerToEdit = data;\r\n        console.log(data);\r\n        this.util.goTo('/customer/edit');\r\n      },\r\n      error => {\r\n        alert(error.message);\r\n      });\r\n\r\n    return\r\n  }\r\n\r\n  editCustomer(id: number) {\r\n    this.customerToEdit = new Customer();\r\n    if (id && id > 0) {\r\n      // Reload customer before editing\r\n      this.getCustomerByIdAndEdit(id);\r\n    } else {\r\n      this.util.goTo('/customer/edit');\r\n    }\r\n  }\r\n\r\n  // --------- CustomerContact -------------\r\n\r\n  getCustomerContactToEdit() {\r\n    return this.customerContactToEdit;\r\n  }\r\n\r\n  getCustomerContactByIdAndEdit(id: number) {\r\n    // Set up post request\r\n    const req = this.http.get<CustomerContact>(\r\n      '/customer_contact/' + id\r\n    )\r\n\r\n    // Execute post request and subscribe to response\r\n    req.subscribe(\r\n      data => {\r\n        this.customerContactToEdit = data;\r\n        console.log(data);\r\n        this.util.goTo('/customer/edit_contact');\r\n      },\r\n      error => {\r\n        alert(error.message);\r\n      });\r\n\r\n    return\r\n  }\r\n\r\n  editCustomerContact(customerId: number, contactId: number) {\r\n    if (!(customerId > 0)) {\r\n      alert('Fehler: Es wurde keine Kundenid übergeben - bitte Info an Thomas!');\r\n      return\r\n    }\r\n    this.customerContactToEdit = new CustomerContact();\r\n    this.customerContactToEdit_CustomerId = customerId;\r\n    if (contactId && contactId > 0) {\r\n      // Reload customer before editing\r\n      this.getCustomerContactByIdAndEdit(contactId);\r\n    } else {\r\n      this.util.goTo('/customer/edit');\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Save changes on server\r\n   * \r\n   * @param customerContactToSave Data for the customerContact to be updated\r\n   */\r\n  saveCustomerContact(customerContactToSave) {\r\n    this.customerContactToEdit = customerContactToSave;\r\n\r\n    // Kopie des CustomerContacts erstellen, um Datum in yyyy-mm-dd String zu wandeln, falls vorhanden\r\n    let cust_save = this.util.cloneDeep(this.customerContactToEdit);\r\n    cust_save.customer_id = this.customerContactToEdit_CustomerId;\r\n\r\n    // Set up post request\r\n    const req = this.http.post<CustomerContact>(\r\n      '/customer/editCustomerContact',\r\n      cust_save\r\n    )\r\n\r\n    // Execute post request and subscribe to response\r\n    req.subscribe(\r\n      data => {\r\n        this.customerContactToEdit = data;\r\n        this.customerSearchService.searchCustomers(null);\r\n        this.util.historyBack();\r\n      },\r\n      error => {\r\n        alert(\"Fehler beim Speichern:\" + error.message);\r\n      });\r\n\r\n    return\r\n  }\r\n\r\n  deleteCustomerContact(customerContactToDelete) {\r\n    if (!confirm('Kundenkontakt ' + customerContactToDelete.name2 + ', ' + customerContactToDelete.name1 + ' wirklich löschen?!')) {\r\n      return;\r\n    }\r\n\r\n    // Set up post request\r\n    const req = this.http.post<CustomerContact>(\r\n      '/customer/deleteContact',\r\n      customerContactToDelete.id\r\n    )\r\n\r\n    // Execute post request and subscribe to response\r\n    req.subscribe(\r\n      data => {\r\n        this.customerSearchService.searchCustomers(null);\r\n        this.util.historyBack();\r\n      },\r\n      error => {\r\n        alert(\"Fehler beim Löschen:\" + error.message);\r\n      });\r\n\r\n    return\r\n  }\r\n\r\n}\r\n","coverage":[1,1,1,1,1,null,null,1,null,7,7,7,null,null,7,7,7,null,null,null,null,1,1,null,null,null,null,null,null,null,null,1,1,null,null,1,null,null,1,null,null,null,null,null,1,null,1,1,1,null,null,0,null,null,1,null,null,1,1,0,null,null,null,1,null,null,null,null,null,1,null,1,1,null,null,0,null,null,1,null,null,null,null,null,null,null,1,null,0,null,null,null,null,0,null,0,0,0,null,null,0,null,null,0,null,null,1,0,0,null,0,null,0,null,null,null,null,null,1,1,null,null,1,null,0,null,null,null,null,0,null,0,0,0,null,null,0,null,null,0,null,null,1,0,0,0,null,0,0,0,null,0,null,0,null,null,null,null,null,null,null,null,null,1,0,null,null,0,0,null,null,0,null,null,null,null,null,0,null,0,0,0,null,null,0,null,null,0,null,null,1,0,0,null,null,null,0,null,null,null,null,null,0,null,0,0,null,null,0,null,null,0,null,null,1,null],"branches":[59,0,0,0,59,0,1,1,109,1,0,0,109,1,1,0,109,2,0,0,109,2,1,0,144,3,0,0,144,3,1,0,150,4,0,0,150,4,1,0,150,5,0,0,150,5,1,0,192,6,0,0,192,6,1,0,15,7,0,1,15,7,1,0,15,8,0,1,15,9,0,1,15,9,1,1,15,9,2,0,15,10,0,1,15,10,1,1,16,11,0,1,16,11,1,1,16,11,2,0,16,12,0,1,16,12,1,1]},{"name":"src/app/customer/customer-edit-contact/customer-edit-contact.component.ts","source":"import { Component, OnInit } from '@angular/core';\nimport { CoreDataService, CoreData } from '../../core/core-data.service';\nimport { CustomerEditService } from '../customer-edit/customer-edit.service';\nimport { CustomerContact } from '../customer.model';\nimport { UtilService } from '../../core/util.service';\nimport { CustomerSearchService } from '../customer-search/customer-search.service';\n\n@Component({\n  selector: 'app-customer-edit-contact',\n  templateUrl: './customer-edit-contact.component.html',\n  styleUrls: ['./customer-edit-contact.component.scss']\n})\nexport class CustomerEditContactComponent implements OnInit {\n\n  contact_edit: CustomerContact;\n  coreData: CoreData = new CoreData();\n\n  constructor(\n    public util: UtilService,\n    private coreDataService: CoreDataService,\n    private customerEditService: CustomerEditService,\n    private customerSearchService: CustomerSearchService\n  ) { }\n\n  saveCustomerContact() {\n    this.customerEditService.saveCustomerContact(this.contact_edit);\n    // ToDo: Reload search list or update customer in list\n  }\n\n  deleteCustomerContact() {\n    this.customerEditService.deleteCustomerContact(this.contact_edit);\n    // ToDo: Reload search list or update customer in list\n  }\n\n  cancelEdit() {\n    // this.customerSearchService.searchCustomers(null);\n    this.util.historyBack();\n  }\n\n  ngOnInit() {\n    this.coreDataService.getData().subscribe((data) => {\n      this.coreData = data;\n    });\n\n    this.contact_edit = this.customerEditService.getCustomerContactToEdit();\n  }\n}\n","coverage":[1,1,1,null,1,1,null,null,null,null,null,null,1,null,null,1,null,null,1,1,1,1,null,null,1,0,null,null,null,1,0,null,null,null,1,null,0,null,null,1,1,1,null,null,1,null,1,null],"branches":[19,0,0,1,19,0,1,0,19,1,0,1,19,2,0,1,19,2,1,1,19,2,2,0,19,3,0,1,19,3,1,1,20,4,0,1,20,4,1,1,20,4,2,0,20,5,0,1,20,5,1,1,21,6,0,1,21,6,1,1,21,6,2,0,21,7,0,1,21,7,1,1]},{"name":"src/app/customer/customer-search/customer-search-params.model.ts","source":"import { Language, Sector } from \"../../shared/model/common.model\";\r\nimport { CustomerOrigin, CustomerPotential, CustomerStatus } from \"../customer.model\";\r\nimport { User } from \"../../user/user.model\";\r\n\r\n/**\r\n * Object to hold all information the application can know about a freelancer.\r\n */\r\nexport class CustomerSearchParams {\r\n    name: string;\r\n    asp_name: string;\r\n    akquise: CustomerOrigin;\r\n    account_manager: User;\r\n    potential: CustomerPotential;\r\n    status: CustomerStatus;\r\n    page: number = 1;\r\n}","coverage":[null,null,null,null,null,null,null,1,null,null,null,null,null,null,9,1],"branches":[]},{"name":"src/app/customer/customer-search/customer-search.component.ts","source":"import { Component, OnInit } from '@angular/core';\nimport { Customer } from '../customer.model';\nimport { CustomersLoaded } from './customers-loaded.model';\nimport { CustomerSearchParams } from './customer-search-params.model';\nimport { CustomerSearchService } from './customer-search.service';\nimport { CustomerEditService } from '../customer-edit/customer-edit.service';\nimport { CoreDataService, CoreData } from '../../core/core-data.service';\nimport { UtilService } from '../../core/util.service';\n\n@Component({\n  selector: 'app-customer-search',\n  templateUrl: './customer-search.component.html',\n  styleUrls: ['./customer-search.component.scss']\n})\nexport class CustomerSearchComponent implements OnInit {\n\n  customersLoaded: CustomersLoaded = new CustomersLoaded();\n  searchParams: CustomerSearchParams = new CustomerSearchParams();\n  coreData: CoreData = new CoreData();\n\n  constructor(\n    public util: UtilService,\n    private coreDataService: CoreDataService,\n    private customerSearchService: CustomerSearchService,\n    private customerEditService: CustomerEditService\n  ) { }\n\n  searchCustomers(searchParams) {\n    console.log(searchParams)\n    this.customerSearchService.searchCustomers(searchParams);\n  }\n\n  editCustomer(customerToEdit: Customer) {\n    this.customerEditService.editCustomer(customerToEdit && customerToEdit.id);\n  }\n\n  ngOnInit() {\n    this.searchParams = this.customerSearchService.getLastSearchParams();\n\n    this.customerSearchService.getCustomersLoaded().subscribe((customersLoaded) => {\n      this.customersLoaded = customersLoaded;\n    });\n\n\n    this.coreDataService.getData().subscribe((data) => {\n      this.coreData = data;\n    });\n\n  }\n}\n","coverage":[1,null,1,1,1,1,1,1,null,null,null,null,null,null,1,null,1,1,1,null,null,1,1,1,1,null,null,1,0,0,null,null,1,0,null,null,1,1,null,1,1,null,null,null,1,1,null,null,null,1,null],"branches":[34,0,0,0,34,0,1,0,22,1,0,1,22,1,1,0,22,2,0,1,22,3,0,1,22,3,1,1,22,3,2,0,22,4,0,1,22,4,1,1,23,5,0,1,23,5,1,1,23,5,2,0,23,6,0,1,23,6,1,1,24,7,0,1,24,7,1,1,24,7,2,0,24,8,0,1,24,8,1,1]},{"name":"src/app/customer/customer-search/customer-search.service.ts","source":"import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\n\nimport { CustomerSearchParams } from './customer-search-params.model';\nimport { UtilService } from '../../core/util.service';\nimport { CustomersLoaded } from './customers-loaded.model';\n\n@Injectable()\nexport class CustomerSearchService {\n\n  private $customersLoaded: BehaviorSubject<CustomersLoaded>;\n  private lastSearchParams: CustomerSearchParams = new CustomerSearchParams();\n\n  constructor(\n    private http: HttpClient,\n    private util: UtilService\n  ) {\n    this.$customersLoaded = <BehaviorSubject<CustomersLoaded>>new BehaviorSubject(new CustomersLoaded);\n  }\n\n  getCustomersLoaded() {\n    return this.$customersLoaded.asObservable();\n  }\n\n  getLastSearchParams() {\n    return this.lastSearchParams;\n  }\n\n  searchCustomers(searchParams) {\n    if (searchParams) {\n      this.lastSearchParams = searchParams;\n    }\n\n    // Set up post request\n    const req = this.http.post<CustomersLoaded>(\n      '/customer/searchCustomers',\n      searchParams || this.lastSearchParams\n    )\n\n    // Execute post request and subscribe to response\n    req.subscribe(\n      data => {\n        console.log(data);\n        // Prepare data fetched from server\n        this.$customersLoaded.next(data);\n      },\n      error => {\n        // ToDo: Implement error handler\n      });\n\n    return\n  }\n\n}\n","coverage":[1,1,1,null,1,1,1,null,null,1,null,null,8,null,null,8,8,null,8,null,null,1,1,null,null,1,1,null,null,2,2,0,null,null,null,2,null,null,null,null,null,2,null,0,null,0,null,null,null,null,null,2,null,null,1,null],"branches":[31,0,0,0,31,0,1,2,38,1,0,2,38,1,1,2,16,2,0,1,16,2,1,0,16,3,0,1,16,4,0,1,16,4,1,1,16,4,2,0,16,5,0,1,16,5,1,1]},{"name":"src/app/customer/customer-search/customers-loaded.model.ts","source":"import { Customer } from \"../customer.model\";\r\n\r\nexport class CustomersLoaded {\r\n    items: Customer[] = [];\r\n    itemsTotal: Number = 0;\r\n    itemsPerPage: Number = 0;\r\n    page: Number = 1;\r\n    pageMax: Number = 0;\r\n}","coverage":[null,null,1,9,9,9,9,9,1],"branches":[]},{"name":"src/app/freelancer/freelancer.model.ts","source":"import { Language, YesNoInProgress, Sector, CatTool } from '../shared/model/common.model';\r\nimport { Address } from '../shared/model/address.model';\r\nimport { Person } from '../shared/model/person.model';\r\nimport { SimpleChange } from '@angular/core';\r\nimport { PriceLine } from '../shared/model/price-line.model';\r\nimport { SimpleEntity } from '../shared/model/simple-entity.model';\r\n\r\n/**\r\n * Object to hold all information the application can know about a freelancer.\r\n */\r\nexport class Freelancer extends Person {\r\n    supplier_no: string = null;\r\n    company_name: string = null;\r\n    address: Address = new Address();\r\n    fl_status: FreelancerStatus = null;\r\n    fl_rating: FreelancerRating = null;\r\n    mothertounge: Language = null;\r\n    mothertounge2: Language = null;\r\n    nda: YesNoInProgress = null;\r\n    sworn: boolean = null;\r\n    vat_no: string = null;\r\n    vat_payer: boolean = null;\r\n    tax_id: string = null;\r\n    fl_payment_type: FreelancerPaymentType = null;\r\n    fl_invoicing_type: FreelancerInvoicingType = null;\r\n    bankdetails: string = null\r\n    prices: PriceLine[] = [];\r\n    cat_prices: boolean = null;\r\n    sectors: Sector[] = [];\r\n    cat_tools: CatTool[] = [];\r\n}\r\n\r\nexport class FreelancerInvoicingType extends SimpleEntity { }\r\n\r\nexport class FreelancerPaymentType extends SimpleEntity { }\r\n\r\nexport class FreelancerRating extends SimpleEntity { }\r\n\r\nexport class FreelancerStatus extends SimpleEntity { }","coverage":[null,1,1,null,null,1,null,null,null,null,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,null,1,null,1,null,1,null,1],"branches":[11,0,0,4,11,0,1,4,11,0,2,0]},{"name":"src/app/freelancer/freelancer-compact/freelancer-compact.component.ts","source":"import { Component, Input, OnInit } from '@angular/core';\nimport { Freelancer } from '../freelancer.model';\nimport { UtilService } from '../../core/util.service';\nimport { FreelancerEditService } from '../freelancer-edit/freelancer-edit.service';\n\n@Component({\n  selector: 'app-freelancer-compact',\n  templateUrl: './freelancer-compact.component.html',\n  styleUrls: ['./freelancer-compact.component.scss']\n})\nexport class FreelancerCompactComponent implements OnInit {\n\n  @Input('fl')\n  freelancer: Freelancer;\n\n  constructor(\n    private util: UtilService,\n    private freelancerEditService: FreelancerEditService\n  ) { }\n\n  editFreelancer(freelancerId: number) {\n    // Reload freelancer or pass empty new freelancer\n    this.freelancerEditService.editFreelancer(freelancerId)\n  }\n\n  getCombinedDisplayName(entity) {\n    return this.util.getCombinedDisplayName(entity);\n  }\n\n  ngOnInit() {\n  }\n\n}\n","coverage":[1,1,1,1,null,null,null,null,null,null,1,null,null,1,null,null,1,1,null,null,1,null,0,null,null,1,0,null,null,1,null,null,1,null],"branches":[14,0,0,1,14,0,1,0,14,1,0,1,17,2,0,1,17,2,1,0,17,3,0,1,17,4,0,1,17,4,1,1,17,4,2,0,17,5,0,1,17,5,1,1]},{"name":"src/app/freelancer/freelancer-edit/freelancer-edit.component.ts","source":"import { Component, OnInit, Input } from '@angular/core';\nimport { CoreData, CoreDataService } from '../../core/core-data.service';\nimport { FreelancerEditService } from './freelancer-edit.service';\nimport { Freelancer } from '../freelancer.model';\nimport { PriceLine } from '../../shared/model/price-line.model';\nimport { UtilService } from '../../core/util.service';\nimport { FreelancerSearchService } from '../freelancer-search/freelancer-search.service';\n\n@Component({\n  selector: 'app-freelancer-edit',\n  templateUrl: './freelancer-edit.component.html',\n  styleUrls: ['./freelancer-edit.component.scss']\n})\nexport class FreelancerEditComponent implements OnInit {\n\n  fl_edit: Freelancer;\n  coreData: CoreData = new CoreData();\n  new_price_line: PriceLine = new PriceLine();\n\n\n  constructor(\n    public util: UtilService,\n    private coreDataService: CoreDataService,\n    private freelancerEditService: FreelancerEditService,\n    private freelancerSearchService: FreelancerSearchService\n  ) { }\n\n\n  saveFreelancer() {\n    this.freelancerEditService.saveFreelancer(this.fl_edit);\n    // ToDo: Reload search list or update freelancer in list\n  }\n\n  deleteFreelancer() {\n    this.freelancerEditService.deleteFreelancer(this.fl_edit);\n    // ToDo: Reload search list or update freelancer in list\n  }\n\n  cancelEdit() {\n    // this.freelancerSearchService.searchFreelancers(null);\n    this.util.historyBack();\n  }\n\n\n  addPrice = function (new_price_line) {\n    if ((new_price_line.price_unit != null) && (new_price_line.service != null) && (new_price_line.price_per_unit != null)) {\n      this.util.addCopyToArray(this.fl_edit.prices, new_price_line);\n    }\n  };\n\n\n  ngOnInit() {\n    this.coreDataService.getData().subscribe((data) => {\n      this.coreData = data;\n    });\n\n    this.fl_edit = this.freelancerEditService.getFreelancerToEdit();\n  }\n}\n","coverage":[1,1,1,null,1,1,1,null,null,null,null,null,null,1,null,null,1,1,null,null,null,1,1,1,1,null,null,null,1,0,null,null,null,1,0,null,null,null,1,null,0,null,null,null,1,0,0,null,null,null,null,1,1,1,null,null,1,null,1,null],"branches":[46,0,0,0,46,0,1,0,46,1,0,0,46,1,1,0,46,1,2,0,22,2,0,1,22,2,1,0,22,3,0,1,22,4,0,1,22,4,1,1,22,4,2,0,22,5,0,1,22,5,1,1,23,6,0,1,23,6,1,1,23,6,2,0,23,7,0,1,23,7,1,1,24,8,0,1,24,8,1,1,24,8,2,0,24,9,0,1,24,9,1,1]},{"name":"src/app/freelancer/freelancer-edit/freelancer-edit.service.ts","source":"import { Injectable } from '@angular/core';\nimport { Freelancer } from '../freelancer.model';\nimport { UtilService } from '../../core/util.service';\nimport { HttpClient } from '@angular/common/http';\nimport { FreelancerSearchService } from '../freelancer-search/freelancer-search.service';\n\n@Injectable()\nexport class FreelancerEditService {\n\n  private freelancerToEdit: Freelancer = new Freelancer();\n\n  constructor(\n    private util: UtilService,\n    private http: HttpClient,\n    private freelancerSearchService: FreelancerSearchService\n  ) {\n\n  }\n\n  getFreelancerToEdit() {\n    return this.freelancerToEdit;\n  }\n\n\n  /**\n   * Save changes on server\n   * \n   * @param freelancerToSave Data for the freelancer to be updated\n   */\n  saveFreelancer(freelancerToSave) {\n    this.freelancerToEdit = freelancerToSave;\n\n    // Kopie des Freelancers erstellen, um Datum in yyyy-mm-dd String zu wandeln, falls vorhanden\n    let fl_save = this.util.cloneDeep(this.freelancerToEdit);\n    if (this.freelancerToEdit.date_of_birth) {\n      let dateObj = new Date(this.freelancerToEdit.date_of_birth)\n      if (dateObj.getTime() !== NaN) {\n        fl_save.date_of_birth = dateObj.toISOString().slice(0, 10)\n      } else {\n        alert('Datum wurde nicht korrekt eingegeben')\n        return\n      }\n\n    }\n\n    console.log(fl_save)\n    // Set up post request\n    const req = this.http.post<Freelancer>(\n      '/freelancer/editFreelancer',\n      fl_save\n    )\n\n    // Execute post request and subscribe to response\n    req.subscribe(\n      data => {\n        this.freelancerToEdit = data;\n        this.freelancerSearchService.searchFreelancers(null);\n        this.util.historyBack();\n      },\n      error => {\n        alert(\"Fehler beim Speichern:\" + error.message);\n      });\n\n    return\n  }\n\n  deleteFreelancer(freelancerToDelete) {\n    if (!confirm('Freelancer ' + freelancerToDelete.name2 + ', ' + freelancerToDelete.name1 + ' wirklich löschen?!')) {\n      return;\n    }\n\n    // Set up post request\n    const req = this.http.post<Freelancer>(\n      '/freelancer/deleteFreelancer',\n      freelancerToDelete.id\n    )\n\n    // Execute post request and subscribe to response\n    req.subscribe(\n      data => {\n        this.freelancerSearchService.searchFreelancers(null);\n        this.util.historyBack();\n      },\n      error => {\n        alert(\"Fehler beim Löschen:\" + error.message);\n      });\n\n    return\n  }\n\n  /**\n   * Loads freelancer by id and switches to edit view if found\n   * \n   * @param id Id of the freelancer to be edited\n   */\n  getFreelancerByIdAndEdit(id: number) {\n    // Set up post request\n    const req = this.http.get<Freelancer>(\n      '/freelancer/' + id\n    )\n\n    // Execute post request and subscribe to response\n    req.subscribe(\n      data => {\n        this.freelancerToEdit = data;\n        console.log(data);\n        this.util.goTo('/freelancer/edit');\n      },\n      error => {\n        alert(error.message);\n      });\n\n    return\n  }\n\n  editFreelancer(id: number) {\n    this.freelancerToEdit = new Freelancer();\n    if (id && id > 0) {\n      // Reload freelancer before editing\n      this.getFreelancerByIdAndEdit(id);\n    } else {\n      this.util.goTo('/freelancer/edit');\n    }\n  }\n\n}\n","coverage":[1,1,1,1,1,null,null,1,null,4,null,null,4,4,4,null,null,null,null,1,1,null,null,null,null,null,null,null,null,1,0,null,null,0,0,0,0,0,null,0,0,null,null,null,null,0,null,0,null,null,null,null,null,0,null,0,0,0,null,null,0,null,null,0,null,null,1,0,0,null,null,null,0,null,null,null,null,null,0,null,0,0,null,null,0,null,null,0,null,null,null,null,null,null,null,1,null,0,null,null,null,null,0,null,0,0,0,null,null,0,null,null,0,null,null,1,0,0,null,0,null,0,null,null,null,1,null],"branches":[35,0,0,0,35,0,1,0,37,1,0,0,37,1,1,0,68,2,0,0,68,2,1,0,118,3,0,0,118,3,1,0,118,4,0,0,118,4,1,0,13,5,0,1,13,5,1,0,13,6,0,1,13,7,0,1,13,7,1,1,13,7,2,0,13,8,0,1,13,8,1,1,14,9,0,1,14,9,1,1,14,9,2,0,14,10,0,1,14,10,1,1]},{"name":"src/app/freelancer/freelancer-search/freelancer-search.component.ts","source":"import { Component, OnInit } from '@angular/core';\nimport { Freelancer } from '../freelancer.model';\nimport { FreelancersLoaded } from './freelancers-loaded.model';\nimport { FreelancerSearchParams } from './freelancers-search-params.model';\nimport { FreelancerSearchService } from './freelancer-search.service';\nimport { FreelancerEditService } from '../freelancer-edit/freelancer-edit.service';\nimport { CoreDataService, CoreData } from '../../core/core-data.service';\nimport { UtilService } from '../../core/util.service';\n\n@Component({\n  selector: 'app-freelancer',\n  templateUrl: './freelancer-search.component.html',\n  styleUrls: ['./freelancer-search.component.scss']\n})\nexport class FreelancerSearchComponent implements OnInit {\n\n  freelancersLoaded: FreelancersLoaded = new FreelancersLoaded();\n  searchParams: FreelancerSearchParams = new FreelancerSearchParams();\n  coreData: CoreData = new CoreData();\n\n  constructor(\n    public util: UtilService,\n    private coreDataService: CoreDataService,\n    private freelancerSearchService: FreelancerSearchService,\n    private freelancerEditService: FreelancerEditService\n  ) { }\n\n  searchFreelancers(searchParams) {\n    console.log(searchParams)\n    this.freelancerSearchService.searchFreelancers(searchParams);\n  }\n\n  editFreelancer(freelancerToEdit: Freelancer) {\n    this.freelancerEditService.editFreelancer(freelancerToEdit && freelancerToEdit.id);\n  }\n\n  ngOnInit() {\n    this.searchParams = this.freelancerSearchService.getLastSearchParams();\n\n    this.freelancerSearchService.getFreelancersLoaded().subscribe((freelancersLoaded) => {\n      this.freelancersLoaded = freelancersLoaded;\n    });\n\n\n    this.coreDataService.getData().subscribe((data) => {\n      this.coreData = data;\n    });\n\n  }\n\n}\n","coverage":[1,null,1,1,1,1,1,1,null,null,null,null,null,null,1,null,1,1,1,null,null,1,1,1,1,null,null,1,0,0,null,null,1,0,null,null,1,1,null,1,1,null,null,null,1,1,null,null,null,null,1,null],"branches":[34,0,0,0,34,0,1,0,22,1,0,1,22,1,1,0,22,2,0,1,22,3,0,1,22,3,1,1,22,3,2,0,22,4,0,1,22,4,1,1,23,5,0,1,23,5,1,1,23,5,2,0,23,6,0,1,23,6,1,1,24,7,0,1,24,7,1,1,24,7,2,0,24,8,0,1,24,8,1,1]},{"name":"src/app/freelancer/freelancer-search/freelancer-search.service.ts","source":"import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\n\nimport { FreelancersLoaded } from './freelancers-loaded.model';\nimport { UtilService } from '../../core/util.service';\nimport { FreelancerSearchParams } from './freelancers-search-params.model';\n\n@Injectable()\nexport class FreelancerSearchService {\n\n  private $freelancersLoaded: BehaviorSubject<FreelancersLoaded>;\n  private lastSearchParams: FreelancerSearchParams = new FreelancerSearchParams();\n\n  constructor(\n    private http: HttpClient,\n    private util: UtilService\n  ) {\n    this.$freelancersLoaded = <BehaviorSubject<FreelancersLoaded>>new BehaviorSubject(new FreelancersLoaded);\n  }\n\n  getFreelancersLoaded() {\n    return this.$freelancersLoaded.asObservable();\n  }\n\n  getLastSearchParams() {\n    return this.lastSearchParams;\n  }\n\n  searchFreelancers(searchParams) {\n    if (searchParams) {\n      this.lastSearchParams = searchParams;\n    }\n\n    // Set up post request\n    const req = this.http.post<FreelancersLoaded>(\n      '/freelancer/searchFreelancers',\n      searchParams || this.lastSearchParams\n    )\n\n    // Execute post request and subscribe to response\n    req.subscribe(\n      data => {\n        console.log(data);\n        for (let i = 0; i < data.items.length; i++) {\n          this.util.orderPrices(data.items[i].prices);\n        }\n        this.$freelancersLoaded.next(data);\n      },\n      error => {\n        // ToDo: Implement error handler\n      });\n\n    return\n  }\n\n}\n","coverage":[1,1,1,null,1,1,1,null,null,1,null,null,5,null,null,5,5,null,5,null,null,1,1,null,null,1,1,null,null,1,0,0,null,null,null,0,null,null,null,null,null,0,null,0,0,0,null,0,null,null,null,null,null,0,null,null,1,null],"branches":[31,0,0,0,31,0,1,0,38,1,0,0,38,1,1,0,16,2,0,1,16,2,1,0,16,3,0,1,16,4,0,1,16,4,1,1,16,4,2,0,16,5,0,1,16,5,1,1]},{"name":"src/app/freelancer/freelancer-search/freelancers-loaded.model.ts","source":"import { Freelancer } from \"../freelancer.model\";\r\n\r\n/**\r\n * Object to hold all information the application can know about a freelancer.\r\n */\r\nexport class FreelancersLoaded {\r\n    items: Freelancer[] = [];\r\n    itemsTotal: Number = 0;\r\n    itemsPerPage: Number = 0;\r\n    page: Number = 1;\r\n    pageMax: Number = 0;\r\n}","coverage":[null,null,null,null,null,1,6,6,6,6,6,1],"branches":[]},{"name":"src/app/freelancer/freelancer-search/freelancers-search-params.model.ts","source":"import { Freelancer, FreelancerStatus } from \"../freelancer.model\";\r\nimport { Language, Sector } from \"../../shared/model/common.model\";\r\n\r\n/**\r\n * Object to hold all information the application can know about a freelancer.\r\n */\r\nexport class FreelancerSearchParams {\r\n    name: string;\r\n    lng_source: Language;\r\n    lng_target: Language;\r\n    fl_status: FreelancerStatus;\r\n    sector: Sector;\r\n    page: number = 1;\r\n}","coverage":[null,null,null,null,null,null,1,null,null,null,null,null,6,1],"branches":[]},{"name":"src/app/layout/home/home.component.ts","source":"import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","coverage":[1,null,null,null,null,null,null,1,null,null,null,1,null,null,1,null],"branches":[]},{"name":"src/app/layout/login/login.component.ts","source":"import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../../user/user.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  username: string;\n  password: string;\n  loginError: { message: string }\n\n  constructor(private userService: UserService) { }\n\n  loginUser(username, password) {\n    this.userService.loginUser({ username: username, password: password }, null, null);\n  }\n\n  ngOnInit() {\n    this.userService.getLoginError()\n      .subscribe(loginError => this.loginError = loginError)\n  }\n\n}\n","coverage":[1,1,null,null,null,null,null,null,1,null,null,null,null,null,2,null,1,1,null,null,2,2,2,null,null,1,null],"branches":[15,0,0,1,15,0,1,0,15,1,0,1]},{"name":"src/app/layout/top-nav/top-nav.component.ts","source":"import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../../user/user.service';\n\n@Component({\n  selector: 'app-top-nav',\n  templateUrl: './top-nav.component.html',\n  styleUrls: ['./top-nav.component.scss']\n})\nexport class TopNavComponent implements OnInit {\n\n  isCollapsed: Boolean = false;\n\n  constructor(\n    private userService: UserService\n  ) { }\n\n  userHasRole(role: string) {\n    return this.userService.userHasRole(role);\n  }\n\n  isUserLoggedIn() {\n    return this.userService.isLoggedIn();\n  }\n\n  logoutUser() {\n    return this.userService.logoutUser(null, null);\n  }\n\n  ngOnInit() {\n  }\n\n}\n","coverage":[1,1,null,null,null,null,null,null,1,null,2,null,null,2,null,null,1,4,null,null,1,1,null,null,1,0,null,null,1,null,null,1,null],"branches":[14,0,0,1,14,0,1,0,14,1,0,1]},{"name":"src/app/shared/shared.module.ts","source":"import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule, HttpRequest, HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { SafeUrlPipe } from './pipes/safe-url.pipe';\nimport { PropMultiSelectComponent } from './components/prop-multi-select/prop-multi-select.component';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { MultiselectDropdownModule } from 'angular-2-dropdown-multiselect';\nimport { InlineEditorModule } from '@qontu/ngx-inline-editor';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    HttpClientModule,\n    NgbModule,\n    MultiselectDropdownModule,\n    InlineEditorModule\n  ],\n  declarations: [\n    PropMultiSelectComponent,\n    SafeUrlPipe\n  ],\n  exports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    NgbModule,\n    PropMultiSelectComponent,\n    SafeUrlPipe,\n    MultiselectDropdownModule,\n    InlineEditorModule\n  ],\n  providers: [\n    HttpClient\n  ]\n})\nexport class SharedModule { }\n","coverage":[1,1,1,1,1,1,1,1,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null],"branches":[]},{"name":"src/app/shared/components/prop-multi-select/prop-multi-select.component.ts","source":"import { Component, OnInit, Input, ChangeDetectorRef } from '@angular/core';\nimport { SimpleEntity, SimpleEntityCollection } from '../../model/simple-entity.model';\nimport { UtilService } from '../../../core/util.service';\nimport { FormControl, FormGroup } from '@angular/forms';\n\nimport { IMultiSelectOption, IMultiSelectSettings, IMultiSelectTexts } from 'angular-2-dropdown-multiselect';\n\n@Component({\n  selector: 'app-prop-multi-select',\n  templateUrl: './prop-multi-select.component.html',\n  styleUrls: ['./prop-multi-select.component.scss']\n})\nexport class PropMultiSelectComponent implements OnInit {\n\n  @Input('objarray')\n  objarray: SimpleEntity[];\n\n  @Input('valuearray')\n  valuearray: SimpleEntityCollection;\n\n  currentSelection: number[] = [];\n  valuelist: IMultiSelectOption[] = [];\n\n  rerenderNgSelect: boolean = false;\n\n  // Settings configuration\n  singleSelect: boolean = false;\n\n  multiselectSettings: IMultiSelectSettings = {\n    enableSearch: true,\n    checkedStyle: 'fontawesome',\n    buttonClasses: 'btn btn-default btn-block',\n    dynamicTitleMaxItems: 3,\n    displayAllSelectedText: true\n  };\n\n  multiselectTexts: IMultiSelectTexts = {\n    checkAll: 'Select all',\n    uncheckAll: 'Unselect all',\n    checked: 'item selected',\n    checkedPlural: 'items selected',\n    searchPlaceholder: 'Find',\n    searchEmptyResult: 'Nothing found...',\n    searchNoRenderText: 'Type in search box to see results...',\n    defaultTitle: 'Select',\n    allSelected: 'All selected',\n  };\n\n  constructor(\n    public util: UtilService,\n    private cdRef: ChangeDetectorRef\n  ) {\n    if (this.singleSelect) {\n      this.multiselectSettings.selectionLimit = 1;\n      this.multiselectSettings.autoUnselect = true\n    }\n  }\n\n  addSelectedItems() {\n    console.log(this.currentSelection);\n    for (let i = 0; i < this.currentSelection.length; i++) {\n      let element = null;\n\n      for (let va = 0; va < this.valuearray.values.length; va++) {\n        if (this.valuearray.values[va].id === this.currentSelection[i]) {\n          element = this.valuearray.values[va];\n          break;\n        }\n      }\n\n      if (element && !this.util.isObjectIdInArray(this.objarray, element)) {\n        this.util.addCopyToArray(this.objarray, element);\n      }\n    }\n\n    this.currentSelection = [];\n    this.util.orderArrayByName(this.objarray);\n\n    this.doReRenderNg2Select();\n  };\n\n  removeSelectedItem(item) {\n    this.util.removeFromArray(this.objarray, item);\n    this.doReRenderNg2Select();\n  }\n\n  doReRenderNg2Select() {\n    this.rerenderNgSelect = true;\n    this.cdRef.detectChanges();\n    this.valuelist = this.prepareValueArray(this.valuearray);\n    this.rerenderNgSelect = false;\n  }\n\n  prepareValueArray(valuearray) {\n    let valuelist = Object.assign([], valuearray.values);\n    this.objarray.map((value) => {\n      this.util.removeFromArray(valuelist, value);\n    })\n    this.util.orderArrayByName(valuelist);\n    valuelist = this.convertToSelectFormat(valuelist);\n    return valuelist;\n  }\n\n\n  public refreshValue(value: any): void {\n    this.currentSelection = value;\n  }\n\n  convertToSelectFormat(simpleEntityArray: SimpleEntity[]) {\n    const result = [];\n    for (let i = 0; i < simpleEntityArray.length; i++) {\n      result.push({\n        id: simpleEntityArray[i].id,\n        name: simpleEntityArray[i].name\n      })\n    }\n\n    return result;\n  }\n\n  ngOnInit() {\n    this.util.orderArrayByName(this.objarray);\n    this.valuelist = this.prepareValueArray(this.valuearray);\n  }\n\n}\n","coverage":[1,1,1,null,null,null,null,null,null,null,null,null,1,null,null,1,null,null,1,null,4,4,null,4,null,null,4,null,4,null,null,null,null,null,null,null,4,null,null,null,null,null,null,null,null,null,null,null,null,4,4,null,4,0,0,null,null,null,1,0,0,0,null,0,0,0,0,null,null,null,0,0,null,null,null,0,0,null,0,null,null,1,0,0,null,null,1,0,0,0,0,null,null,3,3,3,0,null,3,3,3,null,null,null,1,0,null,null,1,3,3,89,null,null,null,null,null,3,null,null,1,3,3,null,null,1,null],"branches":[53,0,0,0,53,0,1,4,65,1,0,0,65,1,1,0,71,2,0,0,71,2,1,0,71,3,0,0,71,3,1,0,19,4,0,1,19,4,1,0,19,5,0,1,50,6,0,1,50,6,1,0,50,7,0,1,50,8,0,1,50,8,1,1,50,8,2,0,50,9,0,1,50,9,1,1]},{"name":"src/app/shared/model/address.model.ts","source":"import { SimpleEntity } from \"./simple-entity.model\";\r\nimport { TwoLevelEntity } from \"./two-level-entity.model\";\r\n\r\n// General models\r\n\r\nexport class Address {\r\n    id: number;\r\n    street: string = null;\r\n    street2: string = null;\r\n    zipcode: string = null;\r\n    city: string = null;\r\n    country: SimpleEntity = null;\r\n}","coverage":[null,null,null,null,null,1,null,13,13,13,13,13,1],"branches":[]},{"name":"src/app/shared/model/contact.model.ts","source":"import { SimpleEntity } from \"./simple-entity.model\";\r\nimport { TwoLevelEntity } from \"./two-level-entity.model\";\r\n\r\n// General models\r\n\r\nexport class Contact {\r\n    id: number;\r\n    name1: string = null;\r\n    name2: string = null;\r\n    phone: string = null;\r\n    phone2: string = null;\r\n    email: string = null;\r\n    email2: string = null;\r\n    skype: string = null;\r\n    fax: string = null;\r\n    comment: string = null;\r\n    created_at: Date = null;\r\n}","coverage":[null,null,null,null,null,1,null,20,20,20,20,20,20,20,20,20,20,1],"branches":[]},{"name":"src/app/shared/model/person.model.ts","source":"import { SimpleEntity } from \"./simple-entity.model\";\r\nimport { TwoLevelEntity } from \"./two-level-entity.model\";\r\nimport { Contact } from \"./contact.model\";\r\nimport { Anrede, Language } from \"./common.model\";\r\n\r\n// General models\r\n\r\nexport class Person extends Contact {\r\n    anrede: Anrede = null;\r\n    date_of_birth: Date = null;\r\n    correspond_language: Language = null;\r\n}","coverage":[null,null,1,null,null,null,null,11,11,11,11,1],"branches":[8,0,0,11,8,0,1,11,8,0,2,11]},{"name":"src/app/shared/model/price-line.model.ts","source":"import { Language, Service, PriceUnit, Currency } from \"./common.model\";\r\n\r\n// General models\r\n\r\nexport class PriceLine {\r\n    id: number;\r\n    lng_source: Language = null;\r\n    lng_target: Language = null;\r\n    service: Service = null;\r\n    price_unit: PriceUnit = null;\r\n    price_per_unit: number = null;\r\n    currency: Currency = null;\r\n    minimum_price: number = null;\r\n}","coverage":[null,null,null,null,1,null,5,5,5,5,5,5,5,1],"branches":[]},{"name":"src/app/shared/model/simple-entity.model.ts","source":"/**\r\n * Object to hold all information the application can know about a user.\r\n */\r\nexport class SimpleEntity {\r\n    id: Number;\r\n    name: string = null;\r\n    main_item?: SimpleEntity;\r\n}\r\n\r\nexport class SimpleEntityCollection {\r\n    display_name: string = null;\r\n    values: SimpleEntity[] = [];\r\n}","coverage":[null,null,null,1,null,20,null,1,null,1,38,38,1],"branches":[]},{"name":"src/app/shared/model/two-level-entity.model.ts","source":"import { SimpleEntity } from \"./simple-entity.model\";\r\n\r\n/**\r\n * Object to hold all information the application can know about a user.\r\n */\r\nexport class TwoLevelEntity extends SimpleEntity {\r\n    sub_items: SimpleEntity[] = [];\r\n}\r\n\r\nexport class TwoLevelEntityCollection extends SimpleEntity {\r\n    display_name: string = \"\";\r\n    values: TwoLevelEntity[] = [];\r\n}","coverage":[1,null,null,null,null,2,2,1,null,18,18,18,1],"branches":[6,0,0,2,6,0,1,2,6,0,2,2,10,1,0,18,10,1,1,18,10,1,2,18]},{"name":"src/app/shared/pipes/safe-url.pipe.ts","source":"import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n    name: 'safeUrl'\r\n})\r\nexport class SafeUrlPipe implements PipeTransform {\r\n    constructor(private domSanitizer: DomSanitizer) { }\r\n    transform(url) {\r\n        return this.domSanitizer.bypassSecurityTrustResourceUrl(url);\r\n    }\r\n}","coverage":[1,1,null,null,null,null,1,2,1,0,null,1],"branches":[8,0,0,1,8,0,1,0,8,1,0,1]},{"name":"src/app/user/auth-guard.service.ts","source":"import { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot } from '@angular/router';\nimport { UserService } from './user.service';\n\n@Injectable()\nexport class AuthGuardService implements CanActivate {\n\n  constructor(public userService: UserService, public router: Router) { }\n\n  canActivate(route: ActivatedRouteSnapshot): boolean {\n    const expectedRole = route.data.expectedRole;\n\n    if (this.userService.isLoggedIn()) {\n      if (expectedRole) {\n        return this.userService.userHasRole(expectedRole);\n      }\n      return true;\n    } else {\n      this.router.navigate(['login']);\n      return false;\n    }\n  }\n}\n","coverage":[1,1,1,null,null,1,null,2,null,1,1,null,1,0,0,null,0,null,1,1,null,null,1,null],"branches":[13,0,0,0,13,0,1,1,14,1,0,0,14,1,1,0,8,2,0,1,8,2,1,0,8,3,0,1,8,4,0,1,8,4,1,1,8,4,2,0,8,5,0,1,8,5,1,1]},{"name":"src/app/user/user.model.ts","source":"/**\r\n * Object to hold all information the application can know about a user.\r\n */\r\nexport class User {\r\n    id: Number;\r\n    username: string = null;\r\n    email: string = null;\r\n    roles: string[] = [];\r\n\r\n    clearData(): void {\r\n        this.id = null;\r\n        this.username = null;\r\n        this.roles = [];\r\n    }\r\n\r\n    hasRole(role: string) {\r\n        return this.roles.indexOf(role) >= 0;\r\n    }\r\n}","coverage":[null,null,null,1,null,22,22,22,null,1,4,4,4,null,null,1,7,null,1],"branches":[]},{"name":"src/app/user/user.service.ts","source":"import { Injectable, OnInit } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Subject, Observable, Subscription } from 'rxjs/Rx';\nimport { of } from 'rxjs/observable/of';\nimport { User } from './user.model';\nimport { UtilService } from '../core/util.service';\n\n@Injectable()\nexport class UserService {\n\n  private user: User = new User();\n\n  loginError = {\n    message: ''\n  };\n\n  constructor(\n    private http: HttpClient,\n    private util: UtilService\n  ) {\n    /*\n    this.user$ = of(this.user);\n    this.user$.subscribe(() => {\n      if (!this.isLoggedIn()) {\n        this.util.goTo('/login');\n      }\n    })\n    */\n  }\n\n  getCurrentUser(): User {\n    return this.user\n  }\n\n  isLoggedIn(): boolean {\n    return typeof this.user.id !== 'undefined' && typeof this.user.username !== 'undefined' && this.user.id !== null && this.user.username !== null;\n  }\n\n  getLoginError(): Observable<{ message: string }> {\n    return of(this.loginError);\n  }\n\n  userHasRole(role: string) {\n    return this.user.hasRole(role);\n  }\n\n  /**\n   * Validate credentials with server and receive webtoken\n   */\n  loginUser(credentials, resolve, reject): void {\n    const formData = new FormData();\n    formData.append('_username', credentials.username)\n    formData.append('_password', credentials.password)\n    formData.append('_remember_me', 'true')\n\n    // Set up post request\n    const req = this.http.post<User>(\n      '/login_check',\n      formData\n    )\n\n    // Execute post request and subscribe to response\n    req.subscribe(\n      data => {\n        this.user.clearData();\n\n        this.user.id = data.id;\n        this.user.username = data.username;\n        this.user.roles = data.roles;\n\n        this.loginError.message = '';\n\n        // Navigate to main page\n        this.util.goTo('/home');\n        console.log(data);\n\n        resolve && resolve(data);\n      },\n      error => {\n        this.user.clearData();\n        if (error.status === 401) {\n          this.loginError.message = 'Kombination aus Benutzername und Passwort ist unbekannt';\n        }\n        reject && reject(error);\n      });\n\n    return\n  }\n\n  /**\n   * Logging out clears the user and redirects to main page.\n   *\n   */\n  logoutUser(resolve, reject): void {\n    // Set up request\n    const req = this.http.get<void>(\n      '/logout'\n    )\n\n    // Execute post request and subscribe to response\n    req.subscribe(\n      data => {\n        this.user.clearData();\n\n        // Navigate to main page\n        this.util.goTo('/logout');\n\n        resolve && resolve(data);\n      },\n      error => {\n        alert('Es ist ein Fehler beim Logout aufgetreten');\n        reject && reject(error);\n      });\n  }\n\n  /**\n   * Tests the server firewall for the user logged in with this\n   * session and sets the user if it is logged in and returned.\n   * \n   * @param resolve \n   * @param reject \n   */\n  testServerForLoggedInUser(resolve, reject) {\n    // Set up post request\n    const req = this.http.get<User>(\n      '/get_logged_in_user'\n    )\n\n    // Execute post request and subscribe to response\n    req.subscribe(\n      data => {\n        this.user.id = data.id;\n        this.user.username = data.username;\n        this.user.roles = data.roles;\n\n        resolve && resolve(data);\n      },\n      error => {\n        alert('Es ist ein Fehler beim automatischen Login aufgetreten');\n        reject && reject(error);\n      });\n  }\n\n  setNewPassword(oldPassword, newPassword): Promise<User> {\n\n    return new Promise((resolve, reject) => {\n      // Set up post request\n      const req = this.http.post<User>(\n        '/user/change_pwd',\n        {\n          pwd_old: oldPassword,\n          pwd_new: newPassword\n        }\n      )\n\n      // Execute post request and subscribe to response\n      req.subscribe(\n        data => {\n          this.user.id = data.id;\n          this.user.username = data.username;\n          this.user.roles = data.roles;\n\n          resolve && resolve(this.user);\n        },\n        error => {\n          reject && reject(error);\n        });\n    })\n  }\n\n}\n","coverage":[1,1,null,1,1,1,null,null,1,null,17,null,17,null,null,null,null,17,17,null,null,null,null,null,null,null,null,null,null,null,1,1,null,null,1,7,null,null,1,2,null,null,1,7,null,null,null,null,null,5,5,5,5,5,null,null,5,null,null,null,null,null,5,null,2,null,2,2,2,null,2,null,null,2,2,null,2,null,null,1,1,1,null,1,null,null,5,null,null,null,null,null,null,1,null,1,null,null,null,null,1,null,1,null,null,1,null,1,null,null,0,0,null,null,null,null,null,null,null,null,null,null,2,null,2,null,null,null,null,2,null,1,1,1,null,1,null,null,1,1,null,null,null,1,null,0,null,0,null,null,null,null,null,null,null,null,0,null,0,0,0,null,0,null,null,0,null,null,null,null,1,null],"branches":[36,0,0,7,36,0,1,4,36,0,2,4,36,0,3,3,77,1,0,2,77,1,1,2,81,2,0,1,81,2,1,0,84,3,0,1,84,3,1,0,108,4,0,1,108,4,1,1,112,5,0,0,112,5,1,0,136,6,0,1,136,6,1,1,140,7,0,1,140,7,1,1,163,8,0,0,163,8,1,0,166,9,0,0,166,9,1,0,18,10,0,1,18,10,1,0,18,11,0,1,18,12,0,1,18,12,1,1,18,12,2,0,18,13,0,1,18,13,1,1]},{"name":"src/app/user/user-change-pwd/user-change-pwd.component.ts","source":"import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../user.service';\nimport { User } from '../user.model';\nimport { UtilService } from '../../core/util.service';\n\n@Component({\n  selector: 'app-user-change-pwd',\n  templateUrl: './user-change-pwd.component.html',\n  styleUrls: ['./user-change-pwd.component.scss']\n})\nexport class UserChangePwdComponent implements OnInit {\n\n  public pwdOld: string\n  public pwdNew: string\n  public pwdNewRepeated: string\n  public currentUser: User\n  public formSubmitted: boolean = false\n  public errorMessage: string = null\n\n  constructor(\n    private userService: UserService,\n    private util: UtilService) { }\n\n  ngOnInit() {\n    this.currentUser = this.userService.getCurrentUser()\n  }\n\n  setNewPassword(pwdForm) {\n    this.formSubmitted = true\n    this.errorMessage = null\n    this.userService.setNewPassword(this.pwdOld, this.pwdNew)\n      .then((user) => {\n        alert('Passwort wurde erfolgreich geändert')\n        this.util.historyBack()\n      })\n      .catch((err) => {\n        console.log(err)\n        this.errorMessage = err.error\n      })\n  }\n\n  goBack() {\n    this.util.historyBack()\n  }\n\n}\n","coverage":[1,1,null,1,null,null,null,null,null,null,1,null,null,null,null,null,1,1,null,null,1,1,null,1,1,null,null,1,0,0,0,null,0,0,null,null,0,0,null,null,null,1,0,null,null,1,null],"branches":[21,0,0,1,21,0,1,0,21,1,0,1,21,2,0,1,21,2,1,1,21,2,2,0,21,3,0,1,21,3,1,1]},{"name":"src/app/user/user-overview/user-overview.component.ts","source":"import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-user-overview',\n  templateUrl: './user-overview.component.html',\n  styleUrls: ['./user-overview.component.scss']\n})\nexport class UserOverviewComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","coverage":[1,null,null,null,null,null,null,1,null,null,null,1,null,null,1,null],"branches":[]},{"name":"src/app/user/user-profile/user-profile.component.ts","source":"import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-user-profile',\n  templateUrl: './user-profile.component.html',\n  styleUrls: ['./user-profile.component.scss']\n})\nexport class UserProfileComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","coverage":[1,null,null,null,null,null,null,1,null,null,null,1,null,null,1,null],"branches":[]}],"environment":{"packagist_version":"2.0.0"}}